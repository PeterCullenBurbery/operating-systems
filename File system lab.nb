(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1188199,      24534]
NotebookOptionsPosition[   1141535,      23739]
NotebookOutlinePosition[   1141975,      23756]
CellTagsIndexPosition[   1141932,      23753]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"FileSystem", "=", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777121826637106`*^9, 3.8777121952533293`*^9}, {
  3.877712411031906*^9, 3.8777124126511045`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"bf7aa93b-740b-4467-874a-09c594251c6a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}], ",", 
     RowBox[{"{", "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8777121957257977`*^9, 3.8777124138625245`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"bd6164c3-f9bf-4731-83f2-b9d4830b8281"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"createFile", "[", 
   RowBox[{
    RowBox[{"fileName_", "?", "StringQ"}], ",", 
    RowBox[{"readOnly_", "?", "BooleanQ"}]}], "]"}], ":=", "foo"}]], "Input",
 CellChangeTimes->{{3.8777121998375387`*^9, 3.877712214239012*^9}, {
  3.8777123900057*^9, 3.877712391789709*^9}, {3.877712473269531*^9, 
  3.877712478049471*^9}, {3.8777125970089874`*^9, 3.8777125973099546`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"48f827cb-d446-4057-bbcb-51384449aa67"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Association", "@", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"i", "->", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"{", "10", "}"}]}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.87771249424343*^9, 3.877712567007241*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"58ccd537-fce8-4215-aa9a-aff0ea8e24a8"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877712528950178*^9, 3.8777125686232696`*^9}},
 CellLabel->"Out[7]=",ExpressionUUID->"477188d1-d5f5-49de-bf57-583190b3b6f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<test1\>\"", ",", "False"}], "]"}]], "Input",
 CellChangeTimes->{{3.877712591103125*^9, 3.8777126078864336`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"09215121-5935-45d7-933c-5004df711359"],

Cell[BoxData["foo"], "Output",
 CellChangeTimes->{3.8777126081772766`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"d7ecc5d0-98d9-48f1-b3ad-eeae5a618f79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Characters", "[", "\"\<This is the first phrase.\>\"", "]"}], "//",
   "InputForm"}]], "Input",
 CellChangeTimes->{{3.877712623798357*^9, 3.8777126357850056`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"e95c1240-76f7-496b-a9e8-26c35a94bb15"],

Cell["\<\
{\"T\", \"h\", \"i\", \"s\", \" \", \"i\", \"s\", \" \", \"t\", \"h\", \"e\", \
\" \", 
 \"f\", \"i\", \"r\", \"s\", \"t\", \" \", \"p\", \"h\", \"r\", \"a\", \"s\", \
\"e\", \".\"}\
\>", "Output",
 CellChangeTimes->{{3.8777126295556045`*^9, 3.877712636035101*^9}},
 CellLabel->
  "Out[11]//InputForm=",ExpressionUUID->"1decdd29-6dfa-4521-853c-\
c72fb93b30d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{
   RowBox[{"Characters", "[", "\"\<This is the first phrase.\>\"", "]"}], ",", 
   RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777126373601623`*^9, 3.877712694242199*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"c5142c5a-12b8-4f85-b6af-07a13f8a58f2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"t\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>",
      ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", ",", "\<\" \"\>", 
     ",", "\<\"p\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>",
      ",", "\<\".\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.877712646111513*^9, 3.877712694943885*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"f6507d13-2a78-4997-950a-5e301b637a17"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PadRight", "[", 
    RowBox[{"#", ",", "10", ",", "\"\<\>\""}], "]"}], "&"}], "/@", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Characters", "[", "\"\<This is the first phrase.\>\"", "]"}], 
    ",", 
    RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777127120318*^9, 3.877712772851104*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"75a0e7a2-60c2-4475-9de8-4f8408b88a8a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"t\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>",
      ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", ",", "\<\" \"\>", 
     ",", "\<\"p\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>",
      ",", "\<\".\"\>", ",", "\<\"\"\>", ",", "\<\"\"\>", ",", "\<\"\"\>", 
     ",", "\<\"\"\>", ",", "\<\"\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8777127353261905`*^9, 3.8777127731599436`*^9}},
 CellLabel->"Out[20]=",ExpressionUUID->"7f37d61d-7695-4bc8-a6a1-b5f3ba49946b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PadRight", "[", 
    RowBox[{"#", ",", "10", ",", "0"}], "]"}], "&"}], "/@", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Characters", "[", "\"\<This is the first phrase.\>\"", "]"}], 
    ",", 
    RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777127120318*^9, 3.8777127859200816`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"73c20913-2b7c-4886-9e82-f4ee0d1b4895"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"t\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>",
      ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", ",", "\<\" \"\>", 
     ",", "\<\"p\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>",
      ",", "\<\".\"\>", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877712786410607*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"c720df6e-cc4d-4a87-a9cc-f5f42f3ed919"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PadRight", "[", 
    RowBox[{"#", ",", "10", ",", "Null"}], "]"}], "&"}], "/@", 
  RowBox[{"Partition", "[", 
   RowBox[{
    RowBox[{"Characters", "[", "\"\<This is the first phrase.\>\"", "]"}], 
    ",", 
    RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777127120318*^9, 3.8777127923458915`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"c491d154-ead9-4316-b87c-929073cead65"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"t\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>",
      ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", ",", "\<\" \"\>", 
     ",", "\<\"p\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>",
      ",", "\<\".\"\>", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8777127926349373`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"e928024f-44e2-4e3a-afeb-1cc3020a2337"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConstantArray", "[", 
  RowBox[{"Null", ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777128886106443`*^9, 3.8777128921744275`*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"1de316d7-fa97-40f8-bad8-532c90e17951"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8777128925497084`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"eaa4d6ea-4eca-4c08-b563-28a3a589072b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", 
  RowBox[{"\"\<*replace*\>\"", ",", 
   RowBox[{"IgnoreCase", "->", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777129094854774`*^9, 3.8777129154486876`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"d6675c29-2be3-4169-a35b-eb97595ebcb5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"AroundReplace\"\>", ",", "\<\"AudioReplace\"\>", 
   ",", "\<\"ColorReplace\"\>", ",", "\<\"ExportAutoReplacements\"\>", 
   ",", "\<\"ImportAutoReplacements\"\>", 
   ",", "\<\"InputAutoReplacements\"\>", ",", "\<\"NetReplace\"\>", 
   ",", "\<\"NetReplacePart\"\>", ",", "\<\"PermutationReplace\"\>", 
   ",", "\<\"PlaceholderReplace\"\>", ",", "\<\"Replace\"\>", 
   ",", "\<\"ReplaceAll\"\>", ",", "\<\"ReplaceAt\"\>", 
   ",", "\<\"ReplaceHeldPart\"\>", ",", "\<\"ReplaceImageValue\"\>", 
   ",", "\<\"ReplaceList\"\>", ",", "\<\"ReplacePart\"\>", 
   ",", "\<\"ReplacePixelValue\"\>", ",", "\<\"ReplaceRepeated\"\>", 
   ",", "\<\"SequenceReplace\"\>", ",", "\<\"StringReplace\"\>", 
   ",", "\<\"StringReplaceList\"\>", ",", "\<\"StringReplacePart\"\>", 
   ",", "\<\"SubsetReplace\"\>", ",", "\<\"SymmetrizedReplacePart\"\>", 
   ",", "\<\"TreeReplacePart\"\>", ",", "\<\"VertexReplace\"\>", 
   ",", "\<\"VideoReplace\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.877712915938066*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"3fb4fdcd-d517-4d06-b2c7-668eed863528"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Names", "[", 
  RowBox[{"\"\<replace*\>\"", ",", 
   RowBox[{"IgnoreCase", "->", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777129094854774`*^9, 3.877712924107775*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"a4b8e0e0-f97c-47ec-a49a-ae0727acf676"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Replace\"\>", ",", "\<\"ReplaceAll\"\>", 
   ",", "\<\"ReplaceAt\"\>", ",", "\<\"ReplaceHeldPart\"\>", 
   ",", "\<\"ReplaceImageValue\"\>", ",", "\<\"ReplaceList\"\>", 
   ",", "\<\"ReplacePart\"\>", ",", "\<\"ReplacePixelValue\"\>", 
   ",", "\<\"ReplaceRepeated\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8777129245233126`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"5905343b-cfce-44b3-a3c7-d1bba82125e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "/@", 
  RowBox[{"Names", "[", 
   RowBox[{"\"\<replace*\>\"", ",", 
    RowBox[{"IgnoreCase", "->", "True"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877712925869331*^9, 3.877712927569298*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"ecb48adb-a4df-407f-84d8-00c5cdbfd55e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/Replace",
                ButtonNote->"paclet:ref/Replace"],
               "\"paclet:ref/Replace\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Replace\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) applies a rule or list \
of rules in an attempt to transform the entire expression \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"Replace\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"levelspec\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) applies rules to parts of \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) specified by \
\\!\\(\\*StyleBox[\\\"levelspec\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"Replace\\\", \\\"[\\\", StyleBox[\\\"rules\\\", \
\\\"TI\\\"], \\\"]\\\"}]\\) represents an operator form of Replace that can \
be applied to an expression.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/Replace", 
                    "paclet:ref/Replace", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/Replace.html"],
                     None}, 
                    "http://reference.wolfram.com/language/ref/Replace.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                    RowBox[{"Heads", "\[Rule]", "False"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", "Protected", "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`Replace\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/Replace",
                ButtonNote->"paclet:ref/Replace"],
               "\"paclet:ref/Replace\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"Replace\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) applies a rule or list \
of rules in an attempt to transform the entire expression \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"Replace\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"levelspec\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) applies rules to parts of \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) specified by \
\\!\\(\\*StyleBox[\\\"levelspec\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"Replace\\\", \\\"[\\\", StyleBox[\\\"rules\\\", \
\\\"TI\\\"], \\\"]\\\"}]\\) represents an operator form of Replace that can \
be applied to an expression.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> 
      "\!\(\*RowBox[{\"Replace\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \
\",\", StyleBox[\"rules\", \"TI\"]}], \"]\"}]\) applies a rule or list of \
rules in an attempt to transform the entire expression \
\!\(\*StyleBox[\"expr\", \"TI\"]\). \n\!\(\*RowBox[{\"Replace\", \"[\", \
RowBox[{StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"rules\", \"TI\"], \
\",\", StyleBox[\"levelspec\", \"TI\"]}], \"]\"}]\) applies rules to parts of \
\!\(\*StyleBox[\"expr\", \"TI\"]\) specified by \!\(\*StyleBox[\"levelspec\", \
\"TI\"]\). \n\!\(\*RowBox[{\"Replace\", \"[\", StyleBox[\"rules\", \"TI\"], \
\"]\"}]\) represents an operator form of Replace that can be applied to an \
expression.", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/Replace", "Web" -> 
        "http://reference.wolfram.com/language/ref/Replace.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> {Heads -> False}, 
      "Attributes" -> {Protected}, "FullName" -> "System`Replace"|>, True]], 
   ",", 
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceAll",
                ButtonNote->"paclet:ref/ReplaceAll"],
               "\"paclet:ref/ReplaceAll\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\"/.\\\", StyleBox[\\\"rules\\\", \\\"TI\\\"]}]\\) or \
\\!\\(\\*RowBox[{\\\"ReplaceAll\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) applies a rule or list \
of rules in an attempt to transform each subpart of an expression \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"ReplaceAll\\\", \\\"[\\\", StyleBox[\\\"rules\\\", \\\
\"TI\\\"], \\\"]\\\"}]\\) represents an operator form of ReplaceAll that can \
be applied to an expression.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/ReplaceAll", 
                    "paclet:ref/ReplaceAll", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/ReplaceAll.\
html"], None}, "http://reference.wolfram.com/language/ref/ReplaceAll.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", "Protected", "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`ReplaceAll\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceAll",
                ButtonNote->"paclet:ref/ReplaceAll"],
               "\"paclet:ref/ReplaceAll\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\"/.\\\", StyleBox[\\\"rules\\\", \\\"TI\\\"]}]\\) or \
\\!\\(\\*RowBox[{\\\"ReplaceAll\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) applies a rule or list \
of rules in an attempt to transform each subpart of an expression \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"ReplaceAll\\\", \\\"[\\\", StyleBox[\\\"rules\\\", \\\
\"TI\\\"], \\\"]\\\"}]\\) represents an operator form of ReplaceAll that can \
be applied to an expression.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> 
      "\!\(\*RowBox[{StyleBox[\"expr\", \"TI\"], \"/.\", StyleBox[\"rules\", \
\"TI\"]}]\) or \!\(\*RowBox[{\"ReplaceAll\", \"[\", \
RowBox[{StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"rules\", \"TI\"]}], \"]\
\"}]\) applies a rule or list of rules in an attempt to transform each \
subpart of an expression \!\(\*StyleBox[\"expr\", \"TI\"]\). \n\!\(\*RowBox[{\
\"ReplaceAll\", \"[\", StyleBox[\"rules\", \"TI\"], \"]\"}]\) represents an \
operator form of ReplaceAll that can be applied to an expression.", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/ReplaceAll", "Web" -> 
        "http://reference.wolfram.com/language/ref/ReplaceAll.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
      "FullName" -> "System`ReplaceAll"|>, True]], ",", 
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceAt",
                ButtonNote->"paclet:ref/ReplaceAt"],
               "\"paclet:ref/ReplaceAt\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplaceAt\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) transforms \\!\\(\\*StyleBox[\\\"expr\\\", \
\\\"TI\\\"]\\) by replacing the \\!\\(\\*SuperscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], \\\"th\\\"]\\) element using \\!\\(\\*StyleBox[\\\"rules\\\", \\\
\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"ReplaceAt\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"j\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \
\\\"}\\\"}]}], \\\"]\\\"}]\\) replaces the part of \\!\\(\\*StyleBox[\\\"expr\
\\\", \\\"TI\\\"]\\) at position \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"j\\\", \
\\\"TI\\\"], \\\",\\\", \\\"\[Ellipsis]\\\"}], \
\\\"}\\\"}]\\).\\n\\!\\(\\*RowBox[{\\\"ReplaceAt\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\
\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\
\"}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]}], \
\\\"]\\\"}]\\) replaces parts at several \
positions.\\n\\!\\(\\*RowBox[{\\\"ReplaceAt\\\", \\\"[\\\", RowBox[{StyleBox[\
\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"pos\\\", \\\"TI\\\"]}], \
\\\"]\\\"}]\\) represents an operator form of ReplaceAt that can be applied \
to an expression.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/ReplaceAt", 
                    "paclet:ref/ReplaceAt", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/ReplaceAt.\
html"], None}, "http://reference.wolfram.com/language/ref/ReplaceAt.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", 
                    RowBox[{"Protected", ",", "ReadProtected"}], "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`ReplaceAt\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceAt",
                ButtonNote->"paclet:ref/ReplaceAt"],
               "\"paclet:ref/ReplaceAt\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplaceAt\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) transforms \\!\\(\\*StyleBox[\\\"expr\\\", \
\\\"TI\\\"]\\) by replacing the \\!\\(\\*SuperscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], \\\"th\\\"]\\) element using \\!\\(\\*StyleBox[\\\"rules\\\", \\\
\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"ReplaceAt\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"j\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \
\\\"}\\\"}]}], \\\"]\\\"}]\\) replaces the part of \\!\\(\\*StyleBox[\\\"expr\
\\\", \\\"TI\\\"]\\) at position \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"j\\\", \
\\\"TI\\\"], \\\",\\\", \\\"\[Ellipsis]\\\"}], \
\\\"}\\\"}]\\).\\n\\!\\(\\*RowBox[{\\\"ReplaceAt\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\
\"}], \\\",\\\", RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\
\"}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]}], \
\\\"]\\\"}]\\) replaces parts at several \
positions.\\n\\!\\(\\*RowBox[{\\\"ReplaceAt\\\", \\\"[\\\", RowBox[{StyleBox[\
\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"pos\\\", \\\"TI\\\"]}], \
\\\"]\\\"}]\\) represents an operator form of ReplaceAt that can be applied \
to an expression.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> 
      "\!\(\*RowBox[{\"ReplaceAt\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"], \",\", StyleBox[\"rules\", \"TI\"], \",\", StyleBox[\"n\", \
\"TI\"]}], \"]\"}]\) transforms \!\(\*StyleBox[\"expr\", \"TI\"]\) by \
replacing the \!\(\*SuperscriptBox[StyleBox[\"n\", \"TI\"], \"th\"]\) element \
using \!\(\*StyleBox[\"rules\", \"TI\"]\).\n\!\(\*RowBox[{\"ReplaceAt\", \
\"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"rules\", \
\"TI\"], \",\", RowBox[{\"{\", RowBox[{StyleBox[\"i\", \"TI\"], \",\", \
StyleBox[\"j\", \"TI\"], \",\", StyleBox[\"\[Ellipsis]\", \"TR\"]}], \
\"}\"}]}], \"]\"}]\) replaces the part of \!\(\*StyleBox[\"expr\", \"TI\"]\) \
at position \!\(\*RowBox[{\"{\", RowBox[{StyleBox[\"i\", \"TI\"], \",\", \
StyleBox[\"j\", \"TI\"], \",\", \"\[Ellipsis]\"}], \"}\"}]\).\n\!\(\*RowBox[{\
\"ReplaceAt\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \",\", \
StyleBox[\"rules\", \"TI\"], \",\", RowBox[{\"{\", RowBox[{RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"i\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"j\", \"TI\"], StyleBox[\"1\", \"TR\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}], \",\", RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"i\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"j\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]}], \"]\"}]\) replaces parts at \
several positions.\n\!\(\*RowBox[{\"ReplaceAt\", \"[\", \
RowBox[{StyleBox[\"rules\", \"TI\"], \",\", StyleBox[\"pos\", \"TI\"]}], \
\"]\"}]\) represents an operator form of ReplaceAt that can be applied to an \
expression.", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/ReplaceAt", "Web" -> 
        "http://reference.wolfram.com/language/ref/ReplaceAt.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> None, 
      "Attributes" -> {Protected, ReadProtected}, "FullName" -> 
      "System`ReplaceAt"|>, True]], ",", 
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceHeldPart",
                ButtonNote->"paclet:ref/ReplaceHeldPart"],
               "\"paclet:ref/ReplaceHeldPart\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"System`ReplaceHeldPart\"\>", 
               "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", 
                    "paclet:ref/ReplaceHeldPart", 
                    "paclet:ref/ReplaceHeldPart", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/\
ReplaceHeldPart.html"], None}, 
                    
                    "http://reference.wolfram.com/language/ref/\
ReplaceHeldPart.html", "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", "Protected", "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`ReplaceHeldPart\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceHeldPart",
                ButtonNote->"paclet:ref/ReplaceHeldPart"],
               "\"paclet:ref/ReplaceHeldPart\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"System`ReplaceHeldPart\"\>", 
               "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> "System`ReplaceHeldPart", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/ReplaceHeldPart", "Web" -> 
        "http://reference.wolfram.com/language/ref/ReplaceHeldPart.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
      "FullName" -> "System`ReplaceHeldPart"|>, True]], ",", 
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceImageValue",
                ButtonNote->"paclet:ref/ReplaceImageValue"],
               "\"paclet:ref/ReplaceImageValue\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplaceImageValue\\\", \\\"[\
\\\", RowBox[{StyleBox[\\\"image\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{StyleBox[\\\"pos\\\", \\\"TI\\\"], \\\"\[Rule]\\\", \
StyleBox[\\\"val\\\", \\\"TI\\\"]}]}], \\\"]\\\"}]\\) changes the pixel \
values at position \\!\\(\\*StyleBox[\\\"pos\\\", \\\"TI\\\"]\\) in \
\\!\\(\\*StyleBox[\\\"image\\\", \\\"TI\\\"]\\) to \
\\!\\(\\*StyleBox[\\\"val\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"ReplaceImageValue\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"image\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{StyleBox[\\\"pos\\\", \\\"TI\\\"], \\\"\[Rule]\\\", \
StyleBox[\\\"val\\\", \\\"TI\\\"]}], \\\",\\\", \
StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"type\\\\\\\",\\\\\\\"TI\\\
\\\\\"]\\\\)\\\\\\\"\\\", ShowStringCharacters->True]}], \\\"]\\\"}]\\) \
assumes \\!\\(\\*StyleBox[\\\"val\\\", \\\"TI\\\"]\\) to be of the specified \
type.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", 
                    "paclet:ref/ReplaceImageValue", 
                    "paclet:ref/ReplaceImageValue", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/\
ReplaceImageValue.html"], None}, 
                    "http://reference.wolfram.com/language/ref/\
ReplaceImageValue.html", "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", 
                    RowBox[{"Protected", ",", "ReadProtected"}], "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`ReplaceImageValue\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceImageValue",
                ButtonNote->"paclet:ref/ReplaceImageValue"],
               "\"paclet:ref/ReplaceImageValue\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplaceImageValue\\\", \\\"[\
\\\", RowBox[{StyleBox[\\\"image\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{StyleBox[\\\"pos\\\", \\\"TI\\\"], \\\"\[Rule]\\\", \
StyleBox[\\\"val\\\", \\\"TI\\\"]}]}], \\\"]\\\"}]\\) changes the pixel \
values at position \\!\\(\\*StyleBox[\\\"pos\\\", \\\"TI\\\"]\\) in \
\\!\\(\\*StyleBox[\\\"image\\\", \\\"TI\\\"]\\) to \
\\!\\(\\*StyleBox[\\\"val\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"ReplaceImageValue\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"image\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{StyleBox[\\\"pos\\\", \\\"TI\\\"], \\\"\[Rule]\\\", \
StyleBox[\\\"val\\\", \\\"TI\\\"]}], \\\",\\\", \
StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"type\\\\\\\",\\\\\\\"TI\\\
\\\\\"]\\\\)\\\\\\\"\\\", ShowStringCharacters->True]}], \\\"]\\\"}]\\) \
assumes \\!\\(\\*StyleBox[\\\"val\\\", \\\"TI\\\"]\\) to be of the specified \
type.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> 
      "\!\(\*RowBox[{\"ReplaceImageValue\", \"[\", \
RowBox[{StyleBox[\"image\", \"TI\"], \",\", RowBox[{StyleBox[\"pos\", \
\"TI\"], \"\[Rule]\", StyleBox[\"val\", \"TI\"]}]}], \"]\"}]\) changes the \
pixel values at position \!\(\*StyleBox[\"pos\", \"TI\"]\) in \!\(\*StyleBox[\
\"image\", \"TI\"]\) to \!\(\*StyleBox[\"val\", \"TI\"]\).\n\
\!\(\*RowBox[{\"ReplaceImageValue\", \"[\", RowBox[{StyleBox[\"image\", \
\"TI\"], \",\", RowBox[{StyleBox[\"pos\", \"TI\"], \"\[Rule]\", \
StyleBox[\"val\", \"TI\"]}], \",\", StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\"type\
\\\",\\\"TI\\\"]\\)\\\"\", ShowStringCharacters->True]}], \"]\"}]\) assumes \
\!\(\*StyleBox[\"val\", \"TI\"]\) to be of the specified type.", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/ReplaceImageValue", "Web" -> 
        "http://reference.wolfram.com/language/ref/ReplaceImageValue.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> None, 
      "Attributes" -> {Protected, ReadProtected}, "FullName" -> 
      "System`ReplaceImageValue"|>, True]], ",", 
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceList",
                ButtonNote->"paclet:ref/ReplaceList"],
               "\"paclet:ref/ReplaceList\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplaceList\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) attempts to transform \
the entire expression \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) by \
applying a rule or list of rules in all possible ways, and returns a list of \
the results obtained. \\n\\!\\(\\*RowBox[{\\\"ReplaceList\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) gives a list of at most \\!\\(\\*StyleBox[\\\"n\
\\\", \\\"TI\\\"]\\) results. \\n\\!\\(\\*RowBox[{\\\"ReplaceList\\\", \
\\\"[\\\", StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\"]\\\"}]\\) is an operator \
form of ReplaceList that can be applied to an expression.\"\>", 
               "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/ReplaceList", 
                    "paclet:ref/ReplaceList", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/ReplaceList.\
html"], None}, "http://reference.wolfram.com/language/ref/ReplaceList.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", "Protected", "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`ReplaceList\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceList",
                ButtonNote->"paclet:ref/ReplaceList"],
               "\"paclet:ref/ReplaceList\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplaceList\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"]}], \\\"]\\\"}]\\) attempts to transform \
the entire expression \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) by \
applying a rule or list of rules in all possible ways, and returns a list of \
the results obtained. \\n\\!\\(\\*RowBox[{\\\"ReplaceList\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]}], \\\"]\\\"}]\\) gives a list of at most \\!\\(\\*StyleBox[\\\"n\
\\\", \\\"TI\\\"]\\) results. \\n\\!\\(\\*RowBox[{\\\"ReplaceList\\\", \
\\\"[\\\", StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\"]\\\"}]\\) is an operator \
form of ReplaceList that can be applied to an expression.\"\>", 
               "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> 
      "\!\(\*RowBox[{\"ReplaceList\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"], \",\", StyleBox[\"rules\", \"TI\"]}], \"]\"}]\) attempts to \
transform the entire expression \!\(\*StyleBox[\"expr\", \"TI\"]\) by \
applying a rule or list of rules in all possible ways, and returns a list of \
the results obtained. \n\!\(\*RowBox[{\"ReplaceList\", \"[\", \
RowBox[{StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"rules\", \"TI\"], \
\",\", StyleBox[\"n\", \"TI\"]}], \"]\"}]\) gives a list of at most \
\!\(\*StyleBox[\"n\", \"TI\"]\) results. \n\!\(\*RowBox[{\"ReplaceList\", \"[\
\", StyleBox[\"rules\", \"TI\"], \"]\"}]\) is an operator form of ReplaceList \
that can be applied to an expression.", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/ReplaceList", "Web" -> 
        "http://reference.wolfram.com/language/ref/ReplaceList.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
      "FullName" -> "System`ReplaceList"|>, True]], ",", 
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplacePart",
                ButtonNote->"paclet:ref/ReplacePart"],
               "\"paclet:ref/ReplacePart\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{StyleBox[\\\"i\
\\\", \\\"TI\\\"], \\\"\[Rule]\\\", StyleBox[\\\"new\\\", \\\"TI\\\"]}]}], \\\
\"]\\\"}]\\) yields an expression in which the \
\\!\\(\\*StyleBox[RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\"\[Null]\\\"}]]\
\\)\\!\\(\\*SuperscriptBox[\\\"\[Null]\\\", \\\"th\\\"]\\) part of \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is replaced by \
\\!\\(\\*StyleBox[\\\"new\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\
\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]}], \\\",\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]]}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\
\\\"}]}], \\\"]\\\"}]\\) replaces parts at positions \
\\!\\(\\*SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\) by \\!\\(\\*SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\). \\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \
\\\",\\\", StyleBox[\\\"j\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}], \\\"\[Rule]\\\", \
StyleBox[\\\"new\\\", \\\"TI\\\"]}]}], \\\"]\\\"}]\\) replaces the part at \
position \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \
\\\",\\\", StyleBox[\\\"j\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]\\). \
\\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\
\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\
\"}], \\\"\[Rule]\\\", SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]]}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) replaces parts at positions \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\
\"], StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"j\
\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]\\) by \
\\!\\(\\*SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \
\\\"TI\\\"]]\\). \\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]}], \\\"}\\\"}], \\\"\[Rule]\\\", StyleBox[\\\"new\\\", \
\\\"TI\\\"]}]}], \\\"]\\\"}]\\) replaces all parts at positions \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\
\"], StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"j\
\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]\\) by \\!\\(\\*StyleBox[\\\"new\\\
\", \\\"TI\\\"]\\). \\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", \
StyleBox[RowBox[{\\\"i\\\", StyleBox[\\\"\[Rule]\\\", FontSlant -> \
\\\"Plain\\\"], \\\"new\\\"}], \\\"TI\\\"], \\\"]\\\"}]\\) represents an \
operator form of ReplacePart that can be applied to an expression.\"\>", 
               "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/ReplacePart", 
                    "paclet:ref/ReplacePart", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/ReplacePart.\
html"], None}, "http://reference.wolfram.com/language/ref/ReplacePart.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                    RowBox[{"Heads", "\[Rule]", "Automatic"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", "Protected", "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`ReplacePart\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplacePart",
                ButtonNote->"paclet:ref/ReplacePart"],
               "\"paclet:ref/ReplacePart\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", RowBox[{StyleBox[\\\"i\
\\\", \\\"TI\\\"], \\\"\[Rule]\\\", StyleBox[\\\"new\\\", \\\"TI\\\"]}]}], \\\
\"]\\\"}]\\) yields an expression in which the \
\\!\\(\\*StyleBox[RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \\\"\[Null]\\\"}]]\
\\)\\!\\(\\*SuperscriptBox[\\\"\[Null]\\\", \\\"th\\\"]\\) part of \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) is replaced by \
\\!\\(\\*StyleBox[\\\"new\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\
\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]}], \\\",\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]]}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\
\\\"}]}], \\\"]\\\"}]\\) replaces parts at positions \
\\!\\(\\*SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\) by \\!\\(\\*SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\). \\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \
\\\"[\\\", RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \
\\\",\\\", StyleBox[\\\"j\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}], \\\"\[Rule]\\\", \
StyleBox[\\\"new\\\", \\\"TI\\\"]}]}], \\\"]\\\"}]\\) replaces the part at \
position \\!\\(\\*RowBox[{\\\"{\\\", RowBox[{StyleBox[\\\"i\\\", \\\"TI\\\"], \
\\\",\\\", StyleBox[\\\"j\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]\\). \
\\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", RowBox[{StyleBox[\\\"expr\
\\\", \\\"TI\\\"], \\\",\\\", RowBox[{\\\"{\\\", \
RowBox[{RowBox[{RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\
\"}], \\\"\[Rule]\\\", SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]]}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]}], \\\"}\\\"}]}], \\\"]\\\"}]\\) replaces parts at positions \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\
\"], StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"j\
\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]\\) by \
\\!\\(\\*SubscriptBox[StyleBox[\\\"new\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \
\\\"TI\\\"]]\\). \\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"j\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]}], \\\"}\\\"}], \\\"\[Rule]\\\", StyleBox[\\\"new\\\", \
\\\"TI\\\"]}]}], \\\"]\\\"}]\\) replaces all parts at positions \
\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{SubscriptBox[StyleBox[\\\"i\\\", \\\"TI\\\
\"], StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"j\
\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\",\\\", StyleBox[\\\"\
\[Ellipsis]\\\", \\\"TR\\\"]}], \\\"}\\\"}]\\) by \\!\\(\\*StyleBox[\\\"new\\\
\", \\\"TI\\\"]\\). \\n\\!\\(\\*RowBox[{\\\"ReplacePart\\\", \\\"[\\\", \
StyleBox[RowBox[{\\\"i\\\", StyleBox[\\\"\[Rule]\\\", FontSlant -> \
\\\"Plain\\\"], \\\"new\\\"}], \\\"TI\\\"], \\\"]\\\"}]\\) represents an \
operator form of ReplacePart that can be applied to an expression.\"\>", 
               "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> 
      "\!\(\*RowBox[{\"ReplacePart\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"], \",\", RowBox[{StyleBox[\"i\", \"TI\"], \"\[Rule]\", \
StyleBox[\"new\", \"TI\"]}]}], \"]\"}]\) yields an expression in which the \!\
\(\*StyleBox[RowBox[{StyleBox[\"i\", \"TI\"], \
\"\[Null]\"}]]\)\!\(\*SuperscriptBox[\"\[Null]\", \"th\"]\) part of \
\!\(\*StyleBox[\"expr\", \"TI\"]\) is replaced by \!\(\*StyleBox[\"new\", \
\"TI\"]\). \n\!\(\*RowBox[{\"ReplacePart\", \"[\", RowBox[{StyleBox[\"expr\", \
\"TI\"], \",\", RowBox[{\"{\", RowBox[{RowBox[{SubscriptBox[StyleBox[\"i\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \"\[Rule]\", \
SubscriptBox[StyleBox[\"new\", \"TI\"], StyleBox[\"1\", \"TR\"]]}], \",\", \
RowBox[{SubscriptBox[StyleBox[\"i\", \"TI\"], StyleBox[\"2\", \"TR\"]], \"\
\[Rule]\", SubscriptBox[StyleBox[\"new\", \"TI\"], StyleBox[\"2\", \
\"TR\"]]}], \",\", StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]}], \"]\"}]\) \
replaces parts at positions \!\(\*SubscriptBox[StyleBox[\"i\", \"TI\"], \
StyleBox[\"n\", \"TI\"]]\) by \!\(\*SubscriptBox[StyleBox[\"new\", \"TI\"], \
StyleBox[\"n\", \"TI\"]]\). \n\!\(\*RowBox[{\"ReplacePart\", \"[\", \
RowBox[{StyleBox[\"expr\", \"TI\"], \",\", RowBox[{RowBox[{\"{\", \
RowBox[{StyleBox[\"i\", \"TI\"], \",\", StyleBox[\"j\", \"TI\"], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}], \"\[Rule]\", StyleBox[\"new\", \
\"TI\"]}]}], \"]\"}]\) replaces the part at position \!\(\*RowBox[{\"{\", \
RowBox[{StyleBox[\"i\", \"TI\"], \",\", StyleBox[\"j\", \"TI\"], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]\). \n\!\(\*RowBox[{\"ReplacePart\
\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \",\", RowBox[{\"{\", \
RowBox[{RowBox[{RowBox[{\"{\", RowBox[{SubscriptBox[StyleBox[\"i\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"j\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\[Ellipsis]\", \"TR\"]}], \
\"}\"}], \"\[Rule]\", SubscriptBox[StyleBox[\"new\", \"TI\"], StyleBox[\"1\", \
\"TR\"]]}], \",\", StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]}], \"]\"}]\) \
replaces parts at positions \!\(\*RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"i\", \"TI\"], StyleBox[\"n\", \"TI\"]], \
\",\", SubscriptBox[StyleBox[\"j\", \"TI\"], StyleBox[\"n\", \"TI\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]\) by \
\!\(\*SubscriptBox[StyleBox[\"new\", \"TI\"], StyleBox[\"n\", \"TI\"]]\). \n\
\!\(\*RowBox[{\"ReplacePart\", \"[\", RowBox[{StyleBox[\"expr\", \"TI\"], \",\
\", RowBox[{RowBox[{\"{\", RowBox[{RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"i\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"j\", \"TI\"], StyleBox[\"1\", \"TR\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}], \"\[Rule]\", StyleBox[\"new\", \
\"TI\"]}]}], \"]\"}]\) replaces all parts at positions \!\(\*RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"i\", \"TI\"], StyleBox[\"n\", \"TI\"]], \
\",\", SubscriptBox[StyleBox[\"j\", \"TI\"], StyleBox[\"n\", \"TI\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]\) by \!\(\*StyleBox[\"new\", \
\"TI\"]\). \n\!\(\*RowBox[{\"ReplacePart\", \"[\", StyleBox[RowBox[{\"i\", \
StyleBox[\"\[Rule]\", FontSlant -> \"Plain\"], \"new\"}], \"TI\"], \"]\"}]\) \
represents an operator form of ReplacePart that can be applied to an \
expression.", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/ReplacePart", "Web" -> 
        "http://reference.wolfram.com/language/ref/ReplacePart.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> {Heads -> Automatic}, 
      "Attributes" -> {Protected}, "FullName" -> "System`ReplacePart"|>, 
     True]], ",", 
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplacePixelValue",
                ButtonNote->"paclet:ref/ReplacePixelValue"],
               "\"paclet:ref/ReplacePixelValue\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplacePixelValue\\\", \\\"[\
\\\", RowBox[{StyleBox[\\\"image\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{StyleBox[\\\"ppos\\\", \\\"TI\\\"], \\\"\[Rule]\\\", StyleBox[\\\"val\
\\\", \\\"TI\\\"]}]}], \\\"]\\\"}]\\) changes the pixel values at pixel \
position \\!\\(\\*StyleBox[\\\"ppos\\\", \\\"TI\\\"]\\) in \\!\\(\\*StyleBox[\
\\\"image\\\", \\\"TI\\\"]\\) to \\!\\(\\*StyleBox[\\\"val\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"ReplacePixelValue\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"image\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{StyleBox[\\\"ppos\\\", \\\"TI\\\"], \\\"\[Rule]\\\", StyleBox[\\\"val\
\\\", \\\"TI\\\"]}], \\\",\\\", StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\
\\\\\\\"type\\\\\\\",\\\\\\\"TI\\\\\\\"]\\\\)\\\\\\\"\\\", \
ShowStringCharacters->True]}], \\\"]\\\"}]\\) assumes \
\\!\\(\\*StyleBox[\\\"val\\\", \\\"TI\\\"]\\) to be of the specified \
type.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", 
                    "paclet:ref/ReplacePixelValue", 
                    "paclet:ref/ReplacePixelValue", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/\
ReplacePixelValue.html"], None}, 
                    "http://reference.wolfram.com/language/ref/\
ReplacePixelValue.html", "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", 
                    RowBox[{"Protected", ",", "ReadProtected"}], "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`ReplacePixelValue\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplacePixelValue",
                ButtonNote->"paclet:ref/ReplacePixelValue"],
               "\"paclet:ref/ReplacePixelValue\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{\\\"ReplacePixelValue\\\", \\\"[\
\\\", RowBox[{StyleBox[\\\"image\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{StyleBox[\\\"ppos\\\", \\\"TI\\\"], \\\"\[Rule]\\\", StyleBox[\\\"val\
\\\", \\\"TI\\\"]}]}], \\\"]\\\"}]\\) changes the pixel values at pixel \
position \\!\\(\\*StyleBox[\\\"ppos\\\", \\\"TI\\\"]\\) in \\!\\(\\*StyleBox[\
\\\"image\\\", \\\"TI\\\"]\\) to \\!\\(\\*StyleBox[\\\"val\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[{\\\"ReplacePixelValue\\\", \\\"[\\\", \
RowBox[{StyleBox[\\\"image\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[{StyleBox[\\\"ppos\\\", \\\"TI\\\"], \\\"\[Rule]\\\", StyleBox[\\\"val\
\\\", \\\"TI\\\"]}], \\\",\\\", StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\
\\\\\\\"type\\\\\\\",\\\\\\\"TI\\\\\\\"]\\\\)\\\\\\\"\\\", \
ShowStringCharacters->True]}], \\\"]\\\"}]\\) assumes \
\\!\\(\\*StyleBox[\\\"val\\\", \\\"TI\\\"]\\) to be of the specified \
type.\"\>", "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> 
      "\!\(\*RowBox[{\"ReplacePixelValue\", \"[\", \
RowBox[{StyleBox[\"image\", \"TI\"], \",\", RowBox[{StyleBox[\"ppos\", \
\"TI\"], \"\[Rule]\", StyleBox[\"val\", \"TI\"]}]}], \"]\"}]\) changes the \
pixel values at pixel position \!\(\*StyleBox[\"ppos\", \"TI\"]\) in \
\!\(\*StyleBox[\"image\", \"TI\"]\) to \!\(\*StyleBox[\"val\", \"TI\"]\).\n\!\
\(\*RowBox[{\"ReplacePixelValue\", \"[\", RowBox[{StyleBox[\"image\", \
\"TI\"], \",\", RowBox[{StyleBox[\"ppos\", \"TI\"], \"\[Rule]\", \
StyleBox[\"val\", \"TI\"]}], \",\", StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\"type\
\\\",\\\"TI\\\"]\\)\\\"\", ShowStringCharacters->True]}], \"]\"}]\) assumes \
\!\(\*StyleBox[\"val\", \"TI\"]\) to be of the specified type.", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/ReplacePixelValue", "Web" -> 
        "http://reference.wolfram.com/language/ref/ReplacePixelValue.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> None, 
      "Attributes" -> {Protected, ReadProtected}, "FullName" -> 
      "System`ReplacePixelValue"|>, True]], ",", 
   InterpretationBox[
    StyleBox[
     FrameBox[
      DynamicModuleBox[{System`InformationDump`open$$ = True, 
       System`InformationDump`mouseOver$$ = False}, 
       PaneSelectorBox[{True->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False,
               BaseStyle -> None],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"],
                  ImageSizeCache->{13., {4., 9.}}], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"],
                  ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceRepeated",
                ButtonNote->"paclet:ref/ReplaceRepeated"],
               "\"paclet:ref/ReplaceRepeated\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\"//.\\\", StyleBox[\\\"rules\\\", \\\"TI\\\"]}]\\) repeatedly \
performs replacements until \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) no \
longer changes. \\n\\!\\(\\*RowBox[{\\\"ReplaceRepeated\\\", \\\"[\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\"]\\\"}]\\) represents an operator \
form of ReplaceRepeated that can be applied to an expression.\"\>", 
               "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            PaneBox[GridBox[{
               {
                
                DynamicModuleBox[{System`InformationDump`open$$ = {
                 False, False, False, False, False, False}}, 
                 StyleBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                    TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", 
                    "paclet:ref/ReplaceRepeated", 
                    "paclet:ref/ReplaceRepeated", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/\
ReplaceRepeated.html"], None}, 
                    "http://reference.wolfram.com/language/ref/\
ReplaceRepeated.html", "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                    RowBox[{"MaxIterations", "\[Rule]", "65536"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                    RowBox[{"{", "Protected", "}"}]},
                    {
                    TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`ReplaceRepeated\"\>"}
                   },
                   AutoDelete->False,
                   GridBoxAlignment->{"Columns" -> {Right, Left}},
                   GridBoxDividers->None,
                   GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                   GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                  StripOnInput->False],
                 DynamicModuleValues:>{}]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
              GridBoxSpacings->{"Columns" -> {
                  Offset[0.27999999999999997`], {
                   Offset[0.5599999999999999]}, 
                  Offset[0.27999999999999997`]}, "Rows" -> {
                  Offset[0.2], {
                   Offset[3.6]}, 
                  Offset[0.2]}}],
             FrameMargins->{{6, 6}, {6, 3}}], ""},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpener"],
                 ImageSizeCache->{10., {3., 7.}}], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "UpPointerOpenerHot"],
                 ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, False],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"], False->
        TagBox[GridBox[{
           {
            ItemBox[
             PaneBox[
              StyleBox["\<\" Symbol\"\>", "InformationTitleText",
               StripOnInput->False],
              FrameMargins->{{4, 0}, {-1, 1}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], 
            ItemBox[
             PaneBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIcon"]], True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                  CurrentValue["MouseOver"]]],
                Appearance->None,
                BaseStyle->"Link",
                ButtonData->"paclet:ref/ReplaceRepeated",
                ButtonNote->"paclet:ref/ReplaceRepeated"],
               "\"paclet:ref/ReplaceRepeated\""],
              FrameMargins->{{0, 4}, {0, 2}}],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             PaneBox[
              
              StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\"//.\\\", StyleBox[\\\"rules\\\", \\\"TI\\\"]}]\\) repeatedly \
performs replacements until \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) no \
longer changes. \\n\\!\\(\\*RowBox[{\\\"ReplaceRepeated\\\", \\\"[\\\", \
StyleBox[\\\"rules\\\", \\\"TI\\\"], \\\"]\\\"}]\\) represents an operator \
form of ReplaceRepeated that can be applied to an expression.\"\>", 
               "InformationUsageText",
               StripOnInput->False,
               LineSpacing->{1.5, 1.5, 3.}],
              FrameMargins->{{10, 10}, {8, 10}}],
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False], 
            ItemBox["\<\"\"\>",
             BaseStyle->"InformationUsageSubtitleBackground",
             StripOnInput->False]},
           {
            ItemBox[
             TagBox[
              ButtonBox[
               PaneSelectorBox[{False->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpener"]], True->
                
                DynamicBox[FEPrivate`FrontEndResource[
                 "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
                System`InformationDump`mouseOver$$]],
               Alignment->Left,
               Appearance->{"Default" -> None},
               
               ButtonFunction:>FEPrivate`Set[
                System`InformationDump`open$$, True],
               Evaluator->Automatic,
               FrameMargins->{{9, 0}, {0, 0}},
               ImageMargins->0,
               ImageSize->Full,
               Method->"Preemptive"],
              
              EventHandlerTag[{
               "MouseEntered" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
                "MouseExited" :> 
                FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
                Method -> "Preemptive", PassEventsDown -> Automatic, 
                PassEventsUp -> True}]],
             BaseStyle->"InformationTitleBackground",
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.8], 
            Thickness[Tiny]],
          GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
          
          GridBoxDividers->{
           "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
         "Grid"]}, Dynamic[System`InformationDump`open$$],
        BaselinePosition->Baseline,
        FrameMargins->0,
        ImageSize->Automatic],
       DynamicModuleValues:>{}],
      BaseStyle->"InformationGridFrame",
      StripOnInput->False], "InformationGridPlain",
     StripOnInput->False],
    InformationData[<|
     "ObjectType" -> "Symbol", "Usage" -> 
      "\!\(\*RowBox[{StyleBox[\"expr\", \"TI\"], \"//.\", StyleBox[\"rules\", \
\"TI\"]}]\) repeatedly performs replacements until \!\(\*StyleBox[\"expr\", \
\"TI\"]\) no longer changes. \n\!\(\*RowBox[{\"ReplaceRepeated\", \"[\", \
StyleBox[\"rules\", \"TI\"], \"]\"}]\) represents an operator form of \
ReplaceRepeated that can be applied to an expression.", 
      "Documentation" -> <|
       "Local" -> "paclet:ref/ReplaceRepeated", "Web" -> 
        "http://reference.wolfram.com/language/ref/ReplaceRepeated.html"|>, 
      "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
      "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
      "FormatValues" -> None, "Options" -> {MaxIterations -> 65536}, 
      "Attributes" -> {Protected}, "FullName" -> "System`ReplaceRepeated"|>, 
     True]]}], "}"}]], "Output",
 CellChangeTimes->{3.8777129289986267`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"1162be71-e6a6-476c-ab7b-994e84449ecf"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{
   RowBox[{"ConstantArray", "[", 
    RowBox[{"Null", ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "->", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"PadRight", "[", 
        RowBox[{"#", ",", "10", ",", "Null"}], "]"}], "&"}], "/@", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Characters", "[", "\"\<This is the first phrase.\>\"", "]"}],
         ",", 
        RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}], ")"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.87771297480196*^9, 3.877713086593319*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"4ac8fffc-8d15-4dbd-9a5e-018d559af677"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.87771299368073*^9, 3.877713015879667*^9}, {
  3.8777130594508867`*^9, 3.8777130869025884`*^9}},
 CellLabel->"Out[32]=",ExpressionUUID->"68aaf2c5-cb72-4be0-8209-bf614646c5d5"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], "->", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"PadRight", "[", 
      RowBox[{"#", ",", "10", ",", "Null"}], "]"}], "&"}], "/@", 
    RowBox[{"Partition", "[", 
     RowBox[{
      RowBox[{"Characters", "[", "\"\<This is the first phrase.\>\"", "]"}], 
      ",", 
      RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}], ")"}]}]], "Input",Expressio\
nUUID->"02d0062a-4324-47b2-8bed-5ae840285c7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"#1", "->", 
     RowBox[{"PadRight", "[", 
      RowBox[{"#2", ",", "10", ",", "Null"}], "]"}]}], "&"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", "3", "]"}], ",", 
     RowBox[{"Partition", "[", 
      RowBox[{
       RowBox[{"Characters", "[", "\"\<This is the first phrase.\>\"", "]"}], 
       ",", 
       RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877713136119194*^9, 3.8777131562333903`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"9910eadb-8df3-4277-bc09-2c6883d83bc8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", 
      ",", "\<\"s\"\>", ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", 
      ",", "\<\" \"\>", ",", "\<\"t\"\>", ",", "\<\"h\"\>"}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", 
      ",", "\<\"i\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
      ",", "\<\" \"\>", ",", "\<\"p\"\>", ",", "\<\"h\"\>"}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"s\"\>", 
      ",", "\<\"e\"\>", ",", "\<\".\"\>", ",", "Null", ",", "Null", ",", 
      "Null", ",", "Null", ",", "Null"}], "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.877713156654955*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"d30852d5-c21b-42e1-93f7-74fe0eae449e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystem", "=", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"Null", ",", 
    RowBox[{"{", 
     RowBox[{"10", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877713497213971*^9, 3.877713504639436*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"248b7250-6919-4c25-a795-d58a153622c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.877713505003905*^9},
 CellLabel->"Out[55]=",ExpressionUUID->"1e83ec49-c632-45a2-9409-d59fbd196c19"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"changedFileSystem", "=", 
  RowBox[{"ReplacePart", "[", 
   RowBox[{
    RowBox[{"ConstantArray", "[", 
     RowBox[{"Null", ",", 
      RowBox[{"{", 
       RowBox[{"10", ",", "10"}], "}"}]}], "]"}], ",", 
    RowBox[{"MapThread", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#1", "->", 
        RowBox[{"PadRight", "[", 
         RowBox[{"#2", ",", "10", ",", "Null"}], "]"}]}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "3", "]"}], ",", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{
          "Characters", "[", "\"\<This is the first phrase.\>\"", "]"}], ",", 
          RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.877713159859397*^9, 3.877713167811364*^9}, {
  3.877713218892687*^9, 3.87771322673147*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"cac80912-6747-4b40-9564-4e4f819c2f92"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"t\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>",
      ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", ",", "\<\" \"\>", 
     ",", "\<\"p\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>",
      ",", "\<\".\"\>", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.877713168153491*^9, 3.8777132271148643`*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"5786b728-19ff-4c93-842e-eec692a41b20"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileLocations", "=", 
  RowBox[{"<|", 
   RowBox[{"\"\<test1\>\"", "->", 
    RowBox[{"Range", "[", "3", "]"}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777131947568016`*^9, 3.8777132121685743`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"1cc180f1-f27d-4b5e-b9f9-7680d3c7e53d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"test1\"\>", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777132137610617`*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"8f5e98bd-0ca5-4d19-b6d6-378f30525727"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Extract", "[", 
  RowBox[{"changedFileSystem", ",", 
   RowBox[{"List", "/@", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877713231925584*^9, 3.8777132501778955`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"98adc039-0b54-4061-b8dc-67610418ffae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"t\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>",
      ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", ",", "\<\" \"\>", 
     ",", "\<\"p\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>",
      ",", "\<\".\"\>", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.877713246238999*^9, 3.8777132502992363`*^9}},
 CellLabel->"Out[38]=",ExpressionUUID->"279199ab-e97e-4f81-a257-91d77073810c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"writeFile", "[", 
   RowBox[{
    RowBox[{"fileName_", "?", "StringQ"}], ",", "data_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "partitions", "}"}], ",", 
    RowBox[{
     RowBox[{"partitions", "=", 
      RowBox[{"Ceiling", "[", 
       RowBox[{
        RowBox[{"StringLength", "[", "data", "]"}], "/", "10"}], "]"}]}], ";", 
     RowBox[{"ReplacePart", "[", 
      RowBox[{"FileSystem", ",", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", "->", 
           RowBox[{"PadRight", "[", 
            RowBox[{"#2", ",", "10", ",", "Null"}], "]"}]}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Range", "[", "partitions", "]"}], ",", 
           RowBox[{"Partition", "[", 
            RowBox[{
             RowBox[{"Characters", "[", "data", "]"}], ",", 
             RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}], "}"}]}], "]"}]}], 
      "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877713289715161*^9, 3.877713386871078*^9}, {
  3.8777134360359974`*^9, 3.8777134762159905`*^9}, {3.877713511398334*^9, 
  3.8777135196540794`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"451e6472-56b6-4a32-88f6-f110f335793f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"writeFile", "[", 
  RowBox[{"\"\<test1\>\"", ",", "\"\<This is the first phrase.\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877713364607465*^9, 3.8777133775889025`*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"0c1feb2b-3efe-45a3-bd0f-da08f8cb91d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"t\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "\<\" \"\>", ",", "\<\"f\"\>", ",", "\<\"i\"\>",
      ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", ",", "\<\" \"\>", 
     ",", "\<\"p\"\>", ",", "\<\"h\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "\<\"a\"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>",
      ",", "\<\".\"\>", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8777133684302697`*^9, 3.8777133891537747`*^9}, {
   3.87771343984788*^9, 3.8777134518965907`*^9}, 3.8777135215631137`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"cf25f329-b868-4508-9699-938eb1fce0ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"writeFile", "[", 
  RowBox[{
  "\"\<test1\>\"", ",", 
   "\"\<This is a very long sentence. This is another very long \
sentence.\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.877713364607465*^9, 3.8777133775889025`*^9}, {
  3.877713414742196*^9, 3.8777134610474052`*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"f93be924-f178-4ae9-90be-a64147f2445d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"a\"\>", ",", "\<\" \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"v\"\>", ",", "\<\"e\"\>", ",", "\<\"r\"\>", ",", "\<\"y\"\>",
      ",", "\<\" \"\>", ",", "\<\"l\"\>", ",", "\<\"o\"\>", ",", "\<\"n\"\>", 
     ",", "\<\"g\"\>", ",", "\<\" \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"s\"\>", ",", "\<\"e\"\>", ",", "\<\"n\"\>", ",", "\<\"t\"\>",
      ",", "\<\"e\"\>", ",", "\<\"n\"\>", ",", "\<\"c\"\>", ",", "\<\"e\"\>", 
     ",", "\<\".\"\>", ",", "\<\" \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"T\"\>", ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>",
      ",", "\<\" \"\>", ",", "\<\"i\"\>", ",", "\<\"s\"\>", ",", "\<\" \"\>", 
     ",", "\<\"a\"\>", ",", "\<\"n\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"o\"\>", ",", "\<\"t\"\>", ",", "\<\"h\"\>", ",", "\<\"e\"\>",
      ",", "\<\"r\"\>", ",", "\<\" \"\>", ",", "\<\"v\"\>", ",", "\<\"e\"\>", 
     ",", "\<\"r\"\>", ",", "\<\"y\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\" \"\>", ",", "\<\"l\"\>", ",", "\<\"o\"\>", ",", "\<\"n\"\>",
      ",", "\<\"g\"\>", ",", "\<\" \"\>", ",", "\<\"s\"\>", ",", "\<\"e\"\>", 
     ",", "\<\"n\"\>", ",", "\<\"t\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "\<\"n\"\>", ",", "\<\"c\"\>", ",", "\<\"e\"\>",
      ",", "\<\".\"\>", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.877713423305353*^9, 3.8777134647052345`*^9}, 
   3.8777135247155857`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"d9917839-f135-465a-8c56-4a1f68174705"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemPartitions", "=", 
  RowBox[{"Association", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "->", "Null"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877713598467989*^9, 3.8777136321503844`*^9}},
 CellLabel->
  "In[137]:=",ExpressionUUID->"f4874ce9-8fd0-4f76-9050-5dd79ef843ea"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "Null"}], ",", 
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877713632561551*^9, 3.877715061512412*^9},
 CellLabel->
  "Out[137]=",ExpressionUUID->"191e3fa9-1d27-43a2-bd4e-e78506d89fd9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{"FileSystemPartitions", ",", 
   RowBox[{"Association", "[", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"i", "->", "\"\<test1\>\""}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "3"}], "}"}]}], "]"}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877713642157195*^9, 3.8777136784622974`*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"7f2cec44-af7a-405f-aaa5-d5ebd7c2229d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877713675451111*^9, 3.8777136788697567`*^9}},
 CellLabel->"Out[61]=",ExpressionUUID->"7071baa7-0ceb-4f99-baad-bf6d5baa9688"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemPartitions", "=", 
  RowBox[{"Join", "[", 
   RowBox[{"FileSystemPartitions", ",", 
    RowBox[{"Association", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"i", "->", "\"\<test1\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "3"}], "}"}]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877713720261958*^9, 3.8777137231606593`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"2fa06803-f249-42a2-8903-d1463fddaa6d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777137234834356`*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"c157af1e-dca4-4d54-aae8-d74f885b1ca0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FirstPosition", "[", 
  RowBox[{"FileSystemPartitions", ",", "Null"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777137260620623`*^9, 3.8777137322548246`*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"e1e8c189-3bc3-4d5b-8149-7235a0cc419f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Key", "[", "4", "]"}], "}"}]], "Output",
 CellChangeTimes->{3.877713732498962*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"eae08009-854b-4d65-b624-579114fa3dd1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Position", "[", 
  RowBox[{"FileSystemPartitions", ",", "Null"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777137260620623`*^9, 3.8777137322548246`*^9}, {
  3.877713848383252*^9, 3.8777138514434743`*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"dfafaac9-d39d-43c3-8776-ecfa72edc5cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Key", "[", "6", "]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Key", "[", "7", "]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Key", "[", "8", "]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Key", "[", "9", "]"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"Key", "[", "10", "]"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8777138518091345`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"e036287d-76a5-473a-a288-904f63f41dff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "writeFile"}]], "Input",
 CellChangeTimes->{{3.877713803240323*^9, 3.87771380602932*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"b994d29f-13c9-4849-ab09-2f31c422bc8a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`writeFile\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"writeFile", "[", 
                    RowBox[{
                    RowBox[{"fileName_", "?", "StringQ"}], ",", "data_"}], 
                    "]"}], ":=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", "partitions", "}"}], ",", 
                    RowBox[{
                    RowBox[{"partitions", "=", 
                    RowBox[{"Ceiling", "[", 
                    FractionBox[
                    RowBox[{"StringLength", "[", "data", "]"}], "10"], 
                    "]"}]}], ";", 
                    RowBox[{"ReplacePart", "[", 
                    RowBox[{"FileSystem", ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{"PadRight", "[", 
                    RowBox[{"#2", ",", "10", ",", "Null"}], "]"}]}], "&"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Range", "[", "partitions", "]"}], ",", 
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"Characters", "[", "data", "]"}], ",", 
                    RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}], "}"}]}], 
                    "]"}]}], "]"}]}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`writeFile\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`writeFile\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Global`writeFile", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`writeFile, {$CellContext`writeFile[
         PatternTest[
          Pattern[$CellContext`fileName, 
           Blank[]], StringQ], 
         Pattern[$CellContext`data, 
          Blank[]]] :> 
       Block[{$CellContext`partitions}, $CellContext`partitions = 
          Ceiling[StringLength[$CellContext`data]/10]; 
         ReplacePart[$CellContext`FileSystem, 
           MapThread[# -> PadRight[#2, 10, Null]& , {
             Range[$CellContext`partitions], 
             Partition[
              Characters[$CellContext`data], 
              UpTo[10]]}]]]}], "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "Global`writeFile"|>, False]]], "Output",
 CellChangeTimes->{3.8777138065787206`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"c8c15337-f928-40cd-98ba-61e35d06f9c6"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"FileSystemData", "[", "]"}], ":=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<unallocated\>\"", "->", 
     RowBox[{"Position", "[", 
      RowBox[{"FileSystemPartitions", ",", "Null"}], "]"}]}], ",", 
    RowBox[{"\"\<allocated\>\"", "->", 
     RowBox[{
      RowBox[{"Cases", "[", 
       RowBox[{"{", "_Key", "}"}], "]"}], "@", 
      RowBox[{"Position", "[", 
       RowBox[{"FileSystemPartitions", ",", 
        RowBox[{"Except", "[", "Null", "]"}]}], "]"}]}]}]}], 
   "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777138198490114`*^9, 3.8777138915536566`*^9}, {
  3.8777139237060757`*^9, 3.877713997925342*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"f49a11b4-bc20-452b-8f80-6b2199f7cf53"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.877713893126379*^9, 3.8777138956654634`*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"c5934017-8f04-4b99-9dc9-9d467a3c167e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"unallocated\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "6", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "7", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "8", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "9", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "10", "]"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"allocated\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.877713895933997*^9, {3.877713943999427*^9, 3.87771396158733*^9}, 
   3.877713999180068*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"f9e930fa-349f-4588-bc53-869256b409fc"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"FirstPositionToInsert", "[", "]"}], ":=", 
  RowBox[{"First", "[", 
   RowBox[{"First", "[", 
    RowBox[{
     RowBox[{"FileSystemData", "[", "]"}], "[", "\"\<unallocated\>\"", "]"}], 
    "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777140065857143`*^9, 3.877714041615057*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"eb350525-f948-411d-9855-26b2cd3fe311"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FirstPositionToInsert", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8777140337168694`*^9, 3.8777140351899433`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"2148907a-9a89-437e-90d5-05c49cc8c52f"],

Cell[BoxData[
 RowBox[{"Key", "[", "4", "]"}]], "Output",
 CellChangeTimes->{{3.8777140354574556`*^9, 3.877714042630185*^9}},
 CellLabel->"Out[82]=",ExpressionUUID->"c5c573d0-798b-412c-b91c-8bdc359810bd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"writeFile", "[", 
  RowBox[{
  "\"\<file2\>\"", ",", "\"\<                                    \>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777140455067825`*^9, 3.877714056750792*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"468c2920-609b-49ac-9e31-754e28249f9c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>",
      ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", 
     ",", "\<\" \"\>", ",", "\<\" \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>",
      ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", 
     ",", "\<\" \"\>", ",", "\<\" \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>",
      ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", 
     ",", "\<\" \"\>", ",", "\<\" \"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "\<\" \"\>",
      ",", "\<\" \"\>", ",", "\<\" \"\>", ",", "Null", ",", "Null", ",", 
     "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
     ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8777140534803505`*^9, 3.8777140570204353`*^9}},
 CellLabel->"Out[84]=",ExpressionUUID->"15dca354-077c-4cd6-8319-7265ce27af02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemPartitions", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8777140602556562`*^9, 3.877714063220454*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"43cf3de1-84c8-4f95-b71b-1275b4b2c6a7"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777140635006275`*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"58ac9ea3-1b4d-4991-96c0-d296df93ca20"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemPartitions", "=", 
  RowBox[{"Join", "[", 
   RowBox[{"FileSystemPartitions", ",", 
    RowBox[{"Association", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"i", "->", "\"\<test1\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "10"}], "}"}]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877714155381442*^9, 3.87771416824205*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"606ff864-d876-4613-b93c-f16a8a1639ad"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"8", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"9", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"10", "\[Rule]", "\<\"test1\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777141558791924`*^9, 3.877714168510933*^9}},
 CellLabel->"Out[88]=",ExpressionUUID->"ef9596e8-4523-4dbc-8c34-565ae9c59e7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8777141582079706`*^9, 3.877714160120558*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"5c2be8c4-4f2a-4310-850e-6ba8a12c61af"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"unallocated\"\>", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"\<\"allocated\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "3", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "6", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "7", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "8", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "9", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "10", "]"}], "}"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877714160377383*^9, 3.87771416954239*^9}},
 CellLabel->"Out[89]=",ExpressionUUID->"d1ed2d8c-0b01-49d7-bc79-85e0bf2906f0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"writeFile", "[", 
   RowBox[{
    RowBox[{"fileName_", "?", "StringQ"}], ",", "data_"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{
       RowBox[{"FileSystemData", "[", "]"}], "[", "\"\<unallocated\>\"", 
       "]"}], "]"}], "\[Element]", 
     TemplateBox[{},
      "PositiveIntegers"]}], ",", 
    RowBox[{
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "partitions", "}"}], ",", 
       RowBox[{
        RowBox[{"partitions", "=", 
         RowBox[{"Ceiling", "[", 
          RowBox[{
           RowBox[{"StringLength", "[", "data", "]"}], "/", "10"}], "]"}]}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{"FileSystem", ",", 
          RowBox[{"MapThread", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#1", "->", 
              RowBox[{"PadRight", "[", 
               RowBox[{"#2", ",", "10", ",", "Null"}], "]"}]}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Range", "[", "partitions", "]"}], ",", 
              RowBox[{"Partition", "[", 
               RowBox[{
                RowBox[{"Characters", "[", "data", "]"}], ",", 
                RowBox[{"UpTo", "[", "10", "]"}]}], "]"}]}], "}"}]}], "]"}]}],
          "]"}]}]}], "]"}], ";", "fileName"}], ",", 
    RowBox[{
     RowBox[{"Length", "[", 
      RowBox[{
       RowBox[{"FileSystemData", "[", "]"}], "[", "\"\<unallocated\>\"", 
       "]"}], "]"}], "\[Element]", 
     TemplateBox[{},
      "NonPositiveIntegers"]}], ",", 
    RowBox[{"-", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777141782080336`*^9, 3.8777141788384037`*^9}, {
  3.8777142192333803`*^9, 3.877714317457768*^9}, {3.8777143671935225`*^9, 
  3.8777143803338375`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"1fdfcfaf-154d-465b-9521-8b9ca655b85a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"writeFile", "[", 
  RowBox[{"\"\<file\>\"", ",", "\"\<          \>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8777143188568945`*^9, 3.8777143274326982`*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"3cd56ef5-627d-4711-8683-d79b71dc5b84"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{
  3.877714327624197*^9, {3.8777143691923866`*^9, 3.877714382125004*^9}},
 CellLabel->"Out[96]=",ExpressionUUID->"f77aee0e-f56c-44bd-979b-0bc0dcfb5f24"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemPartitions", "=", 
  RowBox[{"Join", "[", 
   RowBox[{"FileSystemPartitions", ",", 
    RowBox[{"Association", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"i", "->", "Null"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "3"}], "}"}]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877714386009159*^9, 3.8777143981017637`*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"aec180a5-0db4-4b2e-8eed-e4aa1436d316"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "Null"}], ",", 
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"8", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"9", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"10", "\[Rule]", "\<\"test1\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777143864180317`*^9, 3.8777143987076445`*^9}},
 CellLabel->"Out[98]=",ExpressionUUID->"c2866f16-ce87-45f8-a277-27c7d75c460e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"writeFile", "[", 
  RowBox[{"\"\<file\>\"", ",", "\"\<          \>\""}], "]"}]], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"6b4f3cb3-f0cd-4431-96bb-324f8f1471ed"],

Cell[BoxData["\<\"file\"\>"], "Output",
 CellChangeTimes->{3.877714401747287*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"19fc56cc-9833-478e-8489-f68e79bee588"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<|", 
  RowBox[{
   RowBox[{"\"\<file\>\"", "->", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Name\>\"", "->", "\"\<file\>\""}], ",", 
      RowBox[{"\"\<readonly\>\"", "->", "True"}], ",", 
      RowBox[{"\"\<partions\>\"", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}]}], "|>"}]}], ",", 
   RowBox[{"\"\<file1\>\"", "->", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Name\>\"", "->", "\"\<file\>\""}], ",", 
      RowBox[{"\"\<readonly\>\"", "->", "False"}], ",", 
      RowBox[{"\"\<partitions\>\"", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "6", "]"}], "}"}]}], "}"}]}]}], "|>"}]}]}], 
  "|>"}]], "Input",
 CellChangeTimes->{{3.8777144365618577`*^9, 3.877714499845064*^9}, {
  3.877714696643541*^9, 3.877714696734209*^9}},
 CellLabel->
  "In[109]:=",ExpressionUUID->"b4f1139b-e76b-47ae-b517-f10d3fa55a92"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"file\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "True"}], ",", 
      RowBox[{"\<\"partions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"file1\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "False"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "6", "]"}], "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.87771447769858*^9, 3.8777145007796917`*^9}, 
   3.877714697094316*^9},
 CellLabel->
  "Out[109]=",ExpressionUUID->"97807501-7740-4174-addf-74da309d4f63"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemInformation", "=", 
  RowBox[{"<|", "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777145082749033`*^9, 3.87771451129205*^9}, {
  3.8777145589462004`*^9, 3.877714572899872*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"68997b53-c013-49e0-8747-0f12fa4413c5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777145739392166`*^9, 3.877714697905055*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"c1eaf81d-a534-4286-be4a-fc9cd40ccc1b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AppendTo", "[", 
  RowBox[{"FileSystemInformation", ",", 
   RowBox[{"\"\<file\>\"", "->", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Name\>\"", "->", "\"\<file\>\""}], ",", 
      RowBox[{"\"\<readonly\>\"", "->", "True"}], ",", 
      RowBox[{"\"\<partitions\>\"", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}]}], "|>"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877714575748826*^9, 3.8777145854575834`*^9}, {
  3.8777147040628633`*^9, 3.8777147042219925`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"b534d6d3-4daa-4fd1-9e4d-bae84bb8ef5e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"file\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
     RowBox[{"\<\"readonly\"\>", "\[Rule]", "True"}], ",", 
     RowBox[{"\<\"partitions\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}]}], 
    "\[RightAssociation]"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.877714585975253*^9, {3.8777146992643304`*^9, 3.8777147045722694`*^9}},
 CellLabel->
  "Out[113]=",ExpressionUUID->"e2c96bfe-4a9e-4113-8ca1-f27437a75b38"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemInformation"], "Input",
 CellChangeTimes->{{3.8777145884768343`*^9, 3.8777145964530416`*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"b65f1a61-c28b-4a7b-b124-f56b419331de"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"file\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
     RowBox[{"\<\"readonly\"\>", "\[Rule]", "True"}], ",", 
     RowBox[{"\<\"partitions\"\>", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}]}], 
    "\[RightAssociation]"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.8777145966903143`*^9, {3.8777147003620944`*^9, 3.8777147055430202`*^9}},
 CellLabel->
  "Out[114]=",ExpressionUUID->"12555599-28cd-4004-870c-78cae8e3b726"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AppendTo", "[", 
  RowBox[{"FileSystemInformation", ",", 
   RowBox[{"\"\<file1\>\"", "->", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Name\>\"", "->", "\"\<file\>\""}], ",", 
      RowBox[{"\"\<readonly\>\"", "->", "False"}], ",", 
      RowBox[{"\"\<partitions\>\"", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "6", "]"}], "}"}]}], "}"}]}]}], "|>"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777145976118546`*^9, 3.877714605811303*^9}, {
  3.877714688820141*^9, 3.8777146890955505`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"22380da0-f49f-47c5-81f1-737a44ac2b65"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"file\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "True"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"file1\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "False"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "6", "]"}], "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.877714606563239*^9, {3.8777146900177975`*^9, 3.877714706819358*^9}},
 CellLabel->
  "Out[115]=",ExpressionUUID->"39ba7f93-e1c6-4764-aa8e-88288b86f403"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemInformation"], "Input",
 CellChangeTimes->{{3.877714606914441*^9, 3.8777146094551535`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"911cfa96-4615-424b-886f-5b8bbd5d19e5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"file\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "True"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"\<\"file1\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "False"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Key", "[", "6", "]"}], "}"}]}], "}"}]}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.8777146096531363`*^9, {3.8777146912492733`*^9, 3.877714709068322*^9}},
 CellLabel->
  "Out[116]=",ExpressionUUID->"d40bcb59-6364-4af8-91bc-3ba02ead414a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemData", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8777147187667785`*^9, 3.8777147214325013`*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"d4c66b10-dcfd-48c4-a123-1d677a828dd7"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"unallocated\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Key", "[", "1", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "2", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "3", "]"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"allocated\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Key", "[", "4", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "5", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "6", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "7", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "8", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "9", "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Key", "[", "10", "]"}], "}"}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877714721830089*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"a68a7b1f-9807-4992-9b94-143f298880d7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FirstPositionToInsert", "[", "]"}]], "Input",
 CellChangeTimes->{{3.877714746992876*^9, 3.877714751614498*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"d58fa32c-9cf0-4d56-90ea-1c21a2cfde66"],

Cell[BoxData[
 RowBox[{"Key", "[", "1", "]"}]], "Output",
 CellChangeTimes->{3.8777147518831625`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"92868d68-3eeb-46fe-b176-c0c47adc7878"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemPartitions", "=", 
  RowBox[{"Join", "[", 
   RowBox[{"FileSystemPartitions", ",", 
    RowBox[{"Association", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"i", "->", "\"\<file\>\""}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1"}], "}"}]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777147686513796`*^9, 3.877714777762762*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"ff863852-8589-4e55-ae9e-9e3f8a719f08"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "\<\"file\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"8", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"9", "\[Rule]", "\<\"test1\"\>"}], ",", 
   RowBox[{"10", "\[Rule]", "\<\"test1\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777147736248417`*^9, 3.8777147780749416`*^9}},
 CellLabel->
  "Out[120]=",ExpressionUUID->"daf0c717-0193-44ab-9c70-6eb039514f3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FirstPositionToInsert", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8777147805019455`*^9, 3.877714782709937*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"9c9bb60a-9ed1-4336-b7bb-bedf1f67e665"],

Cell[BoxData[
 RowBox[{"Key", "[", "2", "]"}]], "Output",
 CellChangeTimes->{3.8777147829891477`*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"394fe547-0ead-4481-9055-68f66e503a68"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ModifyFileSystemInformation", "[", 
   RowBox[{
    RowBox[{"fileName_", "?", "StringQ"}], ",", 
    RowBox[{"readOnly_", "?", "BooleanQ"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"FileSystemInformation", ",", 
       RowBox[{"fileName", "->", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Name\>\"", "->", "fileName"}], ",", 
          RowBox[{"\"\<readonly\>\"", "->", "readOnly"}], ",", 
          RowBox[{"\"\<partitions\>\"", "->", 
           RowBox[{"{", 
            RowBox[{"FirstPositionToInsert", "[", "]"}], "}"}]}]}], 
         "|>"}]}]}], "]"}], ";", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"FileSystemPartitions", ",", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"FirstPositionToInsert", "[", "]"}], "]"}], "->", 
        "fileName"}]}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877714619741487*^9, 3.8777146850181866`*^9}, {
  3.8777147880964537`*^9, 3.877714792211274*^9}, {3.8777149600284243`*^9, 
  3.877715048113304*^9}},
 CellLabel->
  "In[135]:=",ExpressionUUID->"e2466de6-dca5-4944-92f3-e59910c4b9e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemInformation", "=", 
  RowBox[{"<|", "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777148050988765`*^9, 3.877714809675164*^9}},
 CellLabel->
  "In[124]:=",ExpressionUUID->"c2772c4b-c38d-4161-9f63-716e71fd2541"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777148102933025`*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"357666b8-4256-4191-9b1d-2be79e6a5feb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ModifyFileSystemInformation", "[", 
  RowBox[{"\"\<file\>\"", ",", "True"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777147934686966`*^9, 3.877714798806215*^9}},
 CellLabel->
  "In[138]:=",ExpressionUUID->"a2dd11d5-42f3-4a6a-99d3-4160fe6150d1"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"file\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877714799111355*^9, 3.877714811117838*^9}, {
  3.8777150042395234`*^9, 3.8777150659358788`*^9}},
 CellLabel->
  "Out[138]=",ExpressionUUID->"bb40d926-a2ba-4921-90b6-fdfa9cdeaba1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Key", "[", "2", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.877715030059881*^9, 3.8777150316803694`*^9}},
 CellLabel->
  "In[134]:=",ExpressionUUID->"0793a7cd-5df9-4c92-9e98-13a6326e08d7"],

Cell[BoxData["2"], "Output",
 CellChangeTimes->{3.8777150320142*^9},
 CellLabel->
  "Out[134]=",ExpressionUUID->"3bc8376a-8d1a-4e2c-be40-d20387725c2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemInformation"], "Input",
 CellChangeTimes->{{3.877714816346459*^9, 3.877714821172076*^9}},
 CellLabel->
  "In[139]:=",ExpressionUUID->"856fd9bd-0841-431a-83af-f8e67f7587e7"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"file1\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file1\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "False"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Key", "[", "2", "]"}], "}"}]}]}], "\[RightAssociation]"}]}], 
   ",", 
   RowBox[{"\<\"file\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "True"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Key", "[", "1", "]"}], "}"}]}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.87771482146143*^9, 3.877715074533185*^9},
 CellLabel->
  "Out[139]=",ExpressionUUID->"157f8ef1-028b-4721-8fd3-1b3a9e3df849"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ModifyFileSystemInformation", "[", 
  RowBox[{"\"\<file1\>\"", ",", "False"}], "]"}]], "Input",
 CellChangeTimes->{{3.877714823452593*^9, 3.877714828428252*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"bccaccce-0831-4467-919d-4af9d0f9a249"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"file\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"file1\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777148287700963`*^9, 3.8777150804530215`*^9},
 CellLabel->
  "Out[140]=",ExpressionUUID->"1be8f759-5dbb-44fe-b821-3cecf1a51b6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemInformation"], "Input",
 CellChangeTimes->{{3.877714829775317*^9, 3.8777148316622753`*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"919d38f2-c62e-4f09-9ca2-d4273f840fef"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"file\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "True"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Key", "[", "1", "]"}], "}"}]}]}], "\[RightAssociation]"}]}], 
   ",", 
   RowBox[{"\<\"file1\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"Name\"\>", "\[Rule]", "\<\"file1\"\>"}], ",", 
      RowBox[{"\<\"readonly\"\>", "\[Rule]", "False"}], ",", 
      RowBox[{"\<\"partitions\"\>", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"Key", "[", "2", "]"}], "}"}]}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.87771483216403*^9, 3.87771508511016*^9},
 CellLabel->
  "Out[141]=",ExpressionUUID->"4ed1b32d-4d8b-4f24-93b2-d87d72de7775"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemPartitions"], "Input",
 CellChangeTimes->{{3.877714924578538*^9, 3.877714927058118*^9}},
 CellLabel->
  "In[142]:=",ExpressionUUID->"76777af4-173c-4b6b-9515-a57ccb837eec"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"file\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"file1\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777149272884703`*^9, 3.877715094373251*^9},
 CellLabel->
  "Out[142]=",ExpressionUUID->"0dbb713d-0fa0-4b06-83bd-4fc181db614d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ModifyFileSystemInformation", "[", 
  RowBox[{"\"\<file2\>\"", ",", "True"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777150952906137`*^9, 3.8777151024150753`*^9}},
 CellLabel->
  "In[143]:=",ExpressionUUID->"24e68cbe-952a-489f-bfb7-658c67d3bf0e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"file\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"file1\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"file2\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777151026940203`*^9},
 CellLabel->
  "Out[143]=",ExpressionUUID->"900433f3-2753-4241-a112-6e43d2c909d5"]
}, Open  ]],

Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.8777152714249825`*^9, 3.8777152725532713`*^9}},
 CellLabel->
  "In[144]:=",ExpressionUUID->"aebdec10-c7c1-41ea-aff9-18a6a781fa7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemTable", "=", 
  RowBox[{"<|", "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777153050980196`*^9, 3.8777153106482763`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"93206583-ee8e-4ee0-8688-8a343ab4c597"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777153114151063`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"1d2a5cc5-f2c6-4043-a4b5-0d2ac7676610"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<|", 
  RowBox[{"1", "->", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<name\>\"", "->", "\"\<randomFileName\>\""}], ",", 
     RowBox[{"\"\<readOnly\>\"", "->", "True"}]}], "|>"}]}], "|>"}]], "Input",
 CellChangeTimes->{{3.8777153182503915`*^9, 3.877715352463646*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"383db9bd-1b20-4fb8-b94e-bf2d1c4d56c9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"1", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
     RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
    "\[RightAssociation]"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777153537795*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"fdb4f170-5be4-4a80-93bf-3fc84e6d7d57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{"i", "->", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<name\>\"", "->", "\"\<randomFileName\>\""}], ",", 
       RowBox[{"\"\<readOnly\>\"", "->", "True"}]}], "|>"}]}], "|>"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777153620164146`*^9, 3.877715368450831*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"5de371cf-03a4-4d51-8327-19035a7cb478"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"1", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"2", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"3", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"4", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"5", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"6", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"7", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"8", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"9", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{"10", "\[Rule]", 
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
       RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
      "\[RightAssociation]"}]}], "\[RightAssociation]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877715369343331*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"1ab0828e-4e34-40a1-9595-906bf3f1e179"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullFileSystemTable", "=", 
  RowBox[{"Association", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{"i", "->", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<name\>\"", "->", "\"\<randomFileName\>\""}], ",", 
         RowBox[{"\"\<readOnly\>\"", "->", "True"}]}], "|>"}]}], "|>"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.877715373942379*^9, 3.8777153864710903`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"88c7b576-ea9a-4f67-bb8a-ea68705154c6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"randomFileName\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}]}], 
     "\[RightAssociation]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777153867586913`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"c4524aac-61df-4e62-a410-d9922197dcdb"]
}, Open  ]],

Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.877715919751096*^9, 3.8777159201278176`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"87356ec3-4987-4f1d-8514-2511c3796ed4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileSystemTable", "=", 
  RowBox[{"<|", "|>"}]}]], "Input",
 CellChangeTimes->{{3.877715944060712*^9, 3.877715949786331*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"2288cf5d-267f-458b-9512-22728015bf78"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777159570736456`*^9, 3.8777159632901278`*^9}, {
   3.8777169338514814`*^9, 3.877716963773568*^9}, 3.8777172290949507`*^9},
 CellLabel->
  "Out[114]=",ExpressionUUID->"ee7c3b28-8fbd-4c63-af8d-b3dde12a9454"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"UnallocatedFileBlocks", "//", "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"UnallocatedFileBlocks", "[", "fileTable_", "]"}], ":=", 
  RowBox[{"Complement", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{"Values", "[", "fileTable", "]"}], "]"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.877715925019929*^9, 3.8777159763482776`*^9}, {
  3.877716023589201*^9, 3.87771604633808*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"00aa84b8-7043-487b-b753-a3fd3384beea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullFileSystemTableExample", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<evenfile\>\"", "->", 
     RowBox[{"Range", "[", 
      RowBox[{"2", ",", "10", ",", "2"}], "]"}]}], ",", 
    RowBox[{"\"\<oddfile\>\"", "->", 
     RowBox[{"Range", "[", 
      RowBox[{"1", ",", "10", ",", "2"}], "]"}]}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777159826425037`*^9, 3.8777160126387467`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"f8f2ab07-7f01-4c12-9623-735bdc1aa973"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"evenfile\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]}], ",", 
   RowBox[{"\<\"oddfile\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877716006937682*^9, 3.8777160129609146`*^9}},
 CellLabel->"Out[5]=",ExpressionUUID->"5161a821-c010-454f-bd09-b56f07ce06b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnallocatedFileBlocks", "[", "FullFileSystemTableExample", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777160641961513`*^9, 3.877716068508328*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"a6c7e4a0-a04e-4bff-a35d-06cd9b551a7a"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8777160687416353`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"78a8bcd0-0141-4d81-af24-e83a0df9ea3c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnallocatedFileBlocks", "[", "FileSystemTable", "]"}]], "Input",
 CellChangeTimes->{{3.877716071304915*^9, 3.8777160751356277`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"e1b960cc-d74a-4a75-abf2-6b824c6119a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.877716075558378*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"82989f8f-58f9-4e02-b2ed-51799d8b74c6"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"FileTableFullQ", "//", "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FileTableFullQ", "[", "fileTable_", "]"}], ":=", 
  RowBox[{
   RowBox[{"UnallocatedFileBlocks", "[", "fileTable", "]"}], "==", 
   RowBox[{"{", "}"}]}]}]}], "Input",
 CellChangeTimes->{{3.877716078806692*^9, 3.8777161058718815`*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"44aa17fe-9213-4c1a-ba2a-0d8b9d7bbd36"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileTableFullQ", "[", "FullFileSystemTableExample", "]"}]], "Input",
 CellChangeTimes->{{3.87771610753012*^9, 3.8777161113199015`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"5bdbe3d0-e1ee-4989-af57-dba8fe9c7dcb"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.877716111540288*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"1952b2f3-b025-4d60-a848-30a96b38e1d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileTableFullQ", "[", "FileSystemTable", "]"}]], "Input",
 CellChangeTimes->{{3.877716113713533*^9, 3.8777161185311217`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"3badf745-c8f0-48ee-aee8-86cae705ef85"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.877716119039014*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"2862dc00-1039-4624-a633-2ea9812e8bb5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NonEmptyFileSystemTableExample", "=", 
  RowBox[{"<|", 
   RowBox[{"\"\<fibonacci\>\"", "->", 
    RowBox[{"Fibonacci", "[", 
     RowBox[{"Range", "[", "6", "]"}], "]"}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777161235962653`*^9, 3.8777161462800746`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"f2a3bee6-0a95-43d0-bf6c-ac6367824bea"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"fibonacci\"\>", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8"}], "}"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777161425200863`*^9, 3.877716146659292*^9}},
 CellLabel->"Out[22]=",ExpressionUUID->"66f27a3b-f419-4a80-8218-b60847001fd7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnallocatedFileBlocks", "[", "NonEmptyFileSystemTableExample", 
  "]"}]], "Input",
 CellChangeTimes->{{3.877716253723343*^9, 3.877716255945405*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"43c1edd8-21dc-432a-81f5-b3880beb26f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "6", ",", "7", ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.8777162563228197`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"0c0124c6-db69-4622-ba0f-5dde5f407a60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileTableFullQ", "[", "NonEmptyFileSystemTableExample", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777162585432034`*^9, 3.877716268307994*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"1d1cc1c2-a07d-4b55-bb8a-996cee9d7d86"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.8777162685423393`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"a6f05d4f-a789-4451-84e3-6a69c93580cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AlmostFullFileTableExample", "=", 
  RowBox[{"<|", 
   RowBox[{"\"\<almostFull\>\"", "->", 
    RowBox[{"Most", "[", 
     RowBox[{"Range", "[", "10", "]"}], "]"}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777162993415346`*^9, 3.8777163146148586`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"726731cc-440e-42fb-9ee0-1c6e61ee13ad"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"almostFull\"\>", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9"}], "}"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777163152566037`*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"3c0fb4e3-849b-444d-9246-c9ef9d15279e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileTableFullQ", "[", "AlmostFullFileTableExample", "]"}]], "Input",
 CellChangeTimes->{{3.8777163162788467`*^9, 3.877716322652623*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"f4831194-9e35-400c-b7b3-3b72bd18af6d"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.877716322867803*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"d7f5a119-af01-46d8-a744-dba45de0928f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnallocatedFileBlocks", "[", "AlmostFullFileTableExample", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777163266506257`*^9, 3.877716330806677*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"f875da85-3922-4eea-9dd0-d7e93c699a34"],

Cell[BoxData[
 RowBox[{"{", "10", "}"}]], "Output",
 CellChangeTimes->{3.8777163310724683`*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"09416e69-43c8-4196-8458-3d927f56efac"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"deleteFile", "[", 
   RowBox[{"fileTable_", ",", 
    RowBox[{"fileName_", "?", "StringQ"}]}], "]"}], ":=", 
  RowBox[{"KeyDrop", "[", 
   RowBox[{"fileTable", ",", "fileName"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877716341822687*^9, 3.877716368597186*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"304d40e7-2c5a-42cf-9bd7-b0b8ef653767"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deleteFile", "[", 
  RowBox[{"FullFileSystemTableExample", ",", "\"\<evenfile\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777163696430693`*^9, 3.8777163934237924`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"934e5c63-7a18-488c-8072-8a441c87d339"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"oddfile\"\>", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777163898654222`*^9, 3.8777163937333355`*^9}},
 CellLabel->"Out[30]=",ExpressionUUID->"8a50991d-4267-4978-824e-c960bc7df3b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FileTableFullQ", "[", 
  RowBox[{"deleteFile", "[", 
   RowBox[{"FullFileSystemTableExample", ",", "\"\<evenfile\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877716397265232*^9, 3.8777164068152723`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"db348c65-126a-4d8b-9347-906ba719af38"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.8777164071403203`*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"ab23e3db-258b-47db-8327-95f31dff79be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReadOnlyTable", "=", 
  RowBox[{"<|", "|>"}]}]], "Input",
 CellChangeTimes->{{3.87771642713725*^9, 3.8777164305738525`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"df86b887-f248-461a-8c65-85895d6c9885"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777164309746227`*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"bf1b8665-5ede-44f8-90c4-7ae8351a66e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiskBlocks", "=", 
  RowBox[{"Association", "[", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "->", "Null"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777164603549643`*^9, 3.8777165082681637`*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"cf495fab-03d6-48d1-b353-5f55b01d5b28"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "Null"}], ",", 
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777164878971205`*^9, 3.877716508612815*^9}, {
   3.8777169149335413`*^9, 3.877716942904666*^9}, 3.8777172081711426`*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"bdac343e-f5ab-42ca-9946-be1fb98c2109"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"createFile", "//", "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"createFile", "[", 
   RowBox[{"fileName_", "?", "StringQ"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"FileTableFullQ", "[", "FileSystemTable", "]"}], ",", 
    RowBox[{"-", "1"}], ",", 
    RowBox[{"!", 
     RowBox[{"FileTableFullQ", "[", "FileSystemTable", "]"}]}], ",", 
    RowBox[{
     RowBox[{"AppendTo", "[", 
      RowBox[{"DiskBlocks", ",", 
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"UnallocatedFileBlocks", "[", "FileSystemTable", "]"}], 
         "]"}], "->", "fileName"}]}], "]"}], "\[IndentingNewLine]", ";", 
     RowBox[{"AppendTo", "[", 
      RowBox[{"FileSystemTable", ",", 
       RowBox[{"fileName", "->", 
        RowBox[{"First", "[", 
         RowBox[{"UnallocatedFileBlocks", "[", "FileSystemTable", "]"}], 
         "]"}]}]}], "]"}], ";", "fileName"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8777165139816875`*^9, 3.8777165559330196`*^9}, {
  3.8777165899198017`*^9, 3.8777166540289154`*^9}, {3.877716691856772*^9, 
  3.87771670217838*^9}, {3.8777167343931513`*^9, 3.8777167584108243`*^9}, {
  3.877716789274401*^9, 3.877716886791456*^9}, {3.877717139877013*^9, 
  3.877717140681715*^9}, {3.877717195969242*^9, 3.877717199168069*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"191c05d6-0635-4993-afb2-5a7ad4a4f772"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.877716947172164*^9, 3.8777169514700565`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"8f9e7218-5b7a-45f6-9f41-6a68d213a33d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "Null"}], ",", 
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877716951737897*^9, 3.8777169677301235`*^9}},
 CellLabel->"Out[73]=",ExpressionUUID->"00dde279-2e46-452f-8066-6997d437d9ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.877716954095485*^9, 3.877716956088149*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"0f9cc351-e320-4074-9b8f-ed4938f9cacc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777169563348303`*^9, 3.877716970537788*^9}},
 CellLabel->"Out[74]=",ExpressionUUID->"0c7483b9-9e15-4dae-b41b-0dec8b588655"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<fibonnaci\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877716621542697*^9, 3.8777166673947153`*^9}, 
   3.877716893157432*^9},
 CellLabel->"In[75]:=",ExpressionUUID->"7024a335-4f52-4439-8b01-b675f006c04e"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.877716920056322*^9, 3.877716921747792*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"c6cde549-d789-4492-8acd-2c87e2d77422"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777169219665546`*^9, 3.8777169739076138`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"1f8a1844-2129-451a-a367-0092e98dc623"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.87771692301729*^9, 3.8777169239898243`*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"fa37d2c1-bd98-4a98-a13e-3e2e71ae068c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877716924221587*^9, 3.877716976360642*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"2a33f22e-0279-404b-bbef-2e0973de6c23"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<even\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8777164902034674`*^9, 3.8777164912441072`*^9}, {
   3.8777167655075235`*^9, 3.877716773748411*^9}, 3.877716897174616*^9},
 CellLabel->"In[78]:=",ExpressionUUID->"668f86f6-ac1f-4e26-ad62-87fe32e6e6e2"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.877716851133135*^9, 3.877716853330179*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"83298e73-65e8-4cbc-9660-d730cea2aba8"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877716853539507*^9, 3.877716898608857*^9, 
  3.8777169807386637`*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"51f21f55-b6f9-4bfa-a285-224ac63ef6db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.8777168589691763`*^9, 3.877716860463442*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"5bf7f003-2077-4118-b7e7-0dac24b243a1"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877716860738858*^9, 3.8777169018683615`*^9, 
  3.877716982879388*^9},
 CellLabel->"Out[80]=",ExpressionUUID->"2d5f0478-9c14-4817-800a-fc7445f1bebd"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<three\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8777169932201366`*^9, 3.8777169973114333`*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"a2ad5ab3-1272-41eb-a6f5-6d6cc1b13dff"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777170052889385`*^9, 3.877717006237089*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"c603bd36-d500-47a5-ad47-2d9a42dd23ae"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"three\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877717006460703*^9},
 CellLabel->"Out[83]=",ExpressionUUID->"f0a6643c-9708-4ca9-9c39-aabe4eccf095"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.877716999342695*^9, 3.8777170004557996`*^9}},
 CellLabel->"In[82]:=",ExpressionUUID->"d9133ae2-f2cc-4ea2-98fd-3c9722bf186a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", "3"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777170009671755`*^9},
 CellLabel->"Out[82]=",ExpressionUUID->"23a3d92b-7d23-45f2-93de-f993fa153f21"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<four\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8777170091761065`*^9, 3.877717011751799*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"3ffb7779-0a5c-4e69-b150-02f23cac4cd1"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.87771701323468*^9, 3.8777170145574703`*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"113db4b4-1a39-4090-b554-07cd863fa528"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"three\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"four\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777170147942953`*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"b6385d13-6aa1-4387-bbd0-35183b0b9009"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.8777170159425316`*^9, 3.877717017144915*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"b45e6ad6-1d5e-4960-8f7a-ba30d583d9f6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"four\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877717017416186*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"cf706bba-9bba-49a9-a7e3-0eb93c0d2d5c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<five\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8777170195667915`*^9, 3.877717021480338*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"56bacab0-8830-437c-946d-51686c9df979"],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.877717024296667*^9, 3.8777170253790045`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"425f214d-f866-48d3-9e48-c6b7d2c11fbb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"four\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"five\"\>", "\[Rule]", "5"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777170257132864`*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"446e21e1-9037-4653-ac3d-5fb5d53ad126"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777170282234354`*^9, 3.8777170290842705`*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"6cc80b02-7ce4-44c3-9fba-0c2a8123affa"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"three\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"four\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"five\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877717029308782*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"3fb42b9a-fb41-4208-9759-8a1caecf3f82"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<six\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877717032155027*^9, 3.877717035616228*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"ddfff2ce-192b-4959-b0ad-9f46c0c8f378"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777170374866056`*^9, 3.877717038486107*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"747af95b-d10b-4a56-a4f7-692817d3406b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"three\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"four\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"five\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"six\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877717038717414*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"b5f688fe-8385-4622-b67a-c5088a181e29"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.877717040967779*^9, 3.8777170424103622`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"f3cd855c-cfba-4175-834c-77f1ebe4f52c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"four\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"five\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"six\"\>", "\[Rule]", "6"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777170428157454`*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"bdcf9d50-3970-4d98-99c5-b992613f406c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<seven\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8777170453184185`*^9, 3.8777170473358455`*^9}},
 CellLabel->"In[93]:=",ExpressionUUID->"55aaaef3-02c0-439d-b9e7-3f76f9d6b973"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777170491214848`*^9, 3.877717050011757*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"0d352358-7a4a-483b-9351-38478ed4228e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"three\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"four\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"five\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"six\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"seven\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777170502321997`*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"092b3efe-989c-4e0d-a7d7-7875e3def58d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.877717053014861*^9, 3.8777170541472034`*^9}},
 CellLabel->"In[95]:=",ExpressionUUID->"01e9f03b-71ac-4afe-ad9a-1514afed34da"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"four\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"five\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"six\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"seven\"\>", "\[Rule]", "7"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777170543888793`*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"53ba9615-26da-4482-ad6c-896e619ef478"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<eight\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.87771705739754*^9, 3.8777170591962996`*^9}},
 CellLabel->"In[96]:=",ExpressionUUID->"22aa2100-f601-4fcd-8681-a1a5862696f6"],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.877717060245998*^9, 3.8777170665570874`*^9}},
 CellLabel->"In[98]:=",ExpressionUUID->"fa08f588-4ead-49d9-8c7f-95ccacbc3508"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"four\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"five\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"six\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"seven\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"eight\"\>", "\[Rule]", "8"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.877717061450285*^9, 3.8777170667766533`*^9}},
 CellLabel->"Out[98]=",ExpressionUUID->"cc618ad0-d1e3-47e7-bf58-67fc1ddd3a10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777170678271084`*^9, 3.8777170689878454`*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"b406c5f3-5a7c-482b-96cb-d552323376d2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"three\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"four\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"five\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"six\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"seven\"\>"}], ",", 
   RowBox[{"8", "\[Rule]", "\<\"eight\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877717069197519*^9},
 CellLabel->"Out[99]=",ExpressionUUID->"7095f23c-fecb-4219-88b8-5749624a64d2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<nine\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877717083061493*^9, 3.8777170851095667`*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"839bf9c4-1c4e-4f5e-ab9c-d2d0b5941107"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777170881729507`*^9, 3.8777170891460247`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"4aff2923-322e-4d78-b450-7287f67c4ce5"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"three\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"four\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"five\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"six\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"seven\"\>"}], ",", 
   RowBox[{"8", "\[Rule]", "\<\"eight\"\>"}], ",", 
   RowBox[{"9", "\[Rule]", "\<\"nine\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777170893829556`*^9},
 CellLabel->
  "Out[101]=",ExpressionUUID->"bd87dd18-c934-42c7-97a6-49d3d6890d5f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.8777170912826214`*^9, 3.877717092390882*^9}},
 CellLabel->
  "In[102]:=",ExpressionUUID->"c93d387a-cc3f-4455-ae42-d251065239c6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"four\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"five\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"six\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"seven\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"eight\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"nine\"\>", "\[Rule]", "9"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777170926294966`*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"9e1c4484-f03d-4bc6-9106-1d7ad7758182"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<ten\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877717097390256*^9, 3.877717099369074*^9}},
 CellLabel->
  "In[103]:=",ExpressionUUID->"ee159f72-d3cf-47f7-85a5-ada8456ffe65"],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777171005148535`*^9, 3.877717101356542*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"84992d2e-a230-41ae-8da2-9069e4a3dd39"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "\<\"fibonnaci\"\>"}], ",", 
   RowBox[{"2", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"3", "\[Rule]", "\<\"three\"\>"}], ",", 
   RowBox[{"4", "\[Rule]", "\<\"four\"\>"}], ",", 
   RowBox[{"5", "\[Rule]", "\<\"five\"\>"}], ",", 
   RowBox[{"6", "\[Rule]", "\<\"six\"\>"}], ",", 
   RowBox[{"7", "\[Rule]", "\<\"seven\"\>"}], ",", 
   RowBox[{"8", "\[Rule]", "\<\"eight\"\>"}], ",", 
   RowBox[{"9", "\[Rule]", "\<\"nine\"\>"}], ",", 
   RowBox[{"10", "\[Rule]", "\<\"ten\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777171015864253`*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"a423fb05-65f7-49c7-b8ee-afdade1b1189"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.877717102692561*^9, 3.877717103919561*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"e70710ea-e0f9-4593-9e58-d88b8c6a5141"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fibonnaci\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"even\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"four\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"five\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"six\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"seven\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"eight\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"nine\"\>", "\[Rule]", "9"}], ",", 
   RowBox[{"\<\"ten\"\>", "\[Rule]", "10"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777171041404514`*^9},
 CellLabel->
  "Out[105]=",ExpressionUUID->"d43d86f0-b594-4233-b801-3cde6accb700"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"writeFile", "[", "\"\<eleven\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877717106240934*^9, 3.877717111460946*^9}},
 CellLabel->
  "In[106]:=",ExpressionUUID->"24701e19-4abf-413c-b648-5019e38c9ef6"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.8777171212827964`*^9},
 CellLabel->
  "Out[106]=",ExpressionUUID->"0066c913-8bde-4d63-b236-1bea4a62643a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777171222007475`*^9, 3.8777171231752462`*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"8239f5fa-7520-4a02-ad6f-bec1b914f1c8"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "Null"}], ",", 
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.87771712339034*^9, 3.877717248312955*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"588c9ace-696b-4d78-beb7-118ff05da636"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.877717128658877*^9, 3.877717129780414*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"8d0a576c-ea8c-40d5-950c-6b87e91fa1ed"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777171300051003`*^9, 3.8777172507367454`*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"1ad50f6d-1146-44b4-98f9-65d4720876e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", "\"\<one\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8777172545042677`*^9, 3.877717256353731*^9}},
 CellLabel->
  "In[117]:=",ExpressionUUID->"ae9d7daf-5bf7-461b-8827-cc4f3ab236c3"],

Cell[BoxData["\<\"one\"\>"], "Output",
 CellChangeTimes->{3.877717256666293*^9},
 CellLabel->
  "Out[117]=",ExpressionUUID->"90f57d0d-d4fb-4594-afe2-075ed6f24e25"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.877717257350399*^9, 3.8777172584296465`*^9}},
 CellLabel->
  "In[118]:=",ExpressionUUID->"43f23a8e-3210-4339-a64f-0fc19859f6d6"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"2", "\[Rule]", "Null"}], ",", 
   RowBox[{"3", "\[Rule]", "Null"}], ",", 
   RowBox[{"4", "\[Rule]", "Null"}], ",", 
   RowBox[{"5", "\[Rule]", "Null"}], ",", 
   RowBox[{"6", "\[Rule]", "Null"}], ",", 
   RowBox[{"7", "\[Rule]", "Null"}], ",", 
   RowBox[{"8", "\[Rule]", "Null"}], ",", 
   RowBox[{"9", "\[Rule]", "Null"}], ",", 
   RowBox[{"10", "\[Rule]", "Null"}], ",", 
   RowBox[{"1", "\[Rule]", "\<\"one\"\>"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777172586884875`*^9},
 CellLabel->
  "Out[118]=",ExpressionUUID->"13c3a43a-2199-42f7-95d6-c4652b0fdef1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FileSystemTable"], "Input",
 CellChangeTimes->{{3.87771726000174*^9, 3.8777172609824*^9}},
 CellLabel->
  "In[119]:=",ExpressionUUID->"4872a22b-31bd-4c2b-a860-bd5800b46f85"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"one\"\>", "\[Rule]", "1"}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777172612074933`*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"3ec93693-d3bc-4ccd-9afc-923f21327c92"]
}, Open  ]],

Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.877720706359533*^9, 3.877720706920538*^9}},
 CellLabel->
  "In[120]:=",ExpressionUUID->"69158c58-f85f-47d7-a5a7-fb8aa3d74f99"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Files", "=", 
  RowBox[{"<|", "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777207092045355`*^9, 3.8777207168880434`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"a52327aa-8f29-444b-92e9-8c57c10c89a9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877720731937371*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"f11d5b40-aeb4-451b-b8dc-7f58b24f439c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleFiles", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}]}]}], "|>"}]}]}], "|>"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8777208148810883`*^9, 3.877720862427083*^9}, {
  3.8777209166060934`*^9, 3.8777209194576693`*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"3de08d27-abbd-48ad-96ff-08bfb1fa607f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>, 
       "two" -> <|"name" -> "two", "readOnly" -> True, "blocks" -> {2, 3}|>|>,
      "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[2]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[2]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], "Path" -> {},
      "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     2, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["two", 
                  Style[
                  "two", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777208645697594`*^9, 3.877720919789366*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"af5844fd-bbec-4f29-be72-30d89b77f68a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExampleFiles", "[", 
  RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8777208689250317`*^9, 3.8777209762692957`*^9}, {
  3.877721031142982*^9, 3.8777210932800684`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"9fd471fe-0a0f-496f-8067-6bc2c260501b"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{1}, {2, 3}}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Vector[
        TypeSystem`Atom[Integer], TypeSystem`AnyLength], 2], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 2, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Vector[
        TypeSystem`Atom[Integer], TypeSystem`AnyLength], 2], "Path" -> {}, 
     "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     2, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{39., {32.63403328722343, 38.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{39., {32.63403328722343, 38.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.877720875020761*^9, 3.877720976609105*^9}, {
   3.8777210331492076`*^9, 3.877721060787469*^9}, 3.8777210935969343`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"e102d746-1586-4b91-a59a-cdb77b79897f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "@@", 
  RowBox[{"Union", "[", 
   RowBox[{"Normal", "@", 
    RowBox[{"ExampleFiles", "[", 
     RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777210977433567`*^9, 3.8777211037359715`*^9}, {
  3.877721136199833*^9, 3.8777211508089128`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"aad2f288-889f-42dd-9ea3-1ee6d54f54e3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",
 CellChangeTimes->{{3.8777210991601934`*^9, 3.8777211039348207`*^9}, 
   3.877721151031783*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"999afc69-4494-45d3-b62f-717ff4bc6458"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", 
   RowBox[{"Join", "@@", 
    RowBox[{"Union", "[", 
     RowBox[{"Normal", "@", 
      RowBox[{"ExampleFiles", "[", 
       RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}]}], "]"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777211654675713`*^9, 3.877721170067515*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"a0d2fb7c-d7ef-4d42-94d6-64747f41e7fe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8777211704031477`*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"2e11f327-253c-4ef2-834a-2236c037266a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Complement", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Join", "@@", 
     RowBox[{"Union", "[", 
      RowBox[{"Normal", "@", 
       RowBox[{"ExampleFiles", "[", 
        RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}]}], "]"}]}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777211752374067`*^9, 3.877721176108693*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"6d2d5629-90b8-417d-a343-498123a0d924"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.877721176469742*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"b4eec589-e1ae-4c5d-ba77-d98e651604a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiscontinuousExamples", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"1", ",", "4", ",", "6"}], "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}]}]}], "|>"}]}]}], "|>"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8777211822757483`*^9, 3.8777212036715264`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"cf8a1e3a-e9b3-4ddc-8b0e-7cb400d54025"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1, 4, 6}|>,
        "two" -> <|
        "name" -> "two", "readOnly" -> True, "blocks" -> {2, 3}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[4]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[4]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], "Path" -> {},
      "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     2, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1, 4, 6}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1, 4, 6}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["two", 
                  Style[
                  "two", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2, 3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2, 3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{198., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{198., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777212044411817`*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"9b3476e1-c549-443a-9c1d-91e967098ab8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DiscontinuousExamples", "[", 
     RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], "//",
    "Union"}], "//", 
  RowBox[{"Apply", "[", "Join", "]"}]}]], "Input",
 CellChangeTimes->{{3.8777212103479767`*^9, 3.8777212265932293`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"3b386005-9aff-447d-9e0f-c8489e522732"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "1", ",", "4", ",", "6"}], "}"}]], "Output",
 CellChangeTimes->{3.877721226921048*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"cc6612a2-994a-4182-bb55-839355510110"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"DiscontinuousExamples", "[", 
       RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], "//",
      "Union"}], "//", 
    RowBox[{"Apply", "[", "Join", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877721233238186*^9, 3.8777212443082924`*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"68835391-2e9e-4dcc-8bea-e50182604562"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.877721244768119*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"fc1514af-0ec7-4142-8f0d-df1f6c03ce32"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Complement", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"DiscontinuousExamples", "[", 
        RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], "//",
       "Union"}], "//", 
     RowBox[{"Apply", "[", "Join", "]"}]}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.877721246783268*^9, 3.8777212476450653`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"8f327439-90a5-4a12-823e-7d1d65545f7d"],

Cell[BoxData["5"], "Output",
 CellChangeTimes->{3.877721262473581*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"9db203a5-09e4-4add-a892-150201323158"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullExample", "=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"Rest", "@", 
          RowBox[{"Range", "[", "10", "]"}]}]}]}], "|>"}]}]}], "|>"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.877721256934486*^9, 3.8777212776673174`*^9}},
 CellLabel->"In[34]:=",ExpressionUUID->"f8ac615b-3175-43f2-94e1-ec35e2637348"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>, 
       "two" -> <|
        "name" -> "two", "readOnly" -> True, 
         "blocks" -> {2, 3, 4, 5, 6, 7, 8, 9, 10}|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[6]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[6]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], "Path" -> {},
      "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     2, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["two", 
                  Style[
                  "two", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8777212746081667`*^9, 3.8777212779894395`*^9}},
 CellLabel->"Out[34]=",ExpressionUUID->"2a001b23-ab14-4dea-9aac-17c583b8b044"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullExample", "[", 
  RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8777212841299195`*^9, 3.8777212920453424`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"be3b12a9-14f5-4dfe-87cd-77b4552e7f30"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {{1}, {2, 3, 4, 5, 6, 7, 8, 9, 10}}, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Vector[
        TypeSystem`Atom[Integer], TypeSystem`AnyLength], 2], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`UnknownShape[False]], 2, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Vector[
        TypeSystem`Atom[Integer], TypeSystem`AnyLength], 2], "Path" -> {}, 
     "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     2, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{1}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{2}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}], 
             BaseStyle -> {
               GrayLevel[0.5]}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{46., {32.63403328722343, 38.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{46., {32.63403328722343, 38.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877721293367965*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"3c6baaf6-1e9f-4b7d-a292-758f07e0406b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FullExample", "[", 
   RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", 
  "Normal"}]], "Input",
 CellChangeTimes->{{3.8777212841299195`*^9, 3.87772129601943*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"f4e979a7-259c-48d4-8108-8a67f9aa66d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9",
      ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877721296375945*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"ca4a6578-b967-4c06-8aac-3b1880e057c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"FullExample", "[", 
    RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], "//", 
  "Union"}]], "Input",
 CellChangeTimes->{{3.8777212841299195`*^9, 3.8777212988168497`*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"d47c5fd4-148d-4909-bcf5-b3085070d0fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9",
      ",", "10"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877721299559968*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"5d6c9fdf-d94d-4162-81b5-a7b87e89b000"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FullExample", "[", 
     RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], "//",
    "Union"}], "//", 
  RowBox[{"Apply", "[", "Join", "]"}]}]], "Input",
 CellChangeTimes->{{3.8777212841299195`*^9, 3.877721303293712*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"0f6b56ac-8327-4982-bd51-3e8bb7497cb0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.8777213035861764`*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"7d57b887-7846-4b61-bcf0-2a7349f9739c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Complement", "[", 
  RowBox[{
   RowBox[{"Range", "[", "10", "]"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"FullExample", "[", 
       RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], "//",
      "Union"}], "//", 
    RowBox[{"Apply", "[", "Join", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777213066388297`*^9, 3.877721321484027*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"ab5979d6-5635-45d7-9efd-ed335df850d0"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.8777213165660815`*^9, 3.877721322321635*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"e8eb1de3-23d8-45ba-86f8-dc3c985dac63"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"FullExample", "[", 
         RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], "//",
        "Union"}], "//", 
      RowBox[{"Apply", "[", "Join", "]"}]}]}], "]"}], ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777213247165613`*^9, 3.8777213266843596`*^9}},
 CellLabel->"In[41]:=",ExpressionUUID->"c3984bb5-bd48-4400-a683-45c5566ef26a"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{3.877721327038706*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"cb211ce2-33e7-4103-b357-f54bb97da7c7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"Complement", "[", 
   RowBox[{
    RowBox[{"Range", "[", "10", "]"}], ",", 
    RowBox[{"Join", "@@", 
     RowBox[{"Union", "[", 
      RowBox[{"Normal", "@", 
       RowBox[{"ExampleFiles", "[", 
        RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}]}], "]"}]}]}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777211752374067`*^9, 
  3.8777211788951836`*^9}},ExpressionUUID->"a54e7e21-a75a-4222-80da-\
e1ab0dd85a07"],

Cell[CellGroupData[{

Cell[BoxData["Files"], "Input",
 CellChangeTimes->{{3.8777213763634644`*^9, 3.8777213810320883`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"a2d8ef16-2f39-4810-b4be-12e96b581444"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777213812780514`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"f1989dbb-309b-419d-829f-4c98b7257c0e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Remove", "@", "AllocatedBlocks"}]], "Input",
 CellChangeTimes->{{3.8777217452286873`*^9, 3.8777217474921207`*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"a1077cab-21b4-4341-9b6c-2889f9a3dbb9"],

Cell[BoxData[{
 RowBox[{"AllocatedBlocks", "//", "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AllocatedBlocks", "[", "]"}], ":=", 
  RowBox[{
   RowBox[{"{", "}"}], "/;", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Length", "[", "Files", "]"}], "\[Element]", 
     TemplateBox[{},
      "NonPositiveIntegers"]}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AllocatedBlocks", "[", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"Join", "@@", 
     RowBox[{"Union", "[", 
      RowBox[{"Normal", "[", 
       RowBox[{"Lookup", "[", 
        RowBox[{"Files", ",", 
         RowBox[{"{", 
          RowBox[{"Values", ",", "\"\<blocks\>\""}], "}"}]}], "]"}], "]"}], 
      "]"}]}], ")"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "Files", "]"}], "\[Element]", 
    TemplateBox[{},
     "PositiveIntegers"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AllocatedBlocks", "[", "files_", "]"}], ":=", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"files", "[", 
        RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], "//",
       "Union"}], "//", 
     RowBox[{"Apply", "[", "Join", "]"}]}], ")"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "files", "]"}], "\[Element]", 
    TemplateBox[{},
     "PositiveIntegers"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AllocatedBlocks", "[", "files_", "]"}], ":=", 
  RowBox[{
   RowBox[{"{", "}"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "files", "]"}], "\[Element]", 
    TemplateBox[{},
     "NonPositiveIntegers"]}]}]}]}], "Input",
 CellChangeTimes->{{3.8777213427504654`*^9, 3.8777214271472425`*^9}, {
  3.877721464018789*^9, 3.8777214774137983`*^9}, {3.8777215157121115`*^9, 
  3.8777215468078585`*^9}, {3.877721580461053*^9, 3.8777216714172554`*^9}, {
  3.8777217665398626`*^9, 3.8777219269141245`*^9}, {3.877721978177021*^9, 
  3.87772199501614*^9}},
 CellLabel->
  "In[160]:=",ExpressionUUID->"3617c95b-9bf1-4605-97f5-4546ccda4129"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AllocatedBlocks", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8777214810261197`*^9, 3.87772148325379*^9}},
 CellLabel->
  "In[121]:=",ExpressionUUID->"c4944280-d9d4-44a5-b60a-c438f3de0730"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.877721483541661*^9, {3.8777215390081434`*^9, 3.8777215481218157`*^9}, {
   3.877721599909258*^9, 3.8777216090357895`*^9}, {3.87772164528475*^9, 
   3.8777216730920095`*^9}, {3.877721749318123*^9, 3.8777217985581465`*^9}, 
   3.8777218391999216`*^9},
 CellLabel->
  "Out[121]=",ExpressionUUID->"21559591-0030-4ad0-8f15-85c90405c24b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AllocatedBlocks", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"Rest", "@", 
          RowBox[{"Range", "[", "10", "]"}]}]}]}], "|>"}]}]}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877721674800726*^9, 3.877721719191276*^9}, {
  3.87772198584908*^9, 3.8777219871189737`*^9}},
 CellLabel->
  "In[165]:=",ExpressionUUID->"44f2a2c1-5746-47ad-8942-fd88d6251fbe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.8777216939384947`*^9, 3.877721719618125*^9}, {
   3.8777217505264254`*^9, 3.877721799544857*^9}, {3.877721872767909*^9, 
   3.877721897266288*^9}, 3.877721931737789*^9, {3.8777219809360714`*^9, 
   3.8777219971666527`*^9}},
 CellLabel->
  "Out[165]=",ExpressionUUID->"f081fc85-7144-40bd-94c3-8477482cbf5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AllocatedBlocks", "[", "]"}]], "Input",
 CellChangeTimes->{{3.877721674800726*^9, 3.877721719191276*^9}, {
  3.87772198584908*^9, 3.877722006091383*^9}},
 CellLabel->
  "In[166]:=",ExpressionUUID->"463eeb6c-a88b-45ae-8a83-3bbad5ab2461"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.87772200684803*^9},
 CellLabel->
  "Out[166]=",ExpressionUUID->"418fad4b-5b6a-4634-9ead-83d16b3bff3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AllocatedBlocks", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "2", "}"}]}]}], "|>"}]}]}], "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877721674800726*^9, 3.877721719191276*^9}, {
  3.87772198584908*^9, 3.877722017711446*^9}},
 CellLabel->
  "In[167]:=",ExpressionUUID->"7bac8117-9d75-47db-90e9-b8303a8635e3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.8777220180977645`*^9},
 CellLabel->
  "Out[167]=",ExpressionUUID->"d3b37d9e-7ffc-423c-9fbf-14b87f09600a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AllocatedBlocks", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"1", ",", "3", ",", "5", ",", "8"}], "}"}]}]}], "|>"}]}], 
     ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "2", "}"}]}]}], "|>"}]}]}], "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877721674800726*^9, 3.877721719191276*^9}, {
  3.87772198584908*^9, 3.8777220287727222`*^9}},
 CellLabel->
  "In[168]:=",ExpressionUUID->"f87e4e98-c6e5-41b4-b4f4-d3eec1629dff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "1", ",", "3", ",", "5", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{3.8777220293005733`*^9},
 CellLabel->
  "Out[168]=",ExpressionUUID->"db66c085-a43b-4b74-8b46-3d63ecca9917"]
}, Open  ]],

Cell[BoxData["SpaceToCreate"], "Input",
 CellChangeTimes->{{3.8777220525797625`*^9, 
  3.8777220550532317`*^9}},ExpressionUUID->"2d395011-d7a0-4fe6-b5c7-\
9df1cbc806e6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"CreateFile", "[", 
   RowBox[{
    RowBox[{"string_", "?", "StringQ"}], ",", 
    RowBox[{"readOnly_", "?", "BooleanQ"}]}], "]"}], ":=", 
  RowBox[{"AppendTo", "[", 
   RowBox[{"Files", ",", 
    RowBox[{"string", "->", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<name\>\"", "->", "string"}], ",", 
       RowBox[{"\"\<readOnly\>\"", "->", "readOnly"}], ",", 
       RowBox[{"\"\<blocks\>\"", "->", 
        RowBox[{"Take", "[", 
         RowBox[{"Complement", "[", "]"}], "]"}]}]}], "|>"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8777207201834106`*^9, 3.8777208141350327`*^9}, {
  3.877721337354618*^9, 
  3.877721340269595*^9}},ExpressionUUID->"a3526414-0f32-459d-bc6c-\
71580784fcba"],

Cell[BoxData[{
 RowBox[{"UnAllocatedBlocks", "//", "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"UnAllocatedBlocks", "[", "]"}], ":=", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{"AllocatedBlocks", "[", "]"}]}], "]"}], "/;", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Length", "[", "Files", "]"}], "\[Element]", 
     TemplateBox[{},
      "NonPositiveIntegers"]}], ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"UnAllocatedBlocks", "[", "]"}], ":=", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{"(", 
      RowBox[{"Join", "@@", 
       RowBox[{"Union", "[", 
        RowBox[{"Normal", "[", 
         RowBox[{"Lookup", "[", 
          RowBox[{"Files", ",", 
           RowBox[{"{", 
            RowBox[{"Values", ",", "\"\<blocks\>\""}], "}"}]}], "]"}], "]"}], 
        "]"}]}], ")"}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "Files", "]"}], "\[Element]", 
    TemplateBox[{},
     "PositiveIntegers"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"UnAllocatedBlocks", "[", "files_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"files", "[", 
          RowBox[{"Values", ",", "\"\<blocks\>\""}], "]"}], "//", "Normal"}], 
        "//", "Union"}], "//", 
       RowBox[{"Apply", "[", "Join", "]"}]}], ")"}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "files", "]"}], "\[Element]", 
    TemplateBox[{},
     "PositiveIntegers"]}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"UnAllocatedBlocks", "[", "files_", "]"}], ":=", 
  RowBox[{
   RowBox[{"Complement", "[", 
    RowBox[{
     RowBox[{"Range", "[", "10", "]"}], ",", 
     RowBox[{"{", "}"}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "files", "]"}], "\[Element]", 
    TemplateBox[{},
     "NonPositiveIntegers"]}]}]}]}], "Input",
 CellChangeTimes->{{3.8777220749175224`*^9, 3.877722174985175*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"9a9fc463-62c2-4a9e-89dc-4cbaef336553"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnAllocatedBlocks", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"Rest", "@", 
          RowBox[{"Range", "[", "10", "]"}]}]}]}], "|>"}]}]}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777220887058115`*^9, 3.877722098813215*^9}},
 CellLabel->
  "In[197]:=",ExpressionUUID->"643e1d9c-7d24-4125-8c81-dcf17df25834"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{
  3.877722100016616*^9, {3.8777221511215596`*^9, 3.877722176469591*^9}},
 CellLabel->
  "Out[197]=",ExpressionUUID->"16f3b3ec-b730-42a3-a716-f5929e1756fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnAllocatedBlocks", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}]}]}], "|>"}]}]}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777220887058115`*^9, 3.877722098813215*^9}, {
  3.8777221789294777`*^9, 3.877722185083672*^9}},
 CellLabel->
  "In[198]:=",ExpressionUUID->"8054d79c-9af3-4d5d-befd-bd112f20bdc6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.877722185368828*^9},
 CellLabel->
  "Out[198]=",ExpressionUUID->"e62026cc-176c-4c27-9f5e-da2e56f56d4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnAllocatedBlocks", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"1", ",", "7", ",", "9"}], "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}]}]}], "|>"}]}]}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777220887058115`*^9, 3.877722098813215*^9}, {
  3.8777221789294777`*^9, 3.877722191939231*^9}},
 CellLabel->
  "In[199]:=",ExpressionUUID->"aa4b0cb6-0330-4604-b7ca-104a82a47468"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6", ",", "8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.877722192229595*^9},
 CellLabel->
  "Out[199]=",ExpressionUUID->"48954a4c-d8d3-42fe-81b3-3fe6710eb800"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{"BlockSpaceAvailableQ", "//", "ClearAll"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"BlockSpaceAvailableQ", "[", "blocks_", "]"}], ":=", 
  RowBox[{
   RowBox[{"UnAllocatedBlocks", "[", "blocks", "]"}], "!=", 
   RowBox[{"{", "}"}]}]}]}], "Input",
 CellChangeTimes->{{3.877722200288652*^9, 3.87772222966148*^9}},
 CellLabel->
  "In[201]:=",ExpressionUUID->"2bf9c9f0-2df7-482d-b287-1a1f06229cf9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlockSpaceAvailableQ", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"Rest", "@", 
          RowBox[{"Range", "[", "10", "]"}]}]}]}], "|>"}]}]}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877722231049375*^9, 3.877722243271817*^9}},
 CellLabel->
  "In[203]:=",ExpressionUUID->"6c2e7508-73d2-4a13-bf8a-70693228ed45"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.877722243672862*^9},
 CellLabel->
  "Out[203]=",ExpressionUUID->"69aee187-9c8c-4689-8503-949a992b35d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlockSpaceAvailableQ", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"Rest", "@", 
          RowBox[{"Range", "[", "9", "]"}]}]}]}], "|>"}]}]}], "|>"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877722231049375*^9, 3.877722251744203*^9}},
 CellLabel->
  "In[204]:=",ExpressionUUID->"4234b534-82b5-4899-ba70-ccbe233e9523"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8777222520858274`*^9},
 CellLabel->
  "Out[204]=",ExpressionUUID->"7f55768a-ecd8-4b78-8040-003f1d3ef990"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlockSpaceAvailableQ", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{
          "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "9"}], 
          "}"}]}]}], "|>"}]}]}], "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877722231049375*^9, 3.8777222863294096`*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"b3a69823-0b15-42cc-bb78-04bdaa5a8496"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.877722287155408*^9},
 CellLabel->
  "Out[205]=",ExpressionUUID->"60b2d4a3-5193-406e-922d-5d9e29eac279"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AllocatedBlocks", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{
          "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "9"}], 
          "}"}]}]}], "|>"}]}]}], "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877722291360939*^9, 
  3.87772231038868*^9}},ExpressionUUID->"20fe3c46-8d01-4b11-a7dc-\
1e2e3a912a2c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "9"}],
   "}"}]], "Output",
 CellChangeTimes->{3.877722296991887*^9},
 CellLabel->
  "Out[206]=",ExpressionUUID->"08b9cee9-6e5e-43fd-bd18-ce6df48c4930"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnAllocatedBlocks", "[", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", 
          RowBox[{
          "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "9"}], 
          "}"}]}]}], "|>"}]}]}], "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877722298306557*^9, 3.8777223036558256`*^9}},
 CellLabel->
  "In[207]:=",ExpressionUUID->"1d90904f-11c0-4d67-b652-bc491b1645a5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{3.877722304275974*^9},
 CellLabel->
  "Out[207]=",ExpressionUUID->"5bf64cbb-491b-4e55-a2f4-aaa73516229a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Blocks", "=", 
  RowBox[{"<|", "|>"}]}]], "Input",
 CellChangeTimes->{{3.8777223590862875`*^9, 3.87772236221238*^9}},
 CellLabel->
  "In[208]:=",ExpressionUUID->"6277261e-5f6b-4437-98ff-0f0ba477488f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877722363222189*^9},
 CellLabel->
  "Out[208]=",ExpressionUUID->"686ca65e-84c8-4795-bbac-bdfacd9a0555"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnAllocatedBlocks", "[", "Blocks", "]"}]], "Input",
 CellChangeTimes->{{3.8777223651198196`*^9, 3.877722376208911*^9}},
 CellLabel->
  "In[210]:=",ExpressionUUID->"c9eb04d1-960d-4ef5-b9d1-d63222b8457c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellChangeTimes->{{3.877722369286167*^9, 3.8777223765895066`*^9}},
 CellLabel->
  "Out[210]=",ExpressionUUID->"effc8b08-6fc0-481c-b457-6ec18522ba8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AllocatedBlocks", "[", "Blocks", "]"}]], "Input",
 CellChangeTimes->{{3.8777223651198196`*^9, 3.8777223829287786`*^9}},
 CellLabel->
  "In[211]:=",ExpressionUUID->"4f8f5608-a2c6-4c08-8bf5-d3024dd85249"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8777223834741488`*^9},
 CellLabel->
  "Out[211]=",ExpressionUUID->"8eed6313-8e65-41de-ac42-24ddae397add"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BlockSpaceAvailableQ", "[", "Blocks", "]"}]], "Input",
 CellChangeTimes->{{3.877722386725587*^9, 3.877722402553075*^9}},
 CellLabel->
  "In[212]:=",ExpressionUUID->"6d479390-2a2d-44e8-ad4f-8d08806ddbb4"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8777224028407516`*^9},
 CellLabel->
  "Out[212]=",ExpressionUUID->"fb7ec02f-0203-45db-8a04-7b8988069ed3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CreateFile"}]], "Input",
 CellChangeTimes->{{3.8777224595536532`*^9, 3.877722468840861*^9}},
 CellLabel->
  "In[214]:=",ExpressionUUID->"1a47e391-e7a7-46d2-80bd-e89ffc82046a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"]], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/CreateFile",
              ButtonNote->"paclet:ref/CreateFile"],
             "\"paclet:ref/CreateFile\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"CreateFile\\\", \\\"[\\\", \
StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"file\\\\\\\",\\\\\\\"TI\\\
\\\\\"]\\\\)\\\\\\\"\\\", ShowStringCharacters->True], \\\"]\\\"}]\\) creates \
a file with name \\!\\(\\*StyleBox[\\\"file\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"CreateFile\\\", \\\"[\\\", \\\"]\\\"}]\\) creates a \
file in the default area for temporary files on your computer system.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                   TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/CreateFile", 
                    "paclet:ref/CreateFile", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL[
                    "http://reference.wolfram.com/language/ref/CreateFile.\
html"], None}, "http://reference.wolfram.com/language/ref/CreateFile.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "CreateIntermediateDirectories", "\[Rule]", "True"}], ",", 
                    RowBox[{"OverwriteTarget", "\[Rule]", "False"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"Listable", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`CreateFile\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/CreateFile",
              ButtonNote->"paclet:ref/CreateFile"],
             "\"paclet:ref/CreateFile\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{\\\"CreateFile\\\", \\\"[\\\", \
StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"file\\\\\\\",\\\\\\\"TI\\\
\\\\\"]\\\\)\\\\\\\"\\\", ShowStringCharacters->True], \\\"]\\\"}]\\) creates \
a file with name \\!\\(\\*StyleBox[\\\"file\\\", \\\"TI\\\"]\\). \
\\n\\!\\(\\*RowBox[{\\\"CreateFile\\\", \\\"[\\\", \\\"]\\\"}]\\) creates a \
file in the default area for temporary files on your computer system.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{\"CreateFile\", \"[\", StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\
\"file\\\",\\\"TI\\\"]\\)\\\"\", ShowStringCharacters->True], \"]\"}]\) \
creates a file with name \!\(\*StyleBox[\"file\", \"TI\"]\). \n\!\(\*RowBox[{\
\"CreateFile\", \"[\", \"]\"}]\) creates a file in the default area for \
temporary files on your computer system.", 
    "Documentation" -> <|
     "Local" -> "paclet:ref/CreateFile", "Web" -> 
      "http://reference.wolfram.com/language/ref/CreateFile.html"|>, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, 
    "Options" -> {
     CreateIntermediateDirectories -> True, OverwriteTarget -> False}, 
    "Attributes" -> {Listable, Protected}, "FullName" -> 
    "System`CreateFile"|>, False]]], "Output",
 CellChangeTimes->{3.877722469270513*^9},
 CellLabel->
  "Out[214]=",ExpressionUUID->"828cdac8-0fbc-4fe3-b1d4-0b80f4aa31ca"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"createFile", "[", 
   RowBox[{
    RowBox[{"string_", "?", "StringQ"}], ",", 
    RowBox[{"readOnly_", "?", "BooleanQ"}], ",", "blocks_"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}], ",", 
    RowBox[{"AppendTo", "[", 
     RowBox[{"Files", ",", 
      RowBox[{"string", "->", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<name\>\"", "->", "string"}], ",", 
         RowBox[{"\"\<readOnly\>\"", "->", "readOnly"}], ",", 
         RowBox[{"\"\<blocks\>\"", "->", 
          RowBox[{"Take", "[", 
           RowBox[{
            RowBox[{"UnAllocatedBlocks", "[", "blocks", "]"}], ",", "1"}], 
           "]"}]}]}], "|>"}]}]}], "]"}], ",", 
    RowBox[{"!", 
     RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}]}], ",", 
    RowBox[{"-", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877722314013468*^9, 3.8777223510527325`*^9}, {
  3.877722409880513*^9, 3.8777224982032948`*^9}},
 CellLabel->
  "In[215]:=",ExpressionUUID->"9cd23187-3bfe-4dbd-8ab8-c5e424a0ec3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<even\>\"", ",", "True", ",", "Blocks"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777224996852565`*^9, 3.877722510342575*^9}},
 CellLabel->
  "In[216]:=",ExpressionUUID->"53dcf7b1-3c9d-4fc8-9c9b-b9cb27edae61"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"even\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"even\"\>"}], ",", 
     RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}], ",", 
     RowBox[{"\<\"blocks\"\>", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777225106282797`*^9},
 CellLabel->
  "Out[216]=",ExpressionUUID->"62ce092e-cd5b-44c4-b9e3-c6b0bdbc1b02"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["Blocks"], "Input",
 CellChangeTimes->{{3.877722517251302*^9, 3.877722517906067*^9}},
 CellLabel->
  "In[217]:=",ExpressionUUID->"37fc2481-fa2b-4b2e-b98e-888ddea28f8c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877722518457388*^9},
 CellLabel->
  "Out[217]=",ExpressionUUID->"130d338a-566b-4549-ab6c-cfca9744d05a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["Files"], "Input",
 CellChangeTimes->{{3.8777225213333545`*^9, 3.8777225217724376`*^9}},
 CellLabel->
  "In[218]:=",ExpressionUUID->"048fbc97-157d-47e8-a677-949ccef95f22"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"even\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"even\"\>"}], ",", 
     RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}], ",", 
     RowBox[{"\<\"blocks\"\>", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777225220331044`*^9},
 CellLabel->
  "Out[218]=",ExpressionUUID->"980c30bb-fdda-4b97-a187-c6a8c270086f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<even\>\"", ",", "True", ",", 
   RowBox[{"<|", "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777225653798857`*^9, 3.8777225671967025`*^9}},
 CellLabel->
  "In[219]:=",ExpressionUUID->"0a92a96c-ffe4-4d7b-8e11-19f4f6ce2654"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"even\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"even\"\>"}], ",", 
     RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}], ",", 
     RowBox[{"\<\"blocks\"\>", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.877722567492558*^9},
 CellLabel->
  "Out[219]=",ExpressionUUID->"5fe697c7-f0fd-4330-ba08-97dc8b9d77c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["Files"], "Input",
 CellChangeTimes->{{3.877722570427842*^9, 3.877722570922777*^9}},
 CellLabel->
  "In[220]:=",ExpressionUUID->"432002db-2977-4f0d-bcb3-bb90e2c2070e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"even\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"even\"\>"}], ",", 
     RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}], ",", 
     RowBox[{"\<\"blocks\"\>", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777225712203183`*^9},
 CellLabel->
  "Out[220]=",ExpressionUUID->"d18b3982-23eb-4ece-8615-2aaed05dcc63"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiskBlocks", "=", 
  RowBox[{"Association", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "->", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"Null", ",", "10"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.877722573512791*^9, 3.8777226225160003`*^9}},
 CellLabel->
  "In[223]:=",ExpressionUUID->"9959c3b4-f717-483d-b2e6-ef79374aa246"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8777226098461742`*^9, 3.8777226227269845`*^9}},
 CellLabel->
  "Out[223]=",ExpressionUUID->"ec257c9b-a742-4f02-9f7b-fd582d461ada"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullFileTable", "=", 
  RowBox[{"Dataset", "@", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<one\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<one\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"{", "1", "}"}]}]}], "|>"}]}], ",", 
     RowBox[{"\"\<two\>\"", "->", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<name\>\"", "->", "\"\<two\>\""}], ",", 
        RowBox[{"\"\<readOnly\>\"", "->", "True"}], ",", 
        RowBox[{"\"\<blocks\>\"", "->", 
         RowBox[{"Rest", "@", 
          RowBox[{"Range", "[", "10", "]"}]}]}]}], "|>"}]}]}], 
    "|>"}]}]}]], "Input",
 CellChangeTimes->{{3.877722675567501*^9, 3.8777226789025965`*^9}},
 CellLabel->
  "In[224]:=",ExpressionUUID->"07ab6191-2728-4bfe-8874-e90b130b4a13"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>, 
       "two" -> <|
        "name" -> "two", "readOnly" -> True, 
         "blocks" -> {2, 3, 4, 5, 6, 7, 8, 9, 10}|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[7]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[7]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], "Path" -> {},
      "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     2, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["two", 
                  Style[
                  "two", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777226793748965`*^9},
 CellLabel->
  "Out[224]=",ExpressionUUID->"2f73d1c0-f867-4bde-bf9b-e1559c002293"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<even\>\"", ",", "True", ",", "FullFileTable"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777226327675734`*^9, 3.877722690831271*^9}},
 CellLabel->
  "In[226]:=",ExpressionUUID->"ff6ea5ba-2c4c-4220-b7ff-73a66989cb3d"],

Cell[BoxData[
 RowBox[{"-", "1"}]], "Output",
 CellChangeTimes->{{3.8777226847642527`*^9, 3.877722691125633*^9}},
 CellLabel->
  "Out[226]=",ExpressionUUID->"0908f868-bafb-439d-88fc-750deca5ec4a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<even\>\"", ",", "True", ",", 
   RowBox[{"<|", "|>"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777226327675734`*^9, 3.877722698563738*^9}},
 CellLabel->
  "In[227]:=",ExpressionUUID->"8ad103aa-5f55-4821-81ba-821481445d04"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"even\"\>", "\[Rule]", 
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"even\"\>"}], ",", 
     RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}], ",", 
     RowBox[{"\<\"blocks\"\>", "\[Rule]", 
      RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777226986425176`*^9},
 CellLabel->
  "Out[227]=",ExpressionUUID->"2c11f587-2864-4bb6-85e9-72c70791ac48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["DiskBlocks"], "Input",
 CellChangeTimes->{{3.8777227010767546`*^9, 3.8777227031417046`*^9}},
 CellLabel->
  "In[354]:=",ExpressionUUID->"e2d976da-8ad3-4a3c-9ad5-b74f93f436c4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777227033766427`*^9, 3.877724695773593*^9},
 CellLabel->
  "Out[354]=",ExpressionUUID->"b3d4c3d6-1ef9-4820-bb6c-6fa66411c6c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyDrop", "[", 
  RowBox[{"FullFileTable", ",", "\"\<one\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.877722757638242*^9, 3.8777227731797686`*^9}},
 CellLabel->
  "In[230]:=",ExpressionUUID->"be0cd953-6032-4132-8a3e-e6af7003d57e"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "two" -> <|
        "name" -> "two", "readOnly" -> True, 
         "blocks" -> {2, 3, 4, 5, 6, 7, 8, 9, 10}|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[10]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 9|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`Limited[
               TypeSystem`PackageScope`MulticolumnShape[1, 9, 9, 34], 9, 9, {
               All, "blocks", All}]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 9]}], 1], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[10]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 9|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`Limited[
               TypeSystem`PackageScope`MulticolumnShape[1, 9, 9, 34], 9, 9, {
               All, "blocks", All}]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 9]}], 1], "Path" -> {}, 
     "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["two", 
                  Style[
                  "two", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 1}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                GrayLevel[0.7490196078431373], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 2}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 3}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 4}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["6"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 5}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 6}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["8"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 7}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["9"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 8}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["10"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"], 9}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}, Frame -> {{
                Directive[
                 Dashing[{0, Small}], 
                 RGBColor[
                 0.5098039215686274, 0.5098039215686274, 0.5098039215686274]], 
                GrayLevel[0.7490196078431373]}, Inherited}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{525., {32.63403328722343, 38.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{525., {32.63403328722343, 38.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8777227653609066`*^9, 3.877722773610558*^9}},
 CellLabel->
  "Out[230]=",ExpressionUUID->"e23adc08-c5ca-465a-8e11-7ef5846033ed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FullFileTable"], "Input",
 CellChangeTimes->{{3.8777228582848253`*^9, 3.877722859580187*^9}},
 CellLabel->
  "In[231]:=",ExpressionUUID->"bfecc462-5854-4ce0-9681-176040a62bea"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>, 
       "two" -> <|
        "name" -> "two", "readOnly" -> True, 
         "blocks" -> {2, 3, 4, 5, 6, 7, 8, 9, 10}|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[11]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[11]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], "Path" -> {},
      "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     2, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["two", 
                  Style[
                  "two", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777228598221507`*^9},
 CellLabel->
  "Out[231]=",ExpressionUUID->"87c3b764-0458-497a-aa6d-b23973293827"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Keys", "[", "FullFileTable", "]"}]], "Input",
 CellChangeTimes->{{3.8777228657547812`*^9, 3.877722866670124*^9}},
 CellLabel->
  "In[232]:=",ExpressionUUID->"2d6509cb-fe4c-494b-b584-36207a72a30c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {"one", "two"}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`AtomShape[33.6]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Atom[String], 2], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`AtomShape[33.6]], 2, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Atom[String], 2], "Path" -> {}, "DisplayedRowCount" -> 2, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 2, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{43., {32.63403328722343, 38.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{43., {32.63403328722343, 38.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777228669978476`*^9},
 CellLabel->
  "Out[232]=",ExpressionUUID->"f244da93-dc93-4f28-976f-7eb456833c37"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Keys", "[", "FullFileTable", "]"}], ",", "\"\<three\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877722869678563*^9, 3.8777228738125887`*^9}},
 CellLabel->
  "In[233]:=",ExpressionUUID->"cc053759-f587-444a-9756-cf963c344609"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.8777228741221776`*^9},
 CellLabel->
  "Out[233]=",ExpressionUUID->"13c125e9-53c6-4f4e-8ed5-440e3acb48bf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MemberQ", "[", 
  RowBox[{
   RowBox[{"Keys", "[", "FullFileTable", "]"}], ",", "\"\<two\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.877722869678563*^9, 3.8777228780573206`*^9}},
 CellLabel->
  "In[234]:=",ExpressionUUID->"3cb558a7-5865-446b-aee2-d88c112ac43b"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8777228783778996`*^9},
 CellLabel->
  "Out[234]=",ExpressionUUID->"8882c8b3-7b9d-4d45-bd93-d8a120c9eec2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Remove", "@", "deleteFile"}]], "Input",
 CellChangeTimes->{{3.877722992018675*^9, 3.877722994488146*^9}},
 CellLabel->
  "In[274]:=",ExpressionUUID->"ac3474b0-9c67-4fe7-a713-e9c208f1bde6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deleteFile", "[", 
   RowBox[{"string_", "?", "StringQ"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Keys", "[", "FullFileTable", "]"}], ",", "string"}], "]"}]}], 
    ",", "0", ",", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Keys", "[", "FullFileTable", "]"}], ",", "string"}], "]"}], 
    ",", 
    RowBox[{
     RowBox[{"FullFileTable", "//=", 
      RowBox[{"KeyDrop", "[", "string", "]"}]}], ";", "1"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8777228276335983`*^9, 3.8777229654392195`*^9}, {
  3.877722999363486*^9, 3.8777230106155467`*^9}, {3.8777230413832216`*^9, 
  3.877723042187648*^9}, {3.877723084986538*^9, 3.877723131732298*^9}, {
  3.877723166403754*^9, 3.8777232430665226`*^9}},
 CellLabel->
  "In[279]:=",ExpressionUUID->"e5ee5cb8-558f-4498-b944-295a4358106e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deleteFile", "[", 
  RowBox[{"FullFileTable", ",", "\"\<three\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.877722926591544*^9, 3.8777229288758326`*^9}, {
  3.8777230180971823`*^9, 3.8777230196295643`*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"9d0d43a4-ddef-419f-9c7d-fe08ed9b42e0"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.8777229292555175`*^9, 3.8777229668154373`*^9, {3.8777230118969*^9, 
   3.877723043576869*^9}, 3.877723087720811*^9, 3.8777231329496784`*^9, 
   3.877723169735769*^9},
 CellLabel->
  "Out[267]=",ExpressionUUID->"992d699b-7c40-432e-90b3-b8e315ef09b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FullFileTable"], "Input",
 CellChangeTimes->{{3.877723090142482*^9, 3.877723091546057*^9}},
 CellLabel->
  "In[268]:=",ExpressionUUID->"e426b7da-8cf9-4090-9b35-46d3aea516a5"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>, 
       "two" -> <|
        "name" -> "two", "readOnly" -> True, 
         "blocks" -> {2, 3, 4, 5, 6, 7, 8, 9, 10}|>|>, "AllowEmbedding" -> 
     True, "InitialShape" -> TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[18]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[18]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], TypeSystem`AnyLength]}], 2], "Path" -> {},
      "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     2, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["two", 
                  Style[
                  "two", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[
                   Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                   GrayLevel[0.5]], 
                  Style[
                   Style[
                    Row[{"\[ThinSpace]{ ", 
                    Subscript["\[Ellipsis]", 9], " }\[ThinSpace]"}], 
                    GrayLevel[0.5]], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}], BaseStyle -> {
               GrayLevel[0.5]}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777230917842026`*^9, 3.8777231341936407`*^9, 
  3.877723171185201*^9},
 CellLabel->
  "Out[268]=",ExpressionUUID->"6601eaa9-42f6-4e14-b991-f5572998e96e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deleteFile", "[", "\"\<two\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.877722926591544*^9, 3.8777229337641587`*^9}, {
   3.8777230243733788`*^9, 3.8777230310524564`*^9}, 3.8777232211194468`*^9},
 CellLabel->
  "In[280]:=",ExpressionUUID->"c041b9b7-bdef-4665-b1e4-f215d1f6bad2"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.8777229341218805`*^9, 3.877722968184995*^9, {3.8777230215431256`*^9, 
   3.877723046350238*^9}, 3.877723094602626*^9, 3.8777231368366394`*^9, {
   3.8777231733715057`*^9, 3.8777232470664654`*^9}},
 CellLabel->
  "Out[280]=",ExpressionUUID->"c0f14593-d63b-4ba1-9af7-2755cd61e99e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FullFileTable"], "Input",
 CellChangeTimes->{{3.8777229368322945`*^9, 3.8777229390319347`*^9}},
 CellLabel->
  "In[281]:=",ExpressionUUID->"3c26d382-807f-4633-b557-2b143c9cbf21"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[21]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 1], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[21]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 1], "Path" -> {}, 
     "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.877722939302652*^9, 3.8777229704025383`*^9, 3.877723035660113*^9, {
   3.877723225046871*^9, 3.8777232487169113`*^9}},
 CellLabel->
  "Out[281]=",ExpressionUUID->"8c5b3db6-9cfe-4d93-8e51-59c59527925a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<three\>\"", ",", "True", ",", "FullFileTable"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8777232917691216`*^9, 3.877723316891089*^9}},
 CellLabel->
  "In[289]:=",ExpressionUUID->"039a196e-ad9e-493e-9ba4-2fa0dc4fbf88"],

Cell[BoxData[
 TemplateBox[{
  "AppendTo", "rvalue", 
   "\"\\!\\(\\*RowBox[{\\\"Dataset\\\", RowBox[{\\\"[\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}]}]\\) \
is not a variable with a value, so its value cannot be changed.\"", 2, 289, 
   13, 16940217062853154223, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.877723412634919*^9},
 CellLabel->
  "During evaluation of \
In[289]:=",ExpressionUUID->"8d4c47a2-d88f-4351-85a4-1c29ced1e82d"],

Cell[BoxData[
 RowBox[{"AppendTo", "[", 
  RowBox[{
   TagBox[
    TagBox[
     DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
      "InitialData" -> <|
        "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>|>, 
       "AllowEmbedding" -> True, "InitialShape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, 
            TypeSystem`PackageScope`KeyDummy[25]} -> 1, {All, "name"} -> 
          1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[33.6], 
            TypeSystem`PackageScope`Limited[
             
             TypeSystem`PackageScope`RowShape[<|
              "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
               TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
               TypeSystem`PackageScope`UnknownShape[False]|>], 
             DirectedInfinity[1], 3, {All}]]], 1, 
          DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[TypeSystem`Boolean], 
           TypeSystem`Vector[
            TypeSystem`Atom[Integer], 1]}], 1], "Meta" -> <||>, "RowTarget" -> 
       20, "ColumnTarget" -> 10, "Shape" -> 
       TypeSystem`PackageScope`HeaderShape[<|{All, 
            TypeSystem`PackageScope`KeyDummy[25]} -> 1, {All, "name"} -> 
          1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`AtomShape[33.6], 
            TypeSystem`PackageScope`Limited[
             
             TypeSystem`PackageScope`RowShape[<|
              "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
               TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
               TypeSystem`PackageScope`UnknownShape[False]|>], 
             DirectedInfinity[1], 3, {All}]]], 1, 
          DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
         TypeSystem`Atom[String], 
         TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[TypeSystem`Boolean], 
           TypeSystem`Vector[
            TypeSystem`Atom[Integer], 1]}], 1], "Path" -> {}, 
       "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
       1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
       "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
      TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
      TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
      TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
      DynamicModule[{
       TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
          Style[
           Grid[{{
              Item[
               Pane[
                Annotation[
                 Mouseover[
                  
                  Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                   Scaled[-0.15]], 
                  Graphics[{
                    GrayLevel[0.6], 
                    
                    Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                   Scaled[-0.15]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, Keys}, "KeyDummy", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["name", 
                    Style[
                    "name", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "name"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "name"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["readOnly", 
                    Style[
                    "readOnly", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "readOnly"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["blocks", 
                    Style[
                    "blocks", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    All, "blocks"}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                  All, "blocks"}, "ColumnHeader", True], "Mouse"], 
                ImageSize -> {{1, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover["one", 
                    Style[
                    "one", FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["one"]}, "RowHeader", False], "Mouse"], 
                ImageSize -> {{33.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
               GrayLevel[0.95], Alignment -> {Left, Baseline}], 
              Item[
               Pane[
                Annotation["one", 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["one"], 
                   Key["name"]}, "Item", False], "Mouse"], 
                ImageSize -> {{33.6, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 RawBoxes["True"], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["one"], 
                   Key["readOnly"]}, "Item", False], "Mouse"], 
                ImageSize -> {{36, Full}, Automatic}, 
                ImageMargins -> {{5, 3}, {4, 5}}], 
               ItemSize -> {Full, Automatic}], 
              Item[
               Pane[
                Annotation[
                 EventHandler[
                  MouseAppearance[
                   Mouseover[
                    Style[{1}, ShowStringCharacters -> False], 
                    Style[
                    Style[{1}, ShowStringCharacters -> False], FontColor -> 
                    RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                  If[
                    TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
                 TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                  TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                   Key["one"], 
                   Key["blocks"]}, "Item", False], "Mouse"], 
                ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
            BaseStyle -> {
             ContextMenu -> 
              Dynamic[TypeSystem`NestedGrid`PackagePrivate`$\
contextMenuTrigger; 
                Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                  TypeSystem`NestedGrid`PackagePrivate`localHold[
                   TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                  TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                  TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                   True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                   TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                  TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                   Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
              "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, 
            Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
            Spacings -> {0, 0}, Alignment -> Left, 
            BaseStyle -> {
             FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
              Plain}], LineBreakWithin -> False, ContextMenu -> {}, 
           NumberMarks -> False, ShowAutoStyles -> False]], 
        TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
       Dynamic[
        TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
           Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
           
           Module[{TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
             TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
             TypeSystem`NestedGrid`PackagePrivate`datasetData[
              TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
               TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
               TypeSystem`NestedGrid`PackagePrivate`renderGrid[
               TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
               TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
              Not[
               FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
              TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
              TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
         TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
         TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
           FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
           TypeSystem`SparseGrid[
            TypeSystem`H["(data no longer present)"]], 
           TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
        TrackedSymbols :> {
         TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
       DynamicModuleValues :> {}], 
      TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
       TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
        TypeSystem`PackageScope`SubViewPathbar[
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
         TypeSystem`NestedGrid`PackagePrivate`updateState[
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$path$$, 
          TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
       TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
      TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
       Framed[
        Dynamic[
         Replace[
         TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
          TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
             Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
             TypeSystem`NestedGrid`PackagePrivate`localHold[
             TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
              Blank[]], 
             Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
              Blank[]]] :> (
            Increment[
             TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
             TypeSystem`NestedGrid`PackagePrivate`path$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
             TypeSystem`NestedGrid`PackagePrivate`pathType$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
             TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
            TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
             TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
            TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
             TypeSystem`NestedGrid`PackagePrivate`path$, 
              TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
           Spacer[10], Blank[] :> Spacer[10]}], 
         TrackedSymbols :> {
          TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
        FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> 
        Top, ImageSize -> {Automatic, 15}], FontSize -> 1], 
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
      DynamicWrapperBox[
       DynamicBox[ToBoxes[
         Dataset`DatasetContent[
         2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
          "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], 
          "State" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
          "VPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], 
          "HPos" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
          "TopBar" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
          "BottomBar" -> 
          Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
          Hold[
            TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
        ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}},
        TrackedSymbols:>{
         TypeSystem`NestedGrid`PackagePrivate`$state$$, 
          TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
       MouseAnnotation[],
       ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}}],
      BaseStyle->{LineBreakWithin -> False},
      DynamicModuleValues:>{},
      Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
       CreateUUID[]),
      UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
     Deploy,
     DefaultBaseStyle->"Deploy"],
    Dataset`InterpretDataset[1],
    Editable->False,
    SelectWithContents->True,
    Selectable->False], ",", 
   RowBox[{"\<\"three\"\>", "\[Rule]", 
    RowBox[{"\[LeftAssociation]", 
     RowBox[{
      RowBox[{"\<\"name\"\>", "\[Rule]", "\<\"three\"\>"}], ",", 
      RowBox[{"\<\"readOnly\"\>", "\[Rule]", "True"}], ",", 
      RowBox[{"\<\"blocks\"\>", "\[Rule]", 
       RowBox[{"{", "2", "}"}]}]}], "\[RightAssociation]"}]}]}], 
  "]"}]], "Output",
 CellChangeTimes->{{3.8777233047465944`*^9, 3.877723317120205*^9}, 
   3.8777234134366827`*^9},
 CellLabel->
  "Out[289]=",ExpressionUUID->"fef67ff5-74a5-41f6-8337-08357601d21b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FullFileTable"], "Input",
 CellChangeTimes->{{3.87772332093178*^9, 3.87772332313037*^9}},
 CellLabel->
  "In[285]:=",ExpressionUUID->"c2a0006d-f04f-4d3d-a463-0e31e987da05"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[24]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 1], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[24]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 1], "Path" -> {}, 
     "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.87772332338678*^9, 3.8777233456400614`*^9}},
 CellLabel->
  "Out[285]=",ExpressionUUID->"127de378-43c4-4149-8feb-165984b75cd8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"createFile", "[", 
   RowBox[{
    RowBox[{"string_", "?", "StringQ"}], ",", 
    RowBox[{"readOnly_", "?", "BooleanQ"}], ",", "blocks_"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}], ",", 
    RowBox[{"Set", "[", 
     RowBox[{"blocks", ",", 
      RowBox[{"(", 
       RowBox[{"blocks", "//", 
        RowBox[{"Append", "[", 
         RowBox[{"string", "->", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<name\>\"", "->", "string"}], ",", 
            RowBox[{"\"\<readOnly\>\"", "->", "readOnly"}], ",", 
            RowBox[{"\"\<blocks\>\"", "->", 
             RowBox[{"Take", "[", 
              RowBox[{
               RowBox[{"UnAllocatedBlocks", "[", "blocks", "]"}], ",", "1"}], 
              "]"}]}]}], "|>"}]}], "]"}]}], ")"}]}], "]"}], ",", 
    RowBox[{"!", 
     RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}]}], ",", 
    RowBox[{"-", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8777234055765424`*^9, 3.8777234556891637`*^9}, {
  3.8777236928985643`*^9, 3.8777237138832855`*^9}, {3.8777239433149977`*^9, 
  3.8777239615402756`*^9}},
 CellLabel->
  "In[306]:=",ExpressionUUID->"a6117cab-63c3-44d0-92e2-3a65d48a6ec7"],

Cell[CellGroupData[{

Cell[BoxData["FullFileTable"], "Input",
 CellChangeTimes->{{3.8777234635725093`*^9, 3.8777234646498747`*^9}},
 CellLabel->
  "In[307]:=",ExpressionUUID->"8c7a899a-af21-4267-ad8c-2a9e304e85bd"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[32]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 1], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[32]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 1], "Path" -> {}, 
     "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777234648934536`*^9, 3.877723963301795*^9},
 CellLabel->
  "Out[307]=",ExpressionUUID->"57da0d9e-726c-4fa2-b269-d5a007625656"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<two\>\"", ",", "True", ",", "FullFileTable"}], "]"}]], "Input",
 CellChangeTimes->{{3.877723468059209*^9, 3.877723495900981*^9}},
 CellLabel->
  "In[308]:=",ExpressionUUID->"41490dc1-5c66-444f-83a9-a3a8c36e8538"],

Cell[BoxData[
 TemplateBox[{
  "Set", "write", 
   "\"Tag \\!\\(\\*RowBox[{\\\"Dataset\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"Dataset\\\", RowBox[{\\\"[\\\", RowBox[{\\\"\
\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}]}]\\) \
is Protected.\"", 2, 308, 17, 16940217062853154223, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.877723717242377*^9, 3.877723965829186*^9},
 CellLabel->
  "During evaluation of \
In[308]:=",ExpressionUUID->"0d90b873-efc7-4c48-9250-83a76144bf0f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>, 
       "two" -> <|"name" -> "two", "readOnly" -> True, "blocks" -> {2}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[33]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 2], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[33]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 2], "Path" -> {}, 
     "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     2, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["two", 
                  Style[
                  "two", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["two", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["two"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["two"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8777234906320186`*^9, 3.877723496865658*^9}, {
   3.877723697045329*^9, 3.877723718066295*^9}, 3.877723966597427*^9},
 CellLabel->
  "Out[308]=",ExpressionUUID->"232d80d2-7100-4772-9db6-60e60715c564"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FullFileTable"], "Input",
 CellChangeTimes->{{3.877723702049469*^9, 3.8777237033013873`*^9}},
 CellLabel->
  "In[300]:=",ExpressionUUID->"3b1a7e6f-4d79-4f7b-aa66-f5c7bd97dc6d"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[29]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 1], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[29]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[33.6], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[33.6], "readOnly" -> 
             TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 1, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 1], "Path" -> {}, 
     "DisplayedRowCount" -> 1, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     1, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{194., {32.63403328722343, 38.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877723703561982*^9},
 CellLabel->
  "Out[300]=",ExpressionUUID->"e7f63c1a-4a15-4195-8178-e8d9b9100a59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DownValues", "[", "AppendTo", "]"}]], "Input",
 CellChangeTimes->{{3.8777235645879936`*^9, 3.8777235705984983`*^9}},
 CellLabel->
  "In[294]:=",ExpressionUUID->"2b5a39a6-e0aa-4fd4-896d-a9897617c1a1"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.87772357086166*^9},
 CellLabel->
  "Out[294]=",ExpressionUUID->"b76a9776-aa4b-4f3d-85ac-4a5fdef11809"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UpValues", "[", "AppendTo", "]"}]], "Input",
 CellChangeTimes->{{3.877723573716727*^9, 3.877723575801174*^9}},
 CellLabel->
  "In[295]:=",ExpressionUUID->"be948a0b-8e29-454b-b92f-450c8a79f968"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.877723576349038*^9},
 CellLabel->
  "Out[295]=",ExpressionUUID->"56423a0e-a83d-4df4-b546-0a8b57dbc9cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OwnValues", "[", "AppendTo", "]"}]], "Input",
 CellChangeTimes->{{3.877723577750203*^9, 3.877723580881554*^9}},
 CellLabel->
  "In[296]:=",ExpressionUUID->"07bca10e-08e6-447c-b4d0-f2f4dcea3600"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.8777235811487103`*^9},
 CellLabel->
  "Out[296]=",ExpressionUUID->"3841c85d-4ba8-4fa5-b5e6-c81cb74c69e0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SubValues", "[", "FullFileTable", "]"}]], "Input",
 CellChangeTimes->{{3.877723634233436*^9, 3.8777236467077484`*^9}},
 CellLabel->
  "In[297]:=",ExpressionUUID->"7c050164-0317-46c2-8a32-0b9fda514e01"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{3.877723646967558*^9},
 CellLabel->
  "Out[297]=",ExpressionUUID->"8d49f7ef-98d0-402e-9420-4fc521332d19"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FullFileTable"}]], "Input",
 CellChangeTimes->{{3.877723896665012*^9, 3.877723898530884*^9}},
 CellLabel->
  "In[303]:=",ExpressionUUID->"560ae70f-c09e-49fe-a577-23765d07089f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`FullFileTable\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Assignment\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"OwnValues\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "OwnValues", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{"FullFileTable", "=", 
                    RowBox[{"Dataset", "[", 
                    RowBox[{
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{"\"one\"", "\[Rule]", 
                    RowBox[{"\[LeftAssociation]", 
                    RowBox[{
                    RowBox[{"\"name\"", "\[Rule]", "\"one\""}], ",", 
                    RowBox[{"\"readOnly\"", "\[Rule]", "True"}], ",", 
                    RowBox[{"\"blocks\"", "\[Rule]", 
                    RowBox[{"{", "1", "}"}]}]}], "\[RightAssociation]"}]}], 
                    "\[RightAssociation]"}], ",", 
                    RowBox[{"TypeSystem`Assoc", "[", 
                    RowBox[{
                    RowBox[{"TypeSystem`Atom", "[", "String", "]"}], ",", 
                    RowBox[{"TypeSystem`Struct", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\"name\"", ",", "\"readOnly\"", ",", 
                    "\"blocks\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"TypeSystem`Atom", "[", "String", "]"}], ",", 
                    
                    RowBox[{"TypeSystem`Atom", "[", "TypeSystem`Boolean", 
                    "]"}], ",", 
                    RowBox[{"TypeSystem`Vector", "[", 
                    RowBox[{
                    RowBox[{"TypeSystem`Atom", "[", "Integer", "]"}], ",", 
                    "1"}], "]"}]}], "}"}]}], "]"}], ",", "1"}], "]"}], ",", 
                    RowBox[{"\[LeftAssociation]", "\[RightAssociation]"}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`FullFileTable\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`FullFileTable\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Global`FullFileTable", 
    "Documentation" -> None, "OwnValues" -> 
    Information`InformationValueForm[
     OwnValues, $CellContext`FullFileTable, {$CellContext`FullFileTable -> 
       Dataset[<|
         "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>|>, 
         TypeSystem`Assoc[
          TypeSystem`Atom[String], 
          TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
            TypeSystem`Atom[String], 
            TypeSystem`Atom[TypeSystem`Boolean], 
            TypeSystem`Vector[
             TypeSystem`Atom[Integer], 1]}], 1], <||>]}], "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "Global`FullFileTable"|>, 
   False]]], "Output",
 CellChangeTimes->{3.877723898936883*^9},
 CellLabel->
  "Out[303]=",ExpressionUUID->"735795bb-6a5e-4e18-8752-4d2da94ab20a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "Set", "]"}]], "Input",
 CellChangeTimes->{{3.8777239839353504`*^9, 3.8777239857186394`*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"bd33d4d4-5efb-48a0-8ea5-aee98f24f576"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"],
                ImageSizeCache->{13., {4., 9.}}], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"],
                ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/Set",
              ButtonNote->"paclet:ref/Set"],
             "\"paclet:ref/Set\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"lhs\\\", \\\"TI\\\"], \
\\\"=\\\", StyleBox[\\\"rhs\\\", \\\"TI\\\"]}]\\) evaluates \
\\!\\(\\*StyleBox[\\\"rhs\\\", \\\"TI\\\"]\\) and assigns the result to be \
the value of \\!\\(\\*StyleBox[\\\"lhs\\\", \\\"TI\\\"]\\). From then on, \\!\
\\(\\*StyleBox[\\\"lhs\\\", \\\"TI\\\"]\\) is replaced by \
\\!\\(\\*StyleBox[\\\"rhs\\\", \\\"TI\\\"]\\) whenever it appears. \
\\n\\!\\(\\*RowBox[{RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"l\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"l\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}], \\\"=\\\", RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"r\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"r\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}]}]\\) evaluates the \\!\\(\\*SubscriptBox[StyleBox[\\\
\"r\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]\\), and assigns the \
results to be the values of the corresponding \\!\\(\\*SubscriptBox[StyleBox[\
\\\"l\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]\\). \"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Documentation\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Documentation\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Documentation", "Tooltip"]& ], 
                   TemplateBox[{
                    
                    TemplateBox[{
                    "\"Local \[RightGuillemet]\"", "paclet:ref/Set", 
                    "paclet:ref/Set", "Link", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"], "\"  \"", 
                    StyleBox[
                    "\"|\"", "InformationRowLabel", StripOnInput -> False], 
                    "\"  \"", 
                    TemplateBox[{"\"Web \[RightGuillemet]\"", {
                    URL["http://reference.wolfram.com/language/ref/Set.html"],
                     None}, 
                    "http://reference.wolfram.com/language/ref/Set.html", 
                    "Hyperlink", {
                    RGBColor[0.9686274509803922, 0.4666666666666667, 0.]}, 
                    BaseStyle -> {
                    RGBColor[0.0784313725490196, 0.1568627450980392, 0.6]}}, 
                    "HyperlinkTemplate"]},
                    "RowDefault"]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    "HoldFirst", ",", "Protected", ",", "SequenceHold"}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"System`Set\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox[
           PaneBox[
            TooltipBox[
             ButtonBox[
              PaneSelectorBox[{False->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIcon"]], True->
               
               DynamicBox[FEPrivate`FrontEndResource[
                "FEBitmaps", "InformationHelpIconHot"]]}, Dynamic[
                CurrentValue["MouseOver"]]],
              Appearance->None,
              BaseStyle->"Link",
              ButtonData->"paclet:ref/Set",
              ButtonNote->"paclet:ref/Set"],
             "\"paclet:ref/Set\""],
            FrameMargins->{{0, 4}, {0, 2}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[{StyleBox[\\\"lhs\\\", \\\"TI\\\"], \
\\\"=\\\", StyleBox[\\\"rhs\\\", \\\"TI\\\"]}]\\) evaluates \
\\!\\(\\*StyleBox[\\\"rhs\\\", \\\"TI\\\"]\\) and assigns the result to be \
the value of \\!\\(\\*StyleBox[\\\"lhs\\\", \\\"TI\\\"]\\). From then on, \\!\
\\(\\*StyleBox[\\\"lhs\\\", \\\"TI\\\"]\\) is replaced by \
\\!\\(\\*StyleBox[\\\"rhs\\\", \\\"TI\\\"]\\) whenever it appears. \
\\n\\!\\(\\*RowBox[{RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"l\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"l\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}], \\\"=\\\", RowBox[{\\\"{\\\", \
RowBox[{SubscriptBox[StyleBox[\\\"r\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"r\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\[Ellipsis]\\\", \\\
\"TR\\\"]}], \\\"}\\\"}]}]\\) evaluates the \\!\\(\\*SubscriptBox[StyleBox[\\\
\"r\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]\\), and assigns the \
results to be the values of the corresponding \\!\\(\\*SubscriptBox[StyleBox[\
\\\"l\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]\\). \"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[{StyleBox[\"lhs\", \"TI\"], \"=\", StyleBox[\"rhs\", \
\"TI\"]}]\) evaluates \!\(\*StyleBox[\"rhs\", \"TI\"]\) and assigns the \
result to be the value of \!\(\*StyleBox[\"lhs\", \"TI\"]\). From then on, \!\
\(\*StyleBox[\"lhs\", \"TI\"]\) is replaced by \!\(\*StyleBox[\"rhs\", \
\"TI\"]\) whenever it appears. \n\!\(\*RowBox[{RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"l\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"l\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}], \"=\", RowBox[{\"{\", \
RowBox[{SubscriptBox[StyleBox[\"r\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"r\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\[Ellipsis]\", \"TR\"]}], \"}\"}]}]\) evaluates the \
\!\(\*SubscriptBox[StyleBox[\"r\", \"TI\"], StyleBox[\"i\", \"TI\"]]\), and \
assigns the results to be the values of the corresponding \
\!\(\*SubscriptBox[StyleBox[\"l\", \"TI\"], StyleBox[\"i\", \"TI\"]]\). ", 
    "Documentation" -> <|
     "Local" -> "paclet:ref/Set", "Web" -> 
      "http://reference.wolfram.com/language/ref/Set.html"|>, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {HoldFirst, Protected, SequenceHold}, 
    "FullName" -> "System`Set"|>, True]]], "Output",
 CellChangeTimes->{3.8777239861670837`*^9},
 CellLabel->
  "Out[309]=",ExpressionUUID->"9d0887b9-feba-4b62-993c-e132766b8e9f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"createFile", ",", 
   RowBox[{"{", 
    RowBox[{"HoldFirst", ",", "SequenceHold", ",", "HoldAllComplete"}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777239935287027`*^9, 3.87772401363361*^9}, {
  3.877724060273238*^9, 3.8777240678138943`*^9}, {3.8777241407786245`*^9, 
  3.8777241458866615`*^9}},
 CellLabel->
  "In[319]:=",ExpressionUUID->"eb665d76-b6bf-4fee-b647-e5f04499c830"],

Cell[BoxData[
 RowBox[{
  RowBox[{"createFile", "[", 
   RowBox[{
    RowBox[{"string_", "?", "StringQ"}], ",", 
    RowBox[{"readOnly_", "?", "BooleanQ"}], ",", "blocks_"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}], ",", 
    RowBox[{"(", 
     RowBox[{"blocks", "//=", 
      RowBox[{"Append", "[", 
       RowBox[{"string", "->", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<name\>\"", "->", "string"}], ",", 
          RowBox[{"\"\<readOnly\>\"", "->", "readOnly"}], ",", 
          RowBox[{"\"\<blocks\>\"", "->", 
           RowBox[{"Take", "[", 
            RowBox[{
             RowBox[{"UnAllocatedBlocks", "[", "blocks", "]"}], ",", "1"}], 
            "]"}]}]}], "|>"}]}], "]"}]}], ")"}], ",", 
    RowBox[{"!", 
     RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}]}], ",", 
    RowBox[{"-", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877724016506529*^9, 3.8777240310025573`*^9}, {
  3.877724079622822*^9, 3.8777240870643244`*^9}},
 CellLabel->
  "In[320]:=",ExpressionUUID->"904a7899-60b0-47a9-b111-e23864b93668"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<four\>\"", ",", "True", ",", "FullFileTable"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777240322170115`*^9, 3.877724048555216*^9}},
 CellLabel->
  "In[321]:=",ExpressionUUID->"a6b30713-6521-4383-b5a5-6569b7fad8d1"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "one" -> <|"name" -> "one", "readOnly" -> True, "blocks" -> {1}|>, 
       "four" -> <|"name" -> "four", "readOnly" -> True, "blocks" -> {2}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[37]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
             "readOnly" -> TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 2], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[37]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
             "readOnly" -> TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 2, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 2], "Path" -> {}, 
     "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     2, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one", 
                  Style[
                  "one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["four", 
                  Style[
                  "four", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["four"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["four", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["four"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{216., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{216., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8777240409535913`*^9, 3.8777240895446587`*^9}, 
   3.8777241479156904`*^9},
 CellLabel->
  "Out[321]=",ExpressionUUID->"8e3ef87c-bcff-4bb4-9e4a-b6e163b467db"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"deleteFile", "[", 
   RowBox[{"string_", "?", "StringQ"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Keys", "[", "FullFileTable", "]"}], ",", "string"}], "]"}]}], 
    ",", "0", ",", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Keys", "[", "FullFileTable", "]"}], ",", "string"}], "]"}], 
    ",", 
    RowBox[{
     RowBox[{"FullFileTable", "//=", 
      RowBox[{"KeyDrop", "[", "string", "]"}]}], ";", "1"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8777241549242706`*^9, 
  3.877724175762595*^9}},ExpressionUUID->"64047a94-8fc1-4dc2-bc68-\
65861e9c72b7"],

Cell[CellGroupData[{

Cell["Create file", "Section",
 CellChangeTimes->{{3.8777241782770896`*^9, 
  3.877724179700219*^9}},ExpressionUUID->"2b4f9dd1-92bf-4c39-93f0-\
8a01bdd72bd6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "createFile"}]], "Input",
 CellChangeTimes->{{3.8777241808068466`*^9, 3.8777241858167315`*^9}},
 CellLabel->
  "In[322]:=",ExpressionUUID->"2956eca5-d571-41cb-a069-8e456fc5521e"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`createFile\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"createFile", "[", 
                    RowBox[{
                    RowBox[{"string_", "?", "StringQ"}], ",", 
                    RowBox[{"readOnly_", "?", "BooleanQ"}], ",", "blocks_"}], 
                    "]"}], ":=", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}], ",", 
                    RowBox[{"blocks", "//=", 
                    RowBox[{"Append", "[", 
                    RowBox[{"string", "\[Rule]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\"name\"", "\[Rule]", "string"}], ",", 
                    RowBox[{"\"readOnly\"", "\[Rule]", "readOnly"}], ",", 
                    RowBox[{"\"blocks\"", "\[Rule]", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"UnAllocatedBlocks", "[", "blocks", "]"}], ",", 
                    "1"}], "]"}]}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"!", 
                    RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}]}], 
                    ",", 
                    RowBox[{"-", "1"}]}], "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    "HoldAllComplete", ",", "HoldFirst", ",", 
                    "SequenceHold"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`createFile\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`createFile\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Global`createFile", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`createFile, {$CellContext`createFile[
         PatternTest[
          Pattern[$CellContext`string, 
           Blank[]], StringQ], 
         PatternTest[
          Pattern[$CellContext`readOnly, 
           Blank[]], BooleanQ], 
         Pattern[$CellContext`blocks, 
          Blank[]]] :> Which[
         $CellContext`BlockSpaceAvailableQ[$CellContext`blocks], 
         ApplyTo[$CellContext`blocks, 
          
          Append[$CellContext`string -> <|
            "name" -> $CellContext`string, 
             "readOnly" -> $CellContext`readOnly, "blocks" -> Take[
               $CellContext`UnAllocatedBlocks[$CellContext`blocks], 1]|>]], 
         Not[
          $CellContext`BlockSpaceAvailableQ[$CellContext`blocks]], -1]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {HoldAllComplete, HoldFirst, SequenceHold}, "FullName" -> 
    "Global`createFile"|>, False]]], "Output",
 CellChangeTimes->{3.8777241861416936`*^9},
 CellLabel->
  "Out[322]=",ExpressionUUID->"fe1b20cf-8c89-4488-a583-67b326342245"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "createFile", "]"}]], "Input",
 CellChangeTimes->{{3.8777241893571334`*^9, 3.8777241912766285`*^9}},
 CellLabel->
  "In[323]:=",ExpressionUUID->"add513ca-0ccf-4c83-a1a3-92c2c757a5e1"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"createFile", ",", 
   RowBox[{"{", "HoldAllComplete", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877724192267007*^9, 3.877724201681244*^9}},
 CellLabel->
  "In[324]:=",ExpressionUUID->"0a1ac982-3075-4b7a-b583-0b9f5dee1320"],

Cell[BoxData[
 RowBox[{
  RowBox[{"createFile", "[", 
   RowBox[{
    RowBox[{"string_", "?", "StringQ"}], ",", 
    RowBox[{"readOnly_", "?", "BooleanQ"}], ",", "blocks_"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}], ",", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"blocks", "//=", 
       RowBox[{"Append", "[", 
        RowBox[{"string", "->", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<name\>\"", "->", "string"}], ",", 
           RowBox[{"\"\<readOnly\>\"", "->", "readOnly"}], ",", 
           RowBox[{"\"\<blocks\>\"", "->", 
            RowBox[{"Take", "[", 
             RowBox[{
              RowBox[{"UnAllocatedBlocks", "[", "blocks", "]"}], ",", "1"}], 
             "]"}]}]}], "|>"}]}], "]"}]}], ")"}], ";", "string"}], ",", 
    RowBox[{"!", 
     RowBox[{"BlockSpaceAvailableQ", "[", "blocks", "]"}]}], ",", 
    RowBox[{"-", "1"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.877724516029363*^9, 3.877724523979391*^9}},
 CellLabel->
  "In[341]:=",ExpressionUUID->"96c37618-10d7-48bb-bc53-94309c2b878f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"createFile", "[", 
  RowBox[{"\"\<one\>\"", ",", "False", ",", "FullFileTable"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777242204779053`*^9, 3.8777242529837914`*^9}},
 CellLabel->
  "In[342]:=",ExpressionUUID->"95e26c30-e881-4cb7-834d-9abe28c5ea7c"],

Cell[BoxData["\<\"one\"\>"], "Output",
 CellChangeTimes->{{3.877724231699271*^9, 3.877724253440634*^9}, 
   3.8777245261782103`*^9},
 CellLabel->
  "Out[342]=",ExpressionUUID->"307774af-e1ee-48c9-acab-0b02f9a5e13a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"createFile", "[", 
    RowBox[{
     RowBox[{"IntegerName", "[", "i", "]"}], ",", "True", ",", 
     "FullFileTable"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "11"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877724285423709*^9, 3.8777243644975147`*^9}},
 CellLabel->
  "In[343]:=",ExpressionUUID->"f0ba4a57-df0d-4e6c-9f07-91c50db62ff5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{3.877724314469759*^9, 3.8777243651525226`*^9, 
  3.8777245289622836`*^9},
 CellLabel->
  "Out[343]=",ExpressionUUID->"1a7f22b6-2266-44e5-a1ae-9abb9752817f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Delete Files", "Section",
 CellChangeTimes->{{3.877724271900045*^9, 3.877724276769391*^9}, {
  3.877724383318593*^9, 
  3.877724386046629*^9}},ExpressionUUID->"5d066113-26d8-4bb9-a85b-\
76aa2474d9dc"],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"deleteFile", ",", 
   RowBox[{"{", "HoldAllComplete", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777244418713174`*^9, 3.8777244642467012`*^9}},
 CellLabel->
  "In[336]:=",ExpressionUUID->"68195402-525d-4231-95ce-7be1815edb5b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"deleteFile", "[", 
   RowBox[{
    RowBox[{"string_", "?", "StringQ"}], ",", "fileTable_"}], "]"}], ":=", 
  RowBox[{"Which", "[", 
   RowBox[{
    RowBox[{"!", 
     RowBox[{"MemberQ", "[", 
      RowBox[{
       RowBox[{"Keys", "[", "fileTable", "]"}], ",", "string"}], "]"}]}], ",",
     "0", ",", 
    RowBox[{"MemberQ", "[", 
     RowBox[{
      RowBox[{"Keys", "[", "fileTable", "]"}], ",", "string"}], "]"}], ",", 
    RowBox[{
     RowBox[{"fileTable", "//=", 
      RowBox[{"KeyDrop", "[", "string", "]"}]}], ";", "1"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8777243871002846`*^9, 3.877724420231905*^9}},
 CellLabel->
  "In[337]:=",ExpressionUUID->"09d62921-1936-4136-aa5d-171658148f8e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deleteFile", "[", 
  RowBox[{"\"\<one\>\"", ",", "FullFileTable"}], "]"}]], "Input",
 CellChangeTimes->{{3.877724423641864*^9, 3.877724431624345*^9}},
 CellLabel->
  "In[346]:=",ExpressionUUID->"75e8a7ac-9981-4d74-a83b-cf91058f7e8e"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.8777244326692896`*^9, 3.877724475800602*^9, 
  3.8777245678738823`*^9},
 CellLabel->
  "Out[346]=",ExpressionUUID->"71808775-1d72-48b0-9c62-bd60c04cb774"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FullFileTable"], "Input",
 CellChangeTimes->{{3.8777244790000906`*^9, 3.877724480029022*^9}},
 CellLabel->
  "In[347]:=",ExpressionUUID->"e6558b5e-1c1c-42a8-ba8d-f1d86a4b8c4e"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "four" -> <|"name" -> "four", "readOnly" -> True, "blocks" -> {2}|>, 
       "1" -> <|"name" -> "1", "readOnly" -> True, "blocks" -> {3}|>, 
       "2" -> <|"name" -> "2", "readOnly" -> True, "blocks" -> {4}|>, 
       "3" -> <|"name" -> "3", "readOnly" -> True, "blocks" -> {5}|>, 
       "4" -> <|"name" -> "4", "readOnly" -> True, "blocks" -> {6}|>, 
       "5" -> <|"name" -> "5", "readOnly" -> True, "blocks" -> {7}|>, 
       "6" -> <|"name" -> "6", "readOnly" -> True, "blocks" -> {8}|>, 
       "7" -> <|"name" -> "7", "readOnly" -> True, "blocks" -> {9}|>, 
       "8" -> <|"name" -> "8", "readOnly" -> True, "blocks" -> {10}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[51]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
             "readOnly" -> TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 9, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 9], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[51]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
             "readOnly" -> TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 9, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 9], "Path" -> {}, 
     "DisplayedRowCount" -> 9, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     9, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["four", 
                  Style[
                  "four", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["four"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["four", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["four"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["1", 
                  Style[
                  "1", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["1"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["1"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["1"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["1"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["1"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["1"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["2", 
                  Style[
                  "2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["2"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["2"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["3", 
                  Style[
                  "3", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["3"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["3"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["3", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["3"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["3"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{5}, ShowStringCharacters -> False], 
                  Style[
                   Style[{5}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["3"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["3"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["4", 
                  Style[
                  "4", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["4"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["4"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["4", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["4"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["4"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{6}, ShowStringCharacters -> False], 
                  Style[
                   Style[{6}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["4"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["4"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["5", 
                  Style[
                  "5", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["5"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["5"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["5", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["5"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["5"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{7}, ShowStringCharacters -> False], 
                  Style[
                   Style[{7}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["5"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["5"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["6", 
                  Style[
                  "6", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["6"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["6"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["6", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["6"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["6"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{8}, ShowStringCharacters -> False], 
                  Style[
                   Style[{8}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["6"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["6"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["7", 
                  Style[
                  "7", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["7"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["7"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["7", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["7"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["7"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{9}, ShowStringCharacters -> False], 
                  Style[
                   Style[{9}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["7"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["7"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["8", 
                  Style[
                  "8", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["8"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["8"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["8", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["8"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["8"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{10}, ShowStringCharacters -> False], 
                  Style[
                   Style[{10}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["8"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["8"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{216., {140.63403328722342`, 146.36596671277658`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{216., {140.63403328722342`, 146.36596671277658`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.877724480353458*^9, 3.8777245701849737`*^9},
 CellLabel->
  "Out[347]=",ExpressionUUID->"7b89dea5-8853-4aee-b3f4-f12e292367f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deleteFile", "[", 
  RowBox[{"\"\<hundred\>\"", ",", "FullFileTable"}], "]"}]], "Input",
 CellChangeTimes->{{3.877724493046726*^9, 3.8777245028608313`*^9}},
 CellLabel->
  "In[340]:=",ExpressionUUID->"007d14bf-0cf1-4bc8-a5d8-6d86a3baf1a6"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8777245030796413`*^9},
 CellLabel->
  "Out[340]=",ExpressionUUID->"e75da1eb-a5cb-4847-81dd-7f002acf7731"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deleteFile", "[", 
  RowBox[{"\"\<one\>\"", ",", "FullFileTable"}], "]"}]], "Input",
 CellChangeTimes->{{3.8777246156604867`*^9, 3.877724619641905*^9}},
 CellLabel->
  "In[350]:=",ExpressionUUID->"c54a3fe1-af58-4a68-91f6-b87d5c23578f"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.877724619910346*^9},
 CellLabel->
  "Out[350]=",ExpressionUUID->"bee08297-8612-412a-94e2-84385f00e6e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"createFile", "[", 
    RowBox[{
     RowBox[{"IntegerName", "[", 
      RowBox[{"i", "+", "100"}], "]"}], ",", "True", ",", "FullFileTable"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777245745162797`*^9, 3.87772460953652*^9}},
 CellLabel->
  "In[351]:=",ExpressionUUID->"24e2902d-82d9-445e-a528-958cb4fe481e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"one hundred one\"\>", ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}], ",", 
   RowBox[{"-", "1"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8777245931961527`*^9, 3.877724621917901*^9}},
 CellLabel->
  "Out[351]=",ExpressionUUID->"d3514f37-439f-4c9c-9cab-ad3a929b366a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["FullFileTable"], "Input",
 CellChangeTimes->{{3.8777246241320767`*^9, 3.877724625301159*^9}},
 CellLabel->
  "In[352]:=",ExpressionUUID->"2105c052-3c77-4bd8-a165-bf7af42da911"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "four" -> <|"name" -> "four", "readOnly" -> True, "blocks" -> {2}|>, 
       "1" -> <|"name" -> "1", "readOnly" -> True, "blocks" -> {3}|>, 
       "2" -> <|"name" -> "2", "readOnly" -> True, "blocks" -> {4}|>, 
       "3" -> <|"name" -> "3", "readOnly" -> True, "blocks" -> {5}|>, 
       "4" -> <|"name" -> "4", "readOnly" -> True, "blocks" -> {6}|>, 
       "5" -> <|"name" -> "5", "readOnly" -> True, "blocks" -> {7}|>, 
       "6" -> <|"name" -> "6", "readOnly" -> True, "blocks" -> {8}|>, 
       "7" -> <|"name" -> "7", "readOnly" -> True, "blocks" -> {9}|>, 
       "8" -> <|"name" -> "8", "readOnly" -> True, "blocks" -> {10}|>, 
       "one hundred one" -> <|
        "name" -> "one hundred one", "readOnly" -> True, "blocks" -> {1}|>|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[52]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
             "readOnly" -> TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 10, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 10], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[52]} -> 1, {All, "name"} -> 
        1, {All, "readOnly"} -> 1, {All, "blocks"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "name" -> TypeSystem`PackageScope`AtomShape[44.800000000000004`], 
             "readOnly" -> TypeSystem`PackageScope`AtomShape[36], "blocks" -> 
             TypeSystem`PackageScope`UnknownShape[False]|>], 
           DirectedInfinity[1], 3, {All}]]], 10, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[TypeSystem`Boolean], 
         TypeSystem`Vector[
          TypeSystem`Atom[Integer], 1]}], 10], "Path" -> {}, 
     "DisplayedRowCount" -> 10, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     10, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "readOnly"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "readOnly"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "blocks"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "blocks"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["four", 
                  Style[
                  "four", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["four"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["four", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["four"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["four"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["1", 
                  Style[
                  "1", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["1"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["1"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["1", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["1"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["1"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{3}, ShowStringCharacters -> False], 
                  Style[
                   Style[{3}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["1"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["1"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["2", 
                  Style[
                  "2", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["2"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["2", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{4}, ShowStringCharacters -> False], 
                  Style[
                   Style[{4}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["2"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["2"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["3", 
                  Style[
                  "3", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["3"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["3"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["3", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["3"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["3"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{5}, ShowStringCharacters -> False], 
                  Style[
                   Style[{5}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["3"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["3"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["4", 
                  Style[
                  "4", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["4"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["4"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["4", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["4"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["4"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{6}, ShowStringCharacters -> False], 
                  Style[
                   Style[{6}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["4"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["4"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["5", 
                  Style[
                  "5", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["5"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["5"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["5", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["5"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["5"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{7}, ShowStringCharacters -> False], 
                  Style[
                   Style[{7}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["5"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["5"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["6", 
                  Style[
                  "6", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["6"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["6"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["6", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["6"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["6"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{8}, ShowStringCharacters -> False], 
                  Style[
                   Style[{8}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["6"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["6"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["7", 
                  Style[
                  "7", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["7"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["7"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["7", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["7"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["7"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{9}, ShowStringCharacters -> False], 
                  Style[
                   Style[{9}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["7"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["7"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["8", 
                  Style[
                  "8", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["8"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["8"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["8", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["8"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["8"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{10}, ShowStringCharacters -> False], 
                  Style[
                   Style[{10}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["8"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["8"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["one hundred one", 
                  Style[
                  "one hundred one", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one hundred one"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one hundred one"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["one hundred one", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one hundred one"], 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one hundred one"], 
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{1}, ShowStringCharacters -> False], 
                  Style[
                   Style[{1}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["one hundred one"], 
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["one hundred one"], 
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{328., {154.13403328722342`, 159.86596671277658`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{328., {154.13403328722342`, 159.86596671277658`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777246256233225`*^9},
 CellLabel->
  "Out[352]=",ExpressionUUID->"f57c7b9d-e315-4b26-8bd6-65e1010fc518"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Disk Blocks", "Section",
 CellChangeTimes->{{3.8777247130638313`*^9, 
  3.877724714503558*^9}},ExpressionUUID->"8996b823-1f79-4be4-ae14-\
c94ba206f0f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiskBlocks", "=", 
  RowBox[{"Association", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"i", "->", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"Null", ",", "10"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "10"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8777246488395195`*^9, 3.8777246504315057`*^9}, 
   3.877724717322305*^9},
 CellLabel->
  "In[355]:=",ExpressionUUID->"ef00d93f-605d-4860-986a-3ea3356fc435"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"3", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"4", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"5", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"6", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"7", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"8", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"9", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}], ",", 
   RowBox[{"10", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
      ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8777246511925125`*^9, 3.8777247180033417`*^9},
 CellLabel->
  "Out[355]=",ExpressionUUID->"27cce40a-763f-4ecd-90fe-57a14c46c888"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"SetAttributes", "[", 
  RowBox[{"readFile", ",", 
   RowBox[{"{", "HoldAllComplete", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.877724740284033*^9, 3.8777247510493293`*^9}},
 CellLabel->
  "In[356]:=",ExpressionUUID->"b9c45cd4-fa15-4910-8be4-fb1673224dc2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", "FullFileTable", "]"}]], "Input",
 CellChangeTimes->{{3.8777248095292673`*^9, 3.87772481170383*^9}},
 CellLabel->
  "In[357]:=",ExpressionUUID->"f4db62a2-0ee5-4e86-9090-2d7e8db93575"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "name" -> "four", "readOnly" -> True, "blocks" -> {2}|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"name"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"readOnly"} -> 
        TypeSystem`PackageScope`AtomShape[36], {"blocks"} -> 
        TypeSystem`PackageScope`UnknownShape[False]|>, 1], "InitialType" -> 
     TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[TypeSystem`Boolean], 
        TypeSystem`Vector[
         TypeSystem`Atom[Integer], 1]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"name"} -> 
        TypeSystem`PackageScope`AtomShape[44.800000000000004`], {"readOnly"} -> 
        TypeSystem`PackageScope`AtomShape[36], {"blocks"} -> 
        TypeSystem`PackageScope`UnknownShape[False]|>, 1], "Type" -> 
     TypeSystem`Struct[{"name", "readOnly", "blocks"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[TypeSystem`Boolean], 
        TypeSystem`Vector[
         TypeSystem`Atom[Integer], 1]}], "Path" -> {}, "DisplayedRowCount" -> 
     20, "DisplayedColumnCount" -> 10, "DataRowCount" -> 3, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["name"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["name"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["four", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{44.800000000000004`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["readOnly", 
                  Style[
                  "readOnly", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["readOnly"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["readOnly"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["True"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["readOnly"]}, "Item", False], "Mouse"], 
              ImageSize -> {{36, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["blocks", 
                  Style[
                  "blocks", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["blocks"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["blocks"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{2}, ShowStringCharacters -> False], 
                  Style[
                   Style[{2}, ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["blocks"]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["blocks"]}, "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{116., {46.13403328722343, 51.86596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{116., {46.13403328722343, 51.86596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777248119503193`*^9},
 CellLabel->
  "Out[357]=",ExpressionUUID->"48a5dd05-24ea-44b5-bf0e-b2e8b11f07be"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullFileTable", "[", 
  RowBox[{"1", ",", "\"\<blocks\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8777248165235043`*^9, 3.8777248235552225`*^9}},
 CellLabel->
  "In[358]:=",ExpressionUUID->"4917a653-97a9-4732-9dba-57062d81a673"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {2}, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`AtomShape[34]], 1, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Atom[Integer], 1], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`AtomShape[34]], 1, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Atom[Integer], 1], "Path" -> {}, "DisplayedRowCount" -> 1, 
     "DisplayedColumnCount" -> 1, "DataRowCount" -> 1, "DataColumnCount" -> 1,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{43., {19.134033287223428`, 24.865966712776572`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{43., {19.134033287223428`, 24.865966712776572`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8777248238896775`*^9},
 CellLabel->
  "Out[358]=",ExpressionUUID->"87acb929-5271-46e8-913b-f319c7fa7e48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiskBlocks", "[", 
  RowBox[{"First", "@", 
   RowBox[{"Normal", "@", 
    RowBox[{"FullFileTable", "[", 
     RowBox[{"1", ",", "\"\<blocks\>\""}], "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8777248310602603`*^9, 3.8777248493157115`*^9}},
 CellLabel->
  "In[361]:=",ExpressionUUID->"6d287c96-b1cc-4c99-9be8-fa5c966022d9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null", ",", "Null", ",", "Null"}], "}"}]], "Output",
 CellChangeTimes->{{3.877724833113192*^9, 3.8777248495132027`*^9}},
 CellLabel->
  "Out[361]=",ExpressionUUID->"e255eaf3-580a-42b3-bdaf-a496a772735b"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8777249055876036`*^9, 
  3.877724908276746*^9}},ExpressionUUID->"f6d171a5-ae1e-4946-9ab0-\
20fd53c5a3fc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"readFile", "[", "fileName_", "]"}], ":=", 
  RowBox[{"Which", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.8777247522625265`*^9, 3.877724803508974*^9}, {
  3.877724888252559*^9, 
  3.8777249019045715`*^9}},ExpressionUUID->"a97c9b45-8628-4422-9c22-\
5c15167d9aa4"]
}, Open  ]]
},
WindowSize->{576., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
FrontEndVersion->"13.2 for Microsoft Windows (64-bit) (November 10, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b85eee80-103d-4da2-8375-40fa21bfef5d"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 394, 9, 28, "Input",ExpressionUUID->"bf7aa93b-740b-4467-874a-09c594251c6a"],
Cell[977, 33, 3689, 124, 204, "Output",ExpressionUUID->"bd6164c3-f9bf-4731-83f2-b9d4830b8281"]
}, Open  ]],
Cell[4681, 160, 484, 9, 28, "Input",ExpressionUUID->"48f827cb-d446-4057-bbcb-51384449aa67"],
Cell[CellGroupData[{
Cell[5190, 173, 458, 12, 28, "Input",ExpressionUUID->"58ccd537-fce8-4215-aa9a-aff0ea8e24a8"],
Cell[5651, 187, 4145, 134, 204, "Output",ExpressionUUID->"477188d1-d5f5-49de-bf57-583190b3b6f7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9833, 326, 248, 4, 28, "Input",ExpressionUUID->"09215121-5935-45d7-933c-5004df711359"],
Cell[10084, 332, 152, 2, 32, "Output",ExpressionUUID->"d7ecc5d0-98d9-48f1-b3ad-eeae5a618f79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10273, 339, 277, 5, 28, "Input",ExpressionUUID->"e95c1240-76f7-496b-a9e8-26c35a94bb15"],
Cell[10553, 346, 370, 9, 64, "Output",ExpressionUUID->"1decdd29-6dfa-4521-853c-c72fb93b30d1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10960, 360, 335, 6, 28, "Input",ExpressionUUID->"c5142c5a-12b8-4f85-b6af-07a13f8a58f2"],
Cell[11298, 368, 795, 15, 52, "Output",ExpressionUUID->"f6507d13-2a78-4997-950a-5e301b637a17"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12130, 388, 460, 11, 48, "Input",ExpressionUUID->"75a0e7a2-60c2-4475-9de8-4f8408b88a8a"],
Cell[12593, 401, 890, 16, 52, "Output",ExpressionUUID->"7f37d61d-7695-4bc8-a6a1-b5f3ba49946b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13520, 422, 455, 11, 48, "Input",ExpressionUUID->"73c20913-2b7c-4886-9e82-f4ee0d1b4895"],
Cell[13978, 435, 826, 16, 52, "Output",ExpressionUUID->"c720df6e-cc4d-4a87-a9cc-f5f42f3ed919"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14841, 456, 458, 11, 48, "Input",ExpressionUUID->"c491d154-ead9-4316-b87c-929073cead65"],
Cell[15302, 469, 844, 16, 52, "Output",ExpressionUUID->"e928024f-44e2-4e3a-afeb-1cc3020a2337"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16183, 490, 292, 6, 28, "Input",ExpressionUUID->"1de316d7-fa97-40f8-bad8-532c90e17951"],
Cell[16478, 498, 1979, 45, 204, "Output",ExpressionUUID->"eaa4d6ea-4eca-4c08-b563-28a3a589072b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[18494, 548, 283, 5, 28, "Input",ExpressionUUID->"d6675c29-2be3-4169-a35b-eb97595ebcb5"],
Cell[18780, 555, 1117, 18, 185, "Output",ExpressionUUID->"3fb4fdcd-d517-4d06-b2c7-668eed863528"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19934, 578, 280, 5, 28, "Input",ExpressionUUID->"a4b8e0e0-f97c-47ec-a49a-ae0727acf676"],
Cell[20217, 585, 457, 8, 71, "Output",ExpressionUUID->"5905343b-cfce-44b3-a3c7-d1bba82125e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20711, 598, 314, 6, 28, "Input",ExpressionUUID->"ecb48adb-a4df-407f-84d8-00c5cdbfd55e"],
Cell[21028, 606, 139734, 3061, 430, "Output",ExpressionUUID->"1162be71-e6a6-476c-ab7b-994e84449ecf"]
}, Closed]],
Cell[CellGroupData[{
Cell[160799, 3672, 791, 22, 101, "Input",ExpressionUUID->"4ac8fffc-8d15-4dbd-9a5e-018d559af677"],
Cell[161593, 3696, 2053, 46, 204, "Output",ExpressionUUID->"68aaf2c5-cb72-4be0-8209-bf614646c5d5"]
}, Open  ]],
Cell[163661, 3745, 491, 14, 67, "Input",ExpressionUUID->"02d0062a-4324-47b2-8bed-5ae840285c7a"],
Cell[CellGroupData[{
Cell[164177, 3763, 627, 16, 67, "Input",ExpressionUUID->"9910eadb-8df3-4277-bc09-2c6883d83bc8"],
Cell[164807, 3781, 944, 19, 52, "Output",ExpressionUUID->"d30852d5-c21b-42e1-93f7-74fe0eae449e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165788, 3805, 323, 7, 28, "Input",ExpressionUUID->"248b7250-6919-4c25-a795-d58a153622c1"],
Cell[166114, 3814, 1977, 45, 204, "Output",ExpressionUUID->"1e83ec49-c632-45a2-9409-d59fbd196c19"]
}, Open  ]],
Cell[CellGroupData[{
Cell[168128, 3864, 947, 25, 86, "Input",ExpressionUUID->"cac80912-6747-4b40-9564-4e4f819c2f92"],
Cell[169078, 3891, 2129, 45, 185, "Output",ExpressionUUID->"5786b728-19ff-4c93-842e-eec692a41b20"]
}, Closed]],
Cell[CellGroupData[{
Cell[171244, 3941, 306, 6, 24, "Input",ExpressionUUID->"1cc180f1-f27d-4b5e-b9f9-7680d3c7e53d"],
Cell[171553, 3949, 311, 7, 32, "Output",ExpressionUUID->"8f5e98bd-0ca5-4d19-b6d6-378f30525727"]
}, Open  ]],
Cell[CellGroupData[{
Cell[171901, 3961, 335, 7, 28, "Input",ExpressionUUID->"98adc039-0b54-4061-b8dc-67610418ffae"],
Cell[172239, 3970, 868, 16, 52, "Output",ExpressionUUID->"279199ab-e97e-4f81-a257-91d77073810c"]
}, Open  ]],
Cell[173122, 3989, 1254, 32, 105, "Input",ExpressionUUID->"451e6472-56b6-4a32-88f6-f110f335793f"],
Cell[CellGroupData[{
Cell[174401, 4025, 279, 5, 28, "Input",ExpressionUUID->"0c1feb2b-3efe-45a3-bd0f-da08f8cb91d1"],
Cell[174683, 4032, 2208, 46, 185, "Output",ExpressionUUID->"cf25f329-b868-4508-9699-938eb1fce0ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[176928, 4083, 376, 8, 67, "Input",ExpressionUUID->"f93be924-f178-4ae9-90be-a64147f2445d"],
Cell[177307, 4093, 2363, 46, 147, "Output",ExpressionUUID->"d9917839-f135-465a-8c56-4a1f68174705"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179707, 4144, 399, 10, 28, "Input",ExpressionUUID->"f4874ce9-8fd0-4f76-9050-5dd79ef843ea"],
Cell[180109, 4156, 666, 15, 77, "Output",ExpressionUUID->"191e3fa9-1d27-43a2-bd4e-e78506d89fd9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180812, 4176, 440, 10, 48, "Input",ExpressionUUID->"7f2cec44-af7a-405f-aaa5-d5ebd7c2229d"],
Cell[181255, 4188, 693, 14, 52, "Output",ExpressionUUID->"7071baa7-0ceb-4f99-baad-bf6d5baa9688"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181985, 4207, 489, 11, 67, "Input",ExpressionUUID->"2fa06803-f249-42a2-8903-d1463fddaa6d"],
Cell[182477, 4220, 669, 14, 52, "Output",ExpressionUUID->"c157af1e-dca4-4d54-aae8-d74f885b1ca0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183183, 4239, 260, 4, 28, "Input",ExpressionUUID->"e1e8c189-3bc3-4d5b-8149-7235a0cc419f"],
Cell[183446, 4245, 201, 4, 32, "Output",ExpressionUUID->"eae08009-854b-4d65-b624-579114fa3dd1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183684, 4254, 306, 5, 28, "Input",ExpressionUUID->"dfafaac9-d39d-43c3-8776-ecfa72edc5cc"],
Cell[183993, 4261, 639, 18, 52, "Output",ExpressionUUID->"e036287d-76a5-473a-a288-904f63f41dff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[184669, 4284, 196, 3, 28, "Input",ExpressionUUID->"b994d29f-13c9-4849-ab09-2f31c422bc8a"],
Cell[184868, 4289, 11262, 278, 275, "Output",ExpressionUUID->"c8c15337-f928-40cd-98ba-61e35d06f9c6"]
}, Open  ]],
Cell[196145, 4570, 733, 18, 86, "Input",ExpressionUUID->"f49a11b4-bc20-452b-8f80-6b2199f7cf53"],
Cell[CellGroupData[{
Cell[196903, 4592, 209, 3, 28, "Input",ExpressionUUID->"c5934017-8f04-4b99-9dc9-9d467a3c167e"],
Cell[197115, 4597, 1183, 33, 71, "Output",ExpressionUUID->"f9e930fa-349f-4588-bc53-869256b409fc"]
}, Open  ]],
Cell[198313, 4633, 397, 9, 48, "Input",ExpressionUUID->"eb350525-f948-411d-9855-26b2cd3fe311"],
Cell[CellGroupData[{
Cell[198735, 4646, 218, 3, 28, "Input",ExpressionUUID->"2148907a-9a89-437e-90d5-05c49cc8c52f"],
Cell[198956, 4651, 204, 3, 32, "Output",ExpressionUUID->"c5c573d0-798b-412c-b91c-8bdc359810bd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199197, 4659, 293, 6, 28, "Input",ExpressionUUID->"468c2920-609b-49ac-9e31-754e28249f9c"],
Cell[199493, 4667, 2189, 45, 185, "Output",ExpressionUUID->"15dca354-077c-4cd6-8319-7265ce27af02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201719, 4717, 215, 3, 28, "Input",ExpressionUUID->"43cf3de1-84c8-4f95-b71b-1275b4b2c6a7"],
Cell[201937, 4722, 669, 14, 52, "Output",ExpressionUUID->"58ac9ea3-1b4d-4991-96c0-d296df93ca20"]
}, Open  ]],
Cell[CellGroupData[{
Cell[202643, 4741, 487, 11, 67, "Input",ExpressionUUID->"606ff864-d876-4613-b93c-f16a8a1639ad"],
Cell[203133, 4754, 759, 15, 52, "Output",ExpressionUUID->"ef9596e8-4523-4dbc-8c34-565ae9c59e7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[203929, 4774, 209, 3, 28, "Input",ExpressionUUID->"5c2be8c4-4f2a-4310-850e-6ba8a12c61af"],
Cell[204141, 4779, 1121, 30, 71, "Output",ExpressionUUID->"d1ed2d8c-0b01-49d7-bc79-85e0bf2906f0"]
}, Open  ]],
Cell[205277, 4812, 1919, 51, 181, "Input",ExpressionUUID->"1fdfcfaf-154d-465b-9521-8b9ca655b85a"],
Cell[CellGroupData[{
Cell[207221, 4867, 262, 4, 28, "Input",ExpressionUUID->"3cd56ef5-627d-4711-8683-d79b71dc5b84"],
Cell[207486, 4873, 217, 4, 32, "Output",ExpressionUUID->"f77aee0e-f56c-44bd-979b-0bc0dcfb5f24"]
}, Open  ]],
Cell[CellGroupData[{
Cell[207740, 4882, 480, 11, 48, "Input",ExpressionUUID->"aec180a5-0db4-4b2e-8eed-e4aa1436d316"],
Cell[208223, 4895, 734, 15, 52, "Output",ExpressionUUID->"c2866f16-ce87-45f8-a277-27c7d75c460e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[208994, 4915, 192, 3, 28, "Input",ExpressionUUID->"6b4f3cb3-f0cd-4431-96bb-324f8f1471ed"],
Cell[209189, 4920, 160, 2, 32, "Output",ExpressionUUID->"19fc56cc-9833-478e-8489-f68e79bee588"]
}, Open  ]],
Cell[CellGroupData[{
Cell[209386, 4927, 1299, 35, 86, "Input",ExpressionUUID->"b4f1139b-e76b-47ae-b517-f10d3fa55a92"],
Cell[210688, 4964, 1424, 36, 90, "Output",ExpressionUUID->"97807501-7740-4174-addf-74da309d4f63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212149, 5005, 290, 6, 28, "Input",ExpressionUUID->"68997b53-c013-49e0-8747-0f12fa4413c5"],
Cell[212442, 5013, 229, 4, 32, "Output",ExpressionUUID->"c1eaf81d-a534-4286-be4a-fc9cd40ccc1b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212708, 5022, 822, 21, 67, "Input",ExpressionUUID->"b534d6d3-4daa-4fd1-9e4d-bae84bb8ef5e"],
Cell[213533, 5045, 818, 20, 52, "Output",ExpressionUUID->"e2c96bfe-4a9e-4113-8ca1-f27437a75b38"]
}, Open  ]],
Cell[CellGroupData[{
Cell[214388, 5070, 200, 3, 28, "Input",ExpressionUUID->"b65f1a61-c28b-4a7b-b124-f56b419331de"],
Cell[214591, 5075, 820, 20, 52, "Output",ExpressionUUID->"12555599-28cd-4004-870c-78cae8e3b726"]
}, Open  ]],
Cell[CellGroupData[{
Cell[215448, 5100, 822, 21, 67, "Input",ExpressionUUID->"22380da0-f49f-47c5-81f1-737a44ac2b65"],
Cell[216273, 5123, 1426, 36, 90, "Output",ExpressionUUID->"39ba7f93-e1c6-4764-aa8e-88288b86f403"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217736, 5164, 198, 3, 28, "Input",ExpressionUUID->"911cfa96-4615-424b-886f-5b8bbd5d19e5"],
Cell[217937, 5169, 1428, 36, 90, "Output",ExpressionUUID->"d40bcb59-6364-4af8-91bc-3ba02ead414a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[219402, 5210, 215, 4, 28, "Input",ExpressionUUID->"d4c66b10-dcfd-48c4-a123-1d677a828dd7"],
Cell[219620, 5216, 1113, 32, 71, "Output",ExpressionUUID->"a68a7b1f-9807-4992-9b94-143f298880d7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220770, 5253, 218, 4, 28, "Input",ExpressionUUID->"d58fa32c-9cf0-4d56-90ea-1c21a2cfde66"],
Cell[220991, 5259, 184, 4, 32, "Output",ExpressionUUID->"92868d68-3eeb-46fe-b176-c0c47adc7878"]
}, Open  ]],
Cell[CellGroupData[{
Cell[221212, 5268, 492, 12, 67, "Input",ExpressionUUID->"ff863852-8589-4e55-ae9e-9e3f8a719f08"],
Cell[221707, 5282, 746, 16, 52, "Output",ExpressionUUID->"daf0c717-0193-44ab-9c70-6eb039514f3c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[222490, 5303, 220, 4, 28, "Input",ExpressionUUID->"9c9bb60a-9ed1-4336-b7bb-bedf1f67e665"],
Cell[222713, 5309, 184, 4, 32, "Output",ExpressionUUID->"394fe547-0ead-4481-9055-68f66e503a68"]
}, Open  ]],
Cell[222912, 5316, 1218, 31, 143, "Input",ExpressionUUID->"e2466de6-dca5-4944-92f3-e59910c4b9e6"],
Cell[CellGroupData[{
Cell[224155, 5351, 240, 5, 28, "Input",ExpressionUUID->"c2772c4b-c38d-4161-9f63-716e71fd2541"],
Cell[224398, 5358, 207, 4, 32, "Output",ExpressionUUID->"357666b8-4256-4191-9b1d-2be79e6a5feb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224642, 5367, 268, 5, 28, "Input",ExpressionUUID->"a2dd11d5-42f3-4a6a-99d3-4160fe6150d1"],
Cell[224913, 5374, 732, 17, 52, "Output",ExpressionUUID->"bb40d926-a2ba-4921-90b6-fdfa9cdeaba1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[225682, 5396, 239, 5, 28, "Input",ExpressionUUID->"0793a7cd-5df9-4c92-9e98-13a6326e08d7"],
Cell[225924, 5403, 151, 3, 32, "Output",ExpressionUUID->"3bc8376a-8d1a-4e2c-be40-d20387725c2d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226112, 5411, 196, 3, 28, "Input",ExpressionUUID->"856fd9bd-0841-431a-83af-f8e67f7587e7"],
Cell[226311, 5416, 981, 23, 71, "Output",ExpressionUUID->"157f8ef1-028b-4721-8fd3-1b3a9e3df849"]
}, Open  ]],
Cell[CellGroupData[{
Cell[227329, 5444, 268, 5, 28, "Input",ExpressionUUID->"bccaccce-0831-4467-919d-4af9d0f9a249"],
Cell[227600, 5451, 690, 16, 52, "Output",ExpressionUUID->"1be8f759-5dbb-44fe-b821-3cecf1a51b6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[228327, 5472, 198, 3, 28, "Input",ExpressionUUID->"919d38f2-c62e-4f09-9ca2-d4273f840fef"],
Cell[228528, 5477, 980, 23, 71, "Output",ExpressionUUID->"4ed1b32d-4d8b-4f24-93b2-d87d72de7775"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229545, 5505, 195, 3, 28, "Input",ExpressionUUID->"76777af4-173c-4b6b-9515-a57ccb837eec"],
Cell[229743, 5510, 688, 16, 52, "Output",ExpressionUUID->"0dbb713d-0fa0-4b06-83bd-4fc181db614d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230468, 5531, 271, 5, 28, "Input",ExpressionUUID->"24e68cbe-952a-489f-bfb7-658c67d3bf0e"],
Cell[230742, 5538, 675, 16, 52, "Output",ExpressionUUID->"900433f3-2753-4241-a112-6e43d2c909d5"]
}, Open  ]],
Cell[231432, 5557, 183, 3, 28, "Input",ExpressionUUID->"aebdec10-c7c1-41ea-aff9-18a6a781fa7c"],
Cell[CellGroupData[{
Cell[231640, 5564, 231, 4, 28, "Input",ExpressionUUID->"93206583-ee8e-4ee0-8688-8a343ab4c597"],
Cell[231874, 5570, 202, 3, 32, "Output",ExpressionUUID->"1d2a5cc5-f2c6-4043-a4b5-0d2ac7676610"]
}, Open  ]],
Cell[CellGroupData[{
Cell[232113, 5578, 376, 8, 28, "Input",ExpressionUUID->"383db9bd-1b20-4fb8-b94e-bf2d1c4d56c9"],
Cell[232492, 5588, 435, 9, 32, "Output",ExpressionUUID->"fdb4f170-5be4-4a80-93bf-3fc84e6d7d57"]
}, Open  ]],
Cell[CellGroupData[{
Cell[232964, 5602, 492, 12, 48, "Input",ExpressionUUID->"5de371cf-03a4-4d51-8327-19035a7cb478"],
Cell[233459, 5616, 3304, 74, 204, "Output",ExpressionUUID->"1ab0828e-4e34-40a1-9595-906bf3f1e179"]
}, Open  ]],
Cell[CellGroupData[{
Cell[236800, 5695, 585, 14, 86, "Input",ExpressionUUID->"88c7b576-ea9a-4f67-bb8a-ea68705154c6"],
Cell[237388, 5711, 2691, 64, 204, "Output",ExpressionUUID->"c4524aac-61df-4e62-a410-d9922197dcdb"]
}, Open  ]],
Cell[240094, 5778, 176, 2, 28, "Input",ExpressionUUID->"87356ec3-4987-4f1d-8514-2511c3796ed4"],
Cell[CellGroupData[{
Cell[240295, 5784, 232, 5, 28, "Input",ExpressionUUID->"2288cf5d-267f-458b-9512-22728015bf78"],
Cell[240530, 5791, 309, 5, 32, "Output",ExpressionUUID->"ee7c3b28-8fbd-4c63-af8d-b3dde12a9454"]
}, Open  ]],
Cell[240854, 5799, 558, 11, 67, "Input",ExpressionUUID->"00aa84b8-7043-487b-b753-a3fd3384beea"],
Cell[CellGroupData[{
Cell[241437, 5814, 498, 11, 48, "Input",ExpressionUUID->"f8f2ab07-7f01-4c12-9623-735bdc1aa973"],
Cell[241938, 5827, 509, 11, 32, "Output",ExpressionUUID->"5161a821-c010-454f-bd09-b56f07ce06b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[242484, 5843, 249, 4, 28, "Input",ExpressionUUID->"a6c7e4a0-a04e-4bff-a35d-06cd9b551a7a"],
Cell[242736, 5849, 168, 3, 32, "Output",ExpressionUUID->"78a8bcd0-0141-4d81-af24-e83a0df9ea3c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[242941, 5857, 235, 3, 28, "Input",ExpressionUUID->"e1b960cc-d74a-4a75-abf2-6b824c6119a6"],
Cell[243179, 5862, 282, 6, 32, "Output",ExpressionUUID->"82989f8f-58f9-4e02-b2ed-51799d8b74c6"]
}, Open  ]],
Cell[243476, 5871, 420, 8, 67, "Input",ExpressionUUID->"44aa17fe-9213-4c1a-ba2a-0d8b9d7bbd36"],
Cell[CellGroupData[{
Cell[243921, 5883, 238, 3, 28, "Input",ExpressionUUID->"5bdbe3d0-e1ee-4989-af57-dba8fe9c7dcb"],
Cell[244162, 5888, 152, 2, 32, "Output",ExpressionUUID->"1952b2f3-b025-4d60-a848-30a96b38e1d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244351, 5895, 228, 3, 28, "Input",ExpressionUUID->"3badf745-c8f0-48ee-aee8-86cae705ef85"],
Cell[244582, 5900, 153, 2, 32, "Output",ExpressionUUID->"2862dc00-1039-4624-a633-2ea9812e8bb5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244772, 5907, 366, 7, 48, "Input",ExpressionUUID->"f2a3bee6-0a95-43d0-bf6c-ac6367824bea"],
Cell[245141, 5916, 369, 7, 32, "Output",ExpressionUUID->"66f27a3b-f419-4a80-8218-b60847001fd7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245547, 5928, 251, 4, 28, "Input",ExpressionUUID->"43c1edd8-21dc-432a-81f5-b3880beb26f6"],
Cell[245801, 5934, 227, 4, 32, "Output",ExpressionUUID->"0c0124c6-db69-4622-ba0f-5dde5f407a60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246065, 5943, 246, 4, 28, "Input",ExpressionUUID->"1d1cc1c2-a07d-4b55-bb8a-996cee9d7d86"],
Cell[246314, 5949, 155, 2, 32, "Output",ExpressionUUID->"a6f05d4f-a789-4451-84e3-6a69c93580cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[246506, 5956, 359, 7, 28, "Input",ExpressionUUID->"726731cc-440e-42fb-9ee0-1c6e61ee13ad"],
Cell[246868, 5965, 384, 8, 32, "Output",ExpressionUUID->"3c0fb4e3-849b-444d-9246-c9ef9d15279e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247289, 5978, 239, 3, 28, "Input",ExpressionUUID->"f4831194-9e35-400c-b7b3-3b72bd18af6d"],
Cell[247531, 5983, 153, 2, 32, "Output",ExpressionUUID->"d7f5a119-af01-46d8-a744-dba45de0928f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[247721, 5990, 249, 4, 28, "Input",ExpressionUUID->"f875da85-3922-4eea-9dd0-d7e93c699a34"],
Cell[247973, 5996, 174, 3, 32, "Output",ExpressionUUID->"09416e69-43c8-4196-8458-3d927f56efac"]
}, Open  ]],
Cell[248162, 6002, 377, 8, 48, "Input",ExpressionUUID->"304d40e7-2c5a-42cf-9bd7-b0b8ef653767"],
Cell[CellGroupData[{
Cell[248564, 6014, 278, 5, 28, "Input",ExpressionUUID->"934e5c63-7a18-488c-8072-8a441c87d339"],
Cell[248845, 6021, 359, 7, 32, "Output",ExpressionUUID->"8a50991d-4267-4978-824e-c960bc7df3b9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249241, 6033, 318, 6, 48, "Input",ExpressionUUID->"db348c65-126a-4d8b-9347-906ba719af38"],
Cell[249562, 6041, 155, 2, 32, "Output",ExpressionUUID->"ab23e3db-258b-47db-8327-95f31dff79be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[249754, 6048, 227, 4, 28, "Input",ExpressionUUID->"df86b887-f248-461a-8c65-85895d6c9885"],
Cell[249984, 6054, 203, 3, 32, "Output",ExpressionUUID->"bf1b8665-5ede-44f8-90c4-7ae8351a66e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250224, 6062, 391, 10, 28, "Input",ExpressionUUID->"cf495fab-03d6-48d1-b353-5f55b01d5b28"],
Cell[250618, 6074, 746, 16, 52, "Output",ExpressionUUID->"bdac343e-f5ab-42ca-9946-be1fb98c2109"]
}, Open  ]],
Cell[251379, 6093, 1397, 30, 200, "Input",ExpressionUUID->"191c05d6-0635-4993-afb2-5a7ad4a4f772"],
Cell[CellGroupData[{
Cell[252801, 6127, 183, 2, 28, "Input",ExpressionUUID->"8f9e7218-5b7a-45f6-9f41-6a68d213a33d"],
Cell[252987, 6131, 666, 14, 52, "Output",ExpressionUUID->"00dde279-2e46-452f-8066-6997d437d9ad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253690, 6150, 186, 2, 28, "Input",ExpressionUUID->"0f9cc351-e320-4074-9b8f-ed4938f9cacc"],
Cell[253879, 6154, 227, 3, 32, "Output",ExpressionUUID->"0c7483b9-9e15-4dae-b41b-0dec8b588655"]
}, Open  ]],
Cell[254121, 6160, 251, 4, 28, "Input",ExpressionUUID->"7024a335-4f52-4439-8b01-b675f006c04e"],
Cell[CellGroupData[{
Cell[254397, 6168, 181, 2, 28, "Input",ExpressionUUID->"c6cde549-d789-4492-8acd-2c87e2d77422"],
Cell[254581, 6172, 682, 15, 52, "Output",ExpressionUUID->"1f8a1844-2129-451a-a367-0092e98dc623"]
}, Open  ]],
Cell[CellGroupData[{
Cell[255300, 6192, 187, 2, 28, "Input",ExpressionUUID->"fa37d2c1-bd98-4a98-a13e-3e2e71ae068c"],
Cell[255490, 6196, 276, 5, 32, "Output",ExpressionUUID->"2a33f22e-0279-404b-bbef-2e0973de6c23"]
}, Open  ]],
Cell[255781, 6204, 296, 4, 28, "Input",ExpressionUUID->"668f86f6-ac1f-4e26-ad62-87fe32e6e6e2"],
Cell[CellGroupData[{
Cell[256102, 6212, 181, 2, 28, "Input",ExpressionUUID->"83298e73-65e8-4cbc-9660-d730cea2aba8"],
Cell[256286, 6216, 713, 16, 52, "Output",ExpressionUUID->"51f21f55-b6f9-4bfa-a285-224ac63ef6db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[257036, 6237, 188, 2, 28, "Input",ExpressionUUID->"5bf7f003-2077-4118-b7e7-0dac24b243a1"],
Cell[257227, 6241, 368, 8, 32, "Output",ExpressionUUID->"2d5f0478-9c14-4817-800a-fc7445f1bebd"]
}, Open  ]],
Cell[257610, 6252, 223, 3, 28, "Input",ExpressionUUID->"a2ad5ab3-1272-41eb-a6f5-6d6cc1b13dff"],
Cell[CellGroupData[{
Cell[257858, 6259, 183, 2, 28, "Input",ExpressionUUID->"c603bd36-d500-47a5-ad47-2d9a42dd23ae"],
Cell[258044, 6263, 673, 15, 52, "Output",ExpressionUUID->"f0a6643c-9708-4ca9-9c39-aabe4eccf095"]
}, Open  ]],
Cell[CellGroupData[{
Cell[258754, 6283, 188, 2, 28, "Input",ExpressionUUID->"d9133ae2-f2cc-4ea2-98fd-3c9722bf186a"],
Cell[258945, 6287, 373, 8, 32, "Output",ExpressionUUID->"23a3d92b-7d23-45f2-93de-f993fa153f21"]
}, Open  ]],
Cell[259333, 6298, 220, 3, 28, "Input",ExpressionUUID->"3ffb7779-0a5c-4e69-b150-02f23cac4cd1"],
Cell[CellGroupData[{
Cell[259578, 6305, 182, 2, 28, "Input",ExpressionUUID->"113db4b4-1a39-4090-b554-07cd863fa528"],
Cell[259763, 6309, 683, 15, 52, "Output",ExpressionUUID->"b6385d13-6aa1-4387-bbd0-35183b0b9009"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260483, 6329, 188, 2, 28, "Input",ExpressionUUID->"b45e6ad6-1d5e-4960-8f7a-ba30d583d9f6"],
Cell[260674, 6333, 422, 9, 32, "Output",ExpressionUUID->"cf706bba-9bba-49a9-a7e3-0eb93c0d2d5c"]
}, Open  ]],
Cell[261111, 6345, 220, 3, 28, "Input",ExpressionUUID->"56bacab0-8830-437c-946d-51686c9df979"],
Cell[CellGroupData[{
Cell[261356, 6352, 188, 2, 28, "Input",ExpressionUUID->"425f214d-f866-48d3-9e48-c6b7d2c11fbb"],
Cell[261547, 6356, 475, 10, 32, "Output",ExpressionUUID->"446e21e1-9037-4653-ac3d-5fb5d53ad126"]
}, Open  ]],
Cell[CellGroupData[{
Cell[262059, 6371, 185, 2, 28, "Input",ExpressionUUID->"6cc80b02-7ce4-44c3-9fba-0c2a8123affa"],
Cell[262247, 6375, 689, 15, 52, "Output",ExpressionUUID->"3fb42b9a-fb41-4208-9759-8a1caecf3f82"]
}, Open  ]],
Cell[262951, 6393, 217, 3, 28, "Input",ExpressionUUID->"ddfff2ce-192b-4959-b0ad-9f46c0c8f378"],
Cell[CellGroupData[{
Cell[263193, 6400, 183, 2, 28, "Input",ExpressionUUID->"747af95b-d10b-4a56-a4f7-692817d3406b"],
Cell[263379, 6404, 696, 15, 52, "Output",ExpressionUUID->"b5f688fe-8385-4622-b67a-c5088a181e29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264112, 6424, 188, 2, 28, "Input",ExpressionUUID->"f3cd855c-cfba-4175-834c-77f1ebe4f52c"],
Cell[264303, 6428, 525, 11, 32, "Output",ExpressionUUID->"bdcf9d50-3970-4d98-99c5-b992613f406c"]
}, Open  ]],
Cell[264843, 6442, 223, 3, 28, "Input",ExpressionUUID->"55aaaef3-02c0-439d-b9e7-3f76f9d6b973"],
Cell[CellGroupData[{
Cell[265091, 6449, 183, 2, 28, "Input",ExpressionUUID->"0d352358-7a4a-483b-9351-38478ed4228e"],
Cell[265277, 6453, 707, 15, 52, "Output",ExpressionUUID->"092b3efe-989c-4e0d-a7d7-7875e3def58d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266021, 6473, 188, 2, 28, "Input",ExpressionUUID->"01e9f03b-71ac-4afe-ad9a-1514afed34da"],
Cell[266212, 6477, 577, 12, 52, "Output",ExpressionUUID->"53ba9615-26da-4482-ad6c-896e619ef478"]
}, Open  ]],
Cell[266804, 6492, 220, 3, 28, "Input",ExpressionUUID->"22aa2100-f601-4fcd-8681-a1a5862696f6"],
Cell[CellGroupData[{
Cell[267049, 6499, 188, 2, 28, "Input",ExpressionUUID->"fa08f588-4ead-49d9-8c7f-95ccacbc3508"],
Cell[267240, 6503, 653, 13, 52, "Output",ExpressionUUID->"cc618ad0-d1e3-47e7-bf58-67fc1ddd3a10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[267930, 6521, 185, 2, 28, "Input",ExpressionUUID->"b406c5f3-5a7c-482b-96cb-d552323376d2"],
Cell[268118, 6525, 714, 15, 52, "Output",ExpressionUUID->"7095f23c-fecb-4219-88b8-5749624a64d2"]
}, Open  ]],
Cell[268847, 6543, 224, 4, 28, "Input",ExpressionUUID->"839bf9c4-1c4e-4f5e-ab9c-d2d0b5941107"],
Cell[CellGroupData[{
Cell[269096, 6551, 189, 3, 28, "Input",ExpressionUUID->"4aff2923-322e-4d78-b450-7287f67c4ce5"],
Cell[269288, 6556, 728, 16, 52, "Output",ExpressionUUID->"bd87dd18-c934-42c7-97a6-49d3d6890d5f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270053, 6577, 192, 3, 28, "Input",ExpressionUUID->"c93d387a-cc3f-4455-ae42-d251065239c6"],
Cell[270248, 6582, 684, 15, 52, "Output",ExpressionUUID->"9e1c4484-f03d-4bc6-9106-1d7ad7758182"]
}, Open  ]],
Cell[270947, 6600, 221, 4, 28, "Input",ExpressionUUID->"ee159f72-d3cf-47f7-85a5-ada8456ffe65"],
Cell[CellGroupData[{
Cell[271193, 6608, 187, 3, 28, "Input",ExpressionUUID->"84992d2e-a230-41ae-8da2-9069e4a3dd39"],
Cell[271383, 6613, 735, 16, 52, "Output",ExpressionUUID->"a423fb05-65f7-49c7-b8ee-afdade1b1189"]
}, Open  ]],
Cell[CellGroupData[{
Cell[272155, 6634, 190, 3, 28, "Input",ExpressionUUID->"e70710ea-e0f9-4593-9e58-d88b8c6a5141"],
Cell[272348, 6639, 735, 16, 52, "Output",ExpressionUUID->"d43d86f0-b594-4233-b801-3cde6accb700"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273120, 6660, 224, 4, 28, "Input",ExpressionUUID->"24701e19-4abf-413c-b648-5019e38c9ef6"],
Cell[273347, 6666, 172, 4, 32, "Output",ExpressionUUID->"0066c913-8bde-4d63-b236-1bea4a62643a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[273556, 6675, 189, 3, 28, "Input",ExpressionUUID->"8239f5fa-7520-4a02-ad6f-bec1b914f1c8"],
Cell[273748, 6680, 665, 15, 52, "Output",ExpressionUUID->"588c9ace-696b-4d78-beb7-118ff05da636"]
}, Open  ]],
Cell[CellGroupData[{
Cell[274450, 6700, 190, 3, 28, "Input",ExpressionUUID->"8d0a576c-ea8c-40d5-950c-6b87e91fa1ed"],
Cell[274643, 6705, 231, 4, 32, "Output",ExpressionUUID->"1ad50f6d-1146-44b4-98f9-65d4720876e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[274911, 6714, 224, 4, 28, "Input",ExpressionUUID->"ae9d7daf-5bf7-461b-8827-cc4f3ab236c3"],
Cell[275138, 6720, 163, 3, 32, "Output",ExpressionUUID->"90f57d0d-d4fb-4594-afe2-075ed6f24e25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[275338, 6728, 187, 3, 28, "Input",ExpressionUUID->"43f23a8e-3210-4339-a64f-0fc19859f6d6"],
Cell[275528, 6733, 656, 16, 52, "Output",ExpressionUUID->"13c3a43a-2199-42f7-95d6-c4652b0fdef1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[276221, 6754, 187, 3, 28, "Input",ExpressionUUID->"4872a22b-31bd-4c2b-a860-bd5800b46f85"],
Cell[276411, 6759, 251, 5, 32, "Output",ExpressionUUID->"3ec93693-d3bc-4ccd-9afc-923f21327c92"]
}, Open  ]],
Cell[276677, 6767, 179, 3, 28, "Input",ExpressionUUID->"69158c58-f85f-47d7-a5a7-fb8aa3d74f99"],
Cell[CellGroupData[{
Cell[276881, 6774, 221, 4, 28, "Input",ExpressionUUID->"a52327aa-8f29-444b-92e9-8c57c10c89a9"],
Cell[277105, 6780, 200, 3, 32, "Output",ExpressionUUID->"f11d5b40-aeb4-451b-b8dc-7f58b24f439c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277342, 6788, 931, 23, 124, "Input",ExpressionUUID->"3de08d27-abbd-48ad-96ff-08bfb1fa607f"],
Cell[278276, 6813, 36065, 658, 117, "Output",ExpressionUUID->"af5844fd-bbec-4f29-be72-30d89b77f68a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[314378, 7476, 306, 5, 28, "Input",ExpressionUUID->"9fd471fe-0a0f-496f-8067-6bc2c260501b"],
Cell[314687, 7483, 22862, 398, 90, "Output",ExpressionUUID->"e102d746-1586-4b91-a59a-cdb77b79897f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[337586, 7886, 399, 8, 28, "Input",ExpressionUUID->"aad2f288-889f-42dd-9ea3-1ee6d54f54e3"],
Cell[337988, 7896, 258, 5, 32, "Output",ExpressionUUID->"999afc69-4494-45d3-b62f-717ff4bc6458"]
}, Open  ]],
Cell[CellGroupData[{
Cell[338283, 7906, 452, 11, 48, "Input",ExpressionUUID->"a0d2fb7c-d7ef-4d42-94d6-64747f41e7fe"],
Cell[338738, 7919, 250, 5, 32, "Output",ExpressionUUID->"2e11f327-253c-4ef2-834a-2236c037266a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[339025, 7929, 491, 12, 67, "Input",ExpressionUUID->"6d2d5629-90b8-417d-a343-498123a0d924"],
Cell[339519, 7943, 149, 2, 32, "Output",ExpressionUUID->"b4eec589-e1ae-4c5d-ba77-d98e651604a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[339705, 7950, 931, 23, 124, "Input",ExpressionUUID->"cf8a1e3a-e9b3-4ddc-8b0e-7cb400d54025"],
Cell[340639, 7975, 36071, 659, 117, "Output",ExpressionUUID->"9b3476e1-c549-443a-9c1d-91e967098ab8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[376747, 8639, 390, 9, 48, "Input",ExpressionUUID->"3b386005-9aff-447d-9e0f-c8489e522732"],
Cell[377140, 8650, 224, 4, 32, "Output",ExpressionUUID->"cc6612a2-994a-4182-bb55-839355510110"]
}, Open  ]],
Cell[CellGroupData[{
Cell[377401, 8659, 495, 12, 67, "Input",ExpressionUUID->"68835391-2e9e-4dcc-8bea-e50182604562"],
Cell[377899, 8673, 225, 4, 32, "Output",ExpressionUUID->"fc1514af-0ec7-4142-8f0d-df1f6c03ce32"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378161, 8682, 536, 13, 67, "Input",ExpressionUUID->"8f327439-90a5-4a12-823e-7d1d65545f7d"],
Cell[378700, 8697, 149, 2, 32, "Output",ExpressionUUID->"9db203a5-09e4-4add-a892-150201323158"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378886, 8704, 891, 22, 124, "Input",ExpressionUUID->"f8ac615b-3175-43f2-94e1-ec35e2637348"],
Cell[379780, 8728, 36374, 666, 117, "Output",ExpressionUUID->"2a001b23-ab14-4dea-9aac-17c583b8b044"]
}, Open  ]],
Cell[CellGroupData[{
Cell[416191, 9399, 254, 4, 28, "Input",ExpressionUUID->"be3b12a9-14f5-4dfe-87cd-77b4552e7f30"],
Cell[416448, 9405, 23052, 404, 90, "Output",ExpressionUUID->"3c6baaf6-1e9f-4b7d-a292-758f07e0406b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[439537, 9814, 284, 6, 28, "Input",ExpressionUUID->"f4e979a7-259c-48d4-8108-8a67f9aa66d5"],
Cell[439824, 9822, 349, 9, 32, "Output",ExpressionUUID->"ca4a6578-b967-4c06-8aac-3b1880e057c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[440210, 9836, 317, 7, 28, "Input",ExpressionUUID->"d47c5fd4-148d-4909-bcf5-b3085070d0fd"],
Cell[440530, 9845, 349, 9, 32, "Output",ExpressionUUID->"5d6c9fdf-d94d-4162-81b5-a7b87e89b000"]
}, Open  ]],
Cell[CellGroupData[{
Cell[440916, 9859, 378, 9, 48, "Input",ExpressionUUID->"0f6b56ac-8327-4982-bd51-3e8bb7497cb0"],
Cell[441297, 9870, 284, 6, 32, "Output",ExpressionUUID->"7d57b887-7846-4b61-bcf0-2a7349f9739c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[441618, 9881, 485, 12, 67, "Input",ExpressionUUID->"ab5979d6-5635-45d7-9efd-ed335df850d0"],
Cell[442106, 9895, 192, 3, 32, "Output",ExpressionUUID->"e8eb1de3-23d8-45ba-86f8-dc3c985dac63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[442335, 9903, 580, 15, 67, "Input",ExpressionUUID->"c3984bb5-bd48-4400-a683-45c5566ef26a"],
Cell[442918, 9920, 166, 3, 32, "Output",ExpressionUUID->"cb211ce2-33e7-4103-b357-f54bb97da7c7"]
}, Open  ]],
Cell[443099, 9926, 474, 13, 67, "Input",ExpressionUUID->"a54e7e21-a75a-4222-80da-e1ab0dd85a07"],
Cell[CellGroupData[{
Cell[443598, 9943, 180, 2, 28, "Input",ExpressionUUID->"a2d8ef16-2f39-4810-b4be-12e96b581444"],
Cell[443781, 9947, 203, 3, 32, "Output",ExpressionUUID->"f1989dbb-309b-419d-829f-4c98b7257c0e"]
}, Open  ]],
Cell[443999, 9953, 217, 3, 28, "Input",ExpressionUUID->"a1077cab-21b4-4341-9b6c-2889f9a3dbb9"],
Cell[444219, 9958, 2000, 56, 219, "Input",ExpressionUUID->"3617c95b-9bf1-4605-97f5-4546ccda4129"],
Cell[CellGroupData[{
Cell[446244, 10018, 213, 4, 28, "Input",ExpressionUUID->"c4944280-d9d4-44a5-b60a-c438f3de0730"],
Cell[446460, 10024, 402, 8, 32, "Output",ExpressionUUID->"21559591-0030-4ad0-8f15-85c90405c24b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[446899, 10037, 946, 24, 124, "Input",ExpressionUUID->"44f2a2c1-5746-47ad-8942-fd88d6251fbe"],
Cell[447848, 10063, 490, 10, 32, "Output",ExpressionUUID->"f081fc85-7144-40bd-94c3-8477482cbf5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[448375, 10078, 260, 5, 28, "Input",ExpressionUUID->"463eeb6c-a88b-45ae-8a83-3bbad5ab2461"],
Cell[448638, 10085, 169, 4, 32, "Output",ExpressionUUID->"418fad4b-5b6a-4634-9ead-83d16b3bff3a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[448844, 10094, 897, 22, 124, "Input",ExpressionUUID->"7bac8117-9d75-47db-90e9-b8303a8635e3"],
Cell[449744, 10118, 200, 5, 32, "Output",ExpressionUUID->"d3b37d9e-7ffc-423c-9fbf-14b87f09600a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[449981, 10128, 956, 24, 124, "Input",ExpressionUUID->"f87e4e98-c6e5-41b4-b4f4-d3eec1629dff"],
Cell[450940, 10154, 230, 5, 32, "Output",ExpressionUUID->"db66c085-a43b-4b74-8b46-3d63ecca9917"]
}, Open  ]],
Cell[451185, 10162, 169, 3, 28, "Input",ExpressionUUID->"2d395011-d7a0-4fe6-b5c7-9df1cbc806e6"],
Cell[451357, 10167, 744, 20, 86, "Input",ExpressionUUID->"a3526414-0f32-459d-bc6c-71580784fcba"],
Cell[452104, 10189, 2208, 64, 314, "Input",ExpressionUUID->"9a9fc463-62c2-4a9e-89dc-4cbaef336553"],
Cell[CellGroupData[{
Cell[454337, 10257, 900, 23, 124, "Input",ExpressionUUID->"643e1d9c-7d24-4125-8c81-dcf17df25834"],
Cell[455240, 10282, 221, 5, 32, "Output",ExpressionUUID->"16f3b3ec-b730-42a3-a716-f5929e1756fa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[455498, 10292, 938, 24, 124, "Input",ExpressionUUID->"8054d79c-9af3-4d5d-befd-bd112f20bdc6"],
Cell[456439, 10318, 252, 6, 32, "Output",ExpressionUUID->"e62026cc-176c-4c27-9f5e-da2e56f56d4b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[456728, 10329, 979, 25, 124, "Input",ExpressionUUID->"aa4b0cb6-0330-4604-b7ca-104a82a47468"],
Cell[457710, 10356, 229, 5, 32, "Output",ExpressionUUID->"48954a4c-d8d3-42fe-81b3-3fe6710eb800"]
}, Open  ]],
Cell[457954, 10364, 423, 9, 67, "Input",ExpressionUUID->"2bf9c9f0-2df7-482d-b287-1a1f06229cf9"],
Cell[CellGroupData[{
Cell[458402, 10377, 901, 23, 124, "Input",ExpressionUUID->"6c2e7508-73d2-4a13-bf8a-70693228ed45"],
Cell[459306, 10402, 157, 3, 32, "Output",ExpressionUUID->"69aee187-9c8c-4689-8503-949a992b35d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[459500, 10410, 900, 23, 124, "Input",ExpressionUUID->"4234b534-82b5-4899-ba70-ccbe233e9523"],
Cell[460403, 10435, 158, 3, 32, "Output",ExpressionUUID->"7f55768a-ecd8-4b78-8040-003f1d3ef990"]
}, Open  ]],
Cell[CellGroupData[{
Cell[460598, 10443, 959, 24, 124, "Input",ExpressionUUID->"b3a69823-0b15-42cc-bb78-04bdaa5a8496"],
Cell[461560, 10469, 156, 3, 32, "Output",ExpressionUUID->"60b2d4a3-5193-406e-922d-5d9e29eac279"]
}, Open  ]],
Cell[CellGroupData[{
Cell[461753, 10477, 928, 24, 124, "Input",ExpressionUUID->"20fe3c46-8d01-4b11-a7dc-1e2e3a912a2c"],
Cell[462684, 10503, 264, 7, 32, "Output",ExpressionUUID->"08b9cee9-6e5e-43fd-bd18-ce6df48c4930"]
}, Open  ]],
Cell[CellGroupData[{
Cell[462985, 10515, 956, 24, 124, "Input",ExpressionUUID->"1d90904f-11c0-4d67-b652-bc491b1645a5"],
Cell[463944, 10541, 199, 5, 32, "Output",ExpressionUUID->"5bf64cbb-491b-4e55-a2f4-aaa73516229a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[464180, 10551, 224, 5, 28, "Input",ExpressionUUID->"6277261e-5f6b-4437-98ff-0f0ba477488f"],
Cell[464407, 10558, 205, 4, 32, "Output",ExpressionUUID->"686ca65e-84c8-4795-bbac-bdfacd9a0555"]
}, Open  ]],
Cell[CellGroupData[{
Cell[464649, 10567, 226, 4, 28, "Input",ExpressionUUID->"c9eb04d1-960d-4ef5-b9d1-d63222b8457c"],
Cell[464878, 10573, 312, 7, 32, "Output",ExpressionUUID->"effc8b08-6fc0-481c-b457-6ec18522ba8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[465227, 10585, 226, 4, 28, "Input",ExpressionUUID->"4f8f5608-a2c6-4c08-8bf5-d3024dd85249"],
Cell[465456, 10591, 172, 4, 32, "Output",ExpressionUUID->"8eed6313-8e65-41de-ac42-24ddae397add"]
}, Open  ]],
Cell[CellGroupData[{
Cell[465665, 10600, 227, 4, 28, "Input",ExpressionUUID->"6d479390-2a2d-44e8-ad4f-8d08806ddbb4"],
Cell[465895, 10606, 158, 3, 32, "Output",ExpressionUUID->"fb7ec02f-0203-45db-8a04-7b8988069ed3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[466090, 10614, 204, 4, 28, "Input",ExpressionUUID->"1a47e391-e7a7-46d2-80bd-e89ffc82046a"],
Cell[466297, 10620, 13489, 319, 145, "Output",ExpressionUUID->"828cdac8-0fbc-4fe3-b1d4-0b80f4aa31ca"]
}, Open  ]],
Cell[479801, 10942, 1086, 27, 124, "Input",ExpressionUUID->"9cd23187-3bfe-4dbd-8ab8-c5e424a0ec3b"],
Cell[CellGroupData[{
Cell[480912, 10973, 266, 5, 28, "Input",ExpressionUUID->"53dcf7b1-3c9d-4fc8-9c9b-b9cb27edae61"],
Cell[481181, 10980, 525, 12, 32, "Output",ExpressionUUID->"62ce092e-cd5b-44c4-b9e3-c6b0bdbc1b02"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481743, 10997, 181, 3, 28, "Input",ExpressionUUID->"37fc2481-fa2b-4b2e-b98e-888ddea28f8c"],
Cell[481927, 11002, 205, 4, 32, "Output",ExpressionUUID->"130d338a-566b-4549-ab6c-cfca9744d05a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[482169, 11011, 184, 3, 28, "Input",ExpressionUUID->"048fbc97-157d-47e8-a677-949ccef95f22"],
Cell[482356, 11016, 525, 12, 32, "Output",ExpressionUUID->"980c30bb-fdda-4b97-a187-c6a8c270086f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[482918, 11033, 284, 6, 28, "Input",ExpressionUUID->"0a92a96c-ffe4-4d7b-8e11-19f4f6ce2654"],
Cell[483205, 11041, 523, 12, 32, "Output",ExpressionUUID->"5fe697c7-f0fd-4330-ba08-97dc8b9d77c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[483765, 11058, 180, 3, 28, "Input",ExpressionUUID->"432002db-2977-4f0d-bcb3-bb90e2c2070e"],
Cell[483948, 11063, 525, 12, 32, "Output",ExpressionUUID->"d18b3982-23eb-4ece-8615-2aaed05dcc63"]
}, Open  ]],
Cell[CellGroupData[{
Cell[484510, 11080, 457, 12, 48, "Input",ExpressionUUID->"9959c3b4-f717-483d-b2e6-ef79374aa246"],
Cell[484970, 11094, 2385, 56, 204, "Output",ExpressionUUID->"ec257c9b-a742-4f02-9f7b-fd582d461ada"]
}, Open  ]],
Cell[CellGroupData[{
Cell[487392, 11155, 893, 23, 105, "Input",ExpressionUUID->"07ab6191-2728-4bfe-8874-e90b130b4a13"],
Cell[488288, 11180, 36352, 667, 117, "Output",ExpressionUUID->"2f73d1c0-f867-4bde-bf9b-e1559c002293"]
}, Open  ]],
Cell[CellGroupData[{
Cell[524677, 11852, 273, 5, 28, "Input",ExpressionUUID->"ff6ea5ba-2c4c-4220-b7ff-73a66989cb3d"],
Cell[524953, 11859, 196, 4, 32, "Output",ExpressionUUID->"0908f868-bafb-439d-88fc-750deca5ec4a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[525186, 11868, 282, 6, 28, "Input",ExpressionUUID->"8ad103aa-5f55-4821-81ba-821481445d04"],
Cell[525471, 11876, 525, 12, 32, "Output",ExpressionUUID->"2c11f587-2864-4bb6-85e9-72c70791ac48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[526033, 11893, 189, 3, 28, "Input",ExpressionUUID->"e2d976da-8ad3-4a3c-9ad5-b74f93f436c4"],
Cell[526225, 11898, 2381, 56, 204, "Output",ExpressionUUID->"b3d4c3d6-1ef9-4820-bb6c-6fa66411c6c7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[528643, 11959, 256, 5, 28, "Input",ExpressionUUID->"be0cd953-6032-4132-8a3e-e6af7003d57e"],
Cell[528902, 11966, 37195, 697, 90, "Output",ExpressionUUID->"e23adc08-c5ca-465a-8e11-7ef5846033ed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[566134, 12668, 190, 3, 28, "Input",ExpressionUUID->"bfecc462-5854-4ce0-9681-176040a62bea"],
Cell[566327, 12673, 36354, 667, 117, "Output",ExpressionUUID->"87c3b764-0458-497a-aa6d-b23973293827"]
}, Open  ]],
Cell[CellGroupData[{
Cell[602718, 13345, 220, 4, 28, "Input",ExpressionUUID->"2d6509cb-fe4c-494b-b584-36207a72a30c"],
Cell[602941, 13351, 20410, 354, 90, "Output",ExpressionUUID->"f244da93-dc93-4f28-976f-7eb456833c37"]
}, Open  ]],
Cell[CellGroupData[{
Cell[623388, 13710, 293, 7, 28, "Input",ExpressionUUID->"cc053759-f587-444a-9756-cf963c344609"],
Cell[623684, 13719, 159, 3, 32, "Output",ExpressionUUID->"13c125e9-53c6-4f4e-8ed5-440e3acb48bf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[623880, 13727, 291, 7, 28, "Input",ExpressionUUID->"3cb558a7-5865-446b-aee2-d88c112ac43b"],
Cell[624174, 13736, 158, 3, 32, "Output",ExpressionUUID->"8882c8b3-7b9d-4d45-bd93-d8a120c9eec2"]
}, Open  ]],
Cell[624347, 13742, 212, 4, 28, "Input",ExpressionUUID->"ac3474b0-9c67-4fe7-a713-e9c208f1bde6"],
Cell[624562, 13748, 924, 24, 105, "Input",ExpressionUUID->"e5ee5cb8-558f-4498-b944-295a4358106e"],
Cell[CellGroupData[{
Cell[625511, 13776, 314, 6, 28, "Input",ExpressionUUID->"9d0d43a4-ddef-419f-9c7d-fe08ed9b42e0"],
Cell[625828, 13784, 302, 6, 32, "Output",ExpressionUUID->"992d699b-7c40-432e-90b3-b8e315ef09b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[626167, 13795, 188, 3, 28, "Input",ExpressionUUID->"e426b7da-8cf9-4090-9b35-46d3aea516a5"],
Cell[626358, 13800, 36403, 668, 117, "Output",ExpressionUUID->"6601eaa9-42f6-4e14-b991-f5572998e96e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[662798, 14473, 302, 5, 28, "Input",ExpressionUUID->"c041b9b7-bdef-4665-b1e4-f215d1f6bad2"],
Cell[663103, 14480, 332, 6, 32, "Output",ExpressionUUID->"c0f14593-d63b-4ba1-9af7-2755cd61e99e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[663472, 14491, 192, 3, 28, "Input",ExpressionUUID->"3c26d382-807f-4633-b557-2b143c9cbf21"],
Cell[663667, 14496, 31661, 574, 90, "Output",ExpressionUUID->"8c5b3db6-9cfe-4d93-8e51-59c59527925a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[695365, 15075, 277, 6, 28, "Input",ExpressionUUID->"039a196e-ad9e-493e-9ba4-2fa0dc4fbf88"],
Cell[695645, 15083, 510, 11, 28, "Message",ExpressionUUID->"8d4c47a2-d88f-4351-85a4-1c29ced1e82d"],
Cell[696158, 15096, 32724, 588, 123, "Output",ExpressionUUID->"fef67ff5-74a5-41f6-8337-08357601d21b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[728919, 15689, 186, 3, 28, "Input",ExpressionUUID->"c2a0006d-f04f-4d3d-a463-0e31e987da05"],
Cell[729108, 15694, 31585, 572, 90, "Output",ExpressionUUID->"127de378-43c4-4149-8feb-165984b75cd8"]
}, Open  ]],
Cell[760708, 16269, 1269, 31, 143, "Input",ExpressionUUID->"a6117cab-63c3-44d0-92e2-3a65d48a6ec7"],
Cell[CellGroupData[{
Cell[762002, 16304, 192, 3, 28, "Input",ExpressionUUID->"8c7a899a-af21-4267-ad8c-2a9e304e85bd"],
Cell[762197, 16309, 31584, 572, 90, "Output",ExpressionUUID->"57da0d9e-726c-4fa2-b269-d5a007625656"]
}, Open  ]],
Cell[CellGroupData[{
Cell[793818, 16886, 270, 5, 28, "Input",ExpressionUUID->"41490dc1-5c66-444f-83a9-a3a8c36e8538"],
Cell[794091, 16893, 519, 11, 28, "Message",ExpressionUUID->"0d90b873-efc7-4c48-9250-83a76144bf0f"],
Cell[794613, 16906, 36099, 660, 117, "Output",ExpressionUUID->"232d80d2-7100-4772-9db6-60e60715c564"]
}, Open  ]],
Cell[CellGroupData[{
Cell[830749, 17571, 190, 3, 28, "Input",ExpressionUUID->"3b1a7e6f-4d79-4f7b-aa66-f5c7bd97dc6d"],
Cell[830942, 17576, 31560, 572, 90, "Output",ExpressionUUID->"e7f63c1a-4a15-4195-8178-e8d9b9100a59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[862539, 18153, 223, 4, 28, "Input",ExpressionUUID->"2b5a39a6-e0aa-4fd4-896d-a9897617c1a1"],
Cell[862765, 18159, 169, 4, 32, "Output",ExpressionUUID->"b76a9776-aa4b-4f3d-85ac-4a5fdef11809"]
}, Open  ]],
Cell[CellGroupData[{
Cell[862971, 18168, 217, 4, 28, "Input",ExpressionUUID->"be948a0b-8e29-454b-b92f-450c8a79f968"],
Cell[863191, 18174, 170, 4, 32, "Output",ExpressionUUID->"56423a0e-a83d-4df4-b546-0a8b57dbc9cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[863398, 18183, 218, 4, 28, "Input",ExpressionUUID->"07bca10e-08e6-447c-b4d0-f2f4dcea3600"],
Cell[863619, 18189, 172, 4, 32, "Output",ExpressionUUID->"3841c85d-4ba8-4fa5-b5e6-c81cb74c69e0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[863828, 18198, 225, 4, 28, "Input",ExpressionUUID->"7c050164-0317-46c2-8a32-0b9fda514e01"],
Cell[864056, 18204, 170, 4, 32, "Output",ExpressionUUID->"8d49f7ef-98d0-402e-9420-4fc521332d19"]
}, Open  ]],
Cell[CellGroupData[{
Cell[864263, 18213, 205, 4, 28, "Input",ExpressionUUID->"560ae70f-c09e-49fe-a577-23765d07089f"],
Cell[864471, 18219, 11417, 279, 325, "Output",ExpressionUUID->"735795bb-6a5e-4e18-8752-4d2da94ab20a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[875925, 18503, 219, 4, 28, "Input",ExpressionUUID->"bd33d4d4-5efb-48a0-8ea5-aee98f24f576"],
Cell[876147, 18509, 15149, 338, 235, "Output",ExpressionUUID->"9d0887b9-feba-4b62-993c-e132766b8e9f"]
}, Open  ]],
Cell[891311, 18850, 449, 10, 48, "Input",ExpressionUUID->"eb665d76-b6bf-4fee-b647-e5f04499c830"],
Cell[891763, 18862, 1124, 28, 124, "Input",ExpressionUUID->"904a7899-60b0-47a9-b111-e23864b93668"],
Cell[CellGroupData[{
Cell[892912, 18894, 273, 5, 28, "Input",ExpressionUUID->"a6b30713-6521-4383-b5a5-6569b7fad8d1"],
Cell[893188, 18901, 36188, 660, 117, "Output",ExpressionUUID->"8e3ef87c-bcff-4bb4-9e4a-b6e163b467db"]
}, Open  ]],
Cell[929391, 19564, 700, 21, 105, "Input",ExpressionUUID->"64047a94-8fc1-4dc2-bc68-65861e9c72b7"],
Cell[CellGroupData[{
Cell[930116, 19589, 158, 3, 67, "Section",ExpressionUUID->"2b4f9dd1-92bf-4c39-93f0-8a01bdd72bd6"],
Cell[CellGroupData[{
Cell[930299, 19596, 206, 4, 28, "Input",ExpressionUUID->"2956eca5-d571-41cb-a069-8e456fc5521e"],
Cell[930508, 19602, 11852, 291, 317, "Output",ExpressionUUID->"fe1b20cf-8c89-4488-a583-67b326342245"]
}, Open  ]],
Cell[942375, 19896, 220, 4, 28, "Input",ExpressionUUID->"add513ca-0ccf-4c83-a1a3-92c2c757a5e1"],
Cell[942598, 19902, 285, 6, 28, "Input",ExpressionUUID->"0a1ac982-3075-4b7a-b583-0b9f5dee1320"],
Cell[942886, 19910, 1114, 28, 124, "Input",ExpressionUUID->"96c37618-10d7-48bb-bc53-94309c2b878f"],
Cell[CellGroupData[{
Cell[944025, 19942, 275, 5, 28, "Input",ExpressionUUID->"95e26c30-e881-4cb7-834d-9abe28c5ea7c"],
Cell[944303, 19949, 215, 4, 32, "Output",ExpressionUUID->"307774af-e1ee-48c9-acab-0b02f9a5e13a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[944555, 19958, 417, 11, 28, "Input",ExpressionUUID->"f0ba4a57-df0d-4e6c-9f07-91c50db62ff5"],
Cell[944975, 19971, 548, 17, 32, "Output",ExpressionUUID->"1a7f22b6-2266-44e5-a1ae-9abb9752817f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[945572, 19994, 206, 4, 67, "Section",ExpressionUUID->"5d066113-26d8-4bb9-a85b-76aa2474d9dc"],
Cell[945781, 20000, 289, 6, 28, "Input",ExpressionUUID->"68195402-525d-4231-95ce-7be1815edb5b"],
Cell[946073, 20008, 740, 21, 105, "Input",ExpressionUUID->"09d62921-1936-4136-aa5d-171658148f8e"],
Cell[CellGroupData[{
Cell[946838, 20033, 257, 5, 28, "Input",ExpressionUUID->"75e8a7ac-9981-4d74-a83b-cf91058f7e8e"],
Cell[947098, 20040, 204, 4, 32, "Output",ExpressionUUID->"71808775-1d72-48b0-9c62-bd60c04cb774"]
}, Open  ]],
Cell[CellGroupData[{
Cell[947339, 20049, 190, 3, 28, "Input",ExpressionUUID->"e6558b5e-1c1c-42a8-ba8d-f1d86a4b8c4e"],
Cell[947532, 20054, 67288, 1268, 306, "Output",ExpressionUUID->"7b89dea5-8853-4aee-b3f4-f12e292367f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1014857, 21327, 263, 5, 28, "Input",ExpressionUUID->"007d14bf-0cf1-4bc8-a5d8-6d86a3baf1a6"],
Cell[1015123, 21334, 155, 3, 32, "Output",ExpressionUUID->"e75da1eb-a5cb-4847-81dd-7f002acf7731"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1015315, 21342, 259, 5, 28, "Input",ExpressionUUID->"c54a3fe1-af58-4a68-91f6-b87d5c23578f"],
Cell[1015577, 21349, 153, 3, 32, "Output",ExpressionUUID->"bee08297-8612-412a-94e2-84385f00e6e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1015767, 21357, 444, 12, 48, "Input",ExpressionUUID->"24e2902d-82d9-445e-a528-958cb4fe481e"],
Cell[1016214, 21371, 497, 14, 32, "Output",ExpressionUUID->"d3514f37-439f-4c9c-9cab-ad3a929b366a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1016748, 21390, 190, 3, 28, "Input",ExpressionUUID->"2105c052-3c77-4bd8-a165-bf7af42da911"],
Cell[1016941, 21395, 71863, 1355, 333, "Output",ExpressionUUID->"f57c7b9d-e315-4b26-8bd6-65e1010fc518"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1088853, 22756, 158, 3, 67, "Section",ExpressionUUID->"8996b823-1f79-4be4-ae14-c94ba206f0f7"],
Cell[CellGroupData[{
Cell[1089036, 22763, 485, 13, 48, "Input",ExpressionUUID->"ef00d93f-605d-4860-986a-3ea3356fc435"],
Cell[1089524, 22778, 2383, 56, 204, "Output",ExpressionUUID->"27cce40a-763f-4ecd-90fe-57a14c46c888"]
}, Open  ]],
Cell[1091922, 22837, 285, 6, 28, "Input",ExpressionUUID->"b9c45cd4-fa15-4910-8be4-fb1673224dc2"],
Cell[CellGroupData[{
Cell[1092232, 22847, 220, 4, 28, "Input",ExpressionUUID->"f4db62a2-0ee5-4e86-9090-2d7e8db93575"],
Cell[1092455, 22853, 27606, 489, 117, "Output",ExpressionUUID->"48a5dd05-24ea-44b5-bf0e-b2e8b11f07be"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1120098, 23347, 255, 5, 28, "Input",ExpressionUUID->"4917a653-97a9-4732-9dba-57062d81a673"],
Cell[1120356, 23354, 19958, 345, 63, "Output",ExpressionUUID->"87acb929-5271-46e8-913b-f319c7fa7e48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1140351, 23704, 353, 8, 28, "Input",ExpressionUUID->"6d287c96-b1cc-4c99-9be8-fa5c966022d9"],
Cell[1140707, 23714, 341, 7, 32, "Output",ExpressionUUID->"e255eaf3-580a-42b3-bdaf-a496a772735b"]
}, Open  ]],
Cell[1141063, 23724, 154, 3, 28, "Input",ExpressionUUID->"f6d171a5-ae1e-4946-9ab0-20fd53c5a3fc"],
Cell[1141220, 23729, 299, 7, 28, "Input",ExpressionUUID->"a97c9b45-8628-4422-9c22-5c15167d9aa4"]
}, Open  ]]
}
]
*)

